<?xml version="1.0" encoding="UTF-8" ?>
<!-- This is a WordPress eXtended RSS file generated by WordPress as an export of your site. -->
<!-- It contains information about your site's posts, pages, comments, categories, and other content. -->
<!-- You may use this file to transfer that content from one site to another. -->
<!-- This file is not intended to serve as a complete backup of your site. -->

<!-- To import this information into a WordPress site follow these steps: -->
<!-- 1. Log in to that site as an administrator. -->
<!-- 2. Go to Tools: Import in the WordPress admin panel. -->
<!-- 3. Install the "WordPress" importer from the list. -->
<!-- 4. Activate & Run Importer. -->
<!-- 5. Upload this file using the form provided on that page. -->
<!-- 6. You will first be asked to map the authors in this export file to users -->
<!--    on the site. For each author, you may choose to map to an -->
<!--    existing user on the site or to create a new user. -->
<!-- 7. WordPress will then import each of the posts, pages, comments, categories, etc. -->
<!--    contained in this file into your site. -->

<!-- generator="WordPress.com" created="2016-09-10 10:00"-->
<rss version="2.0"
	xmlns:excerpt="http://wordpress.org/export/1.2/excerpt/"
	xmlns:content="http://purl.org/rss/1.0/modules/content/"
	xmlns:wfw="http://wellformedweb.org/CommentAPI/"
	xmlns:dc="http://purl.org/dc/elements/1.1/"
	xmlns:wp="http://wordpress.org/export/1.2/"
>

<channel>
	<title>As Thick As Two Short Planks - Mark Fowler&#039;s Blog</title>
	<link>https://twoshortplanks.wordpress.com</link>
	<description></description>
	<pubDate>Sat, 10 Sep 2016 10:00:43 +0000</pubDate>
	<language>en</language>
	<wp:wxr_version>1.2</wp:wxr_version>
	<wp:base_site_url>http://wordpress.com/</wp:base_site_url>
	<wp:base_blog_url>https://twoshortplanks.wordpress.com</wp:base_blog_url>

	<wp:author><wp:author_id>9278756</wp:author_id><wp:author_login><![CDATA[2shortplanks]]></wp:author_login><wp:author_email><![CDATA[mark@twoshortplanks.com]]></wp:author_email><wp:author_display_name><![CDATA[2shortplanks]]></wp:author_display_name><wp:author_first_name><![CDATA[Mark]]></wp:author_first_name><wp:author_last_name><![CDATA[Fowler]]></wp:author_last_name></wp:author>

	<wp:category><wp:term_id>5584</wp:term_id><wp:category_nicename>1</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[1]]></wp:cat_name>
</wp:category>
	<wp:category><wp:term_id>5226</wp:term_id><wp:category_nicename>perl</wp:category_nicename><wp:category_parent></wp:category_parent><wp:cat_name><![CDATA[Perl]]></wp:cat_name>
</wp:category>

	<generator>http://wordpress.com/</generator>
<image>
		<url>http://s2.wp.com/i/buttonw-com.png</url>
		<title>As Thick As Two Short Planks &#8211; Mark Fowler&#039;s Blog</title>
		<link>https://twoshortplanks.wordpress.com</link>
	</image>
		
	<item>
		<title>About</title>
		<link>https://twoshortplanks.wordpress.com/about/</link>
		<pubDate>Tue, 11 Aug 2009 12:10:56 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false"></guid>
		<description></description>
		<content:encoded><![CDATA[You're reading Mark Fowler's Perl blog where he whitters about Perl programming.

Mark is a professional Perl programmer working in London, United Kindom.  He's been programming Perl for over ten years, in which time he's been involved in various hijinks like <a href="http://search.cpan.org/~markf/">releasing open source modules</a>, heading up the <a href="http://london.pm.org/">London Perl Moungers</a> user group for a while, organising the odd Perl conference here and there, and starting the Perl advent calendar.

<a href="http://ironman.enlightenedperl.org/"><img style="float:left;margin:5px;" src="http://ironman.enlightenedperl.org/munger/mybadge/male/Trelane.png" /></a> After several years hiatus from keeping a Perl blog he recently decided to start blogging again as part of a the <a href="http://www.enlightenedperl.org/ironman.html">Perl Ironman Challenge</a>, where he agreed to post on average once a week in exchange for the right to show this natty icon on this page.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>2</wp:post_id>
		<wp:post_date>2009-08-11 12:10:56</wp:post_date>
		<wp:post_date_gmt>2009-08-11 12:10:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>about</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>page</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_page_template</wp:meta_key>
			<wp:meta_value><![CDATA[default]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>say &quot;Hello World&quot;</title>
		<link>https://twoshortplanks.wordpress.com/2009/08/11/say-hello-world/</link>
		<pubDate>Tue, 11 Aug 2009 16:20:18 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.wordpress.com/?p=3</guid>
		<description></description>
		<content:encoded><![CDATA[<blockquote>This is a blog.  There are many like it but this one is mine.</blockquote>
<p style="text-align:right;">-- badly paraphrasing <strong>Full Metal Jacket</strong></p>

Hi.  You might know me.  I'm Mark Fowler.  No, not the fictional guy from Eastenders or the deceased serial killer, but the Mark Fowler whose best known on that there Internet in connection with the Perl programming language.

And I've decided to do a very silly thing.  Matt Trout, king of the rants and opinions, is trying to encourage more people to write Perl blogs.  And I said that not only that I would but I'd also post at least once a week as some part of a <a href="http://ironman.enlightenedperl.org/">crazy iron man challange</a>.  Ooops.  That sounds like a lot of work.

Why have I decided to do that?  Well, I do a lot of Perl stuff that's worth talking about, but I don't really write about it any more, which is a shame because I think it's interesting at least.

I used to enjoy keeping a very active <a href="http://use.perl.org/~2shortplanks/journal">blog</a> on use.perl.org, but I got fed up with the whole primitive nature of use.perl.org. It was obviously time to move somewhere else.  And being a geek, I though it might be fun to write my own blogging engine to do that.  This is <em>Yak Shaving</em> at it's best. How long could it possibly take to write your own blogging software?  Well, if all you want to do is knock out a few pages of text, not long at all.  If you however want rich GUI editors, open ID support, trackbacks, comments, anti-spam filters, gravatar support, previewing and draft posts, workflow management, and about a gazillion other things that make up a modern blog it might take a <em>smidgen</em> more than not long at all.

This is even more of a problem if you've in fact got less than a <em>smidgen</em> of spare time because:
<ol>
	<li>You're a professional Perl programmer who spends all his time doing much more serious Perl development or running teams doing professional Perl development, so you don't actually feel like doing boring aspects of projects in your spare time.</li>
	<li>You hence look for shiny and fun projects to play with in your spare time because it's your spare time, so you want more instant payback.</li>
	<li>You took on a big project half way through the rewrite that's much much more fun, but very demanding on your time and can't be put down.  Little baby geek in training, I'm looking at you ;-)</li>
</ol>
In other words it went the way of all other programming projects:  The requirements were not properly scoped and estimated, and the fact that other, more pressing projects had to be delivered in the same timescale wasn't accounted for.

You see, I forgot to apply one of the virtues of a Perl programmer;  <em>Laziness.</em> Or, put another way, I should have applied a little agile methodology and done the least possible thing I could have done to get the desired result.  What I should have done is said "What software have other people written that I can use, and if need be, alter to do what I need.".  Or, in the days of cloud computing, I should have said "What hosted service can I use that does <em>everything</em> for me, from deployment to working out how to make it scale."  So now after spending literally <em>minutes</em> filling out forms online I have a wordpress blog and I can actually start blogging again.

So, having started the new blog describing how much of a <em>Class One Idiot</em> I am, why should you listen to me?  What am I likely to discuss?

Posts that are in the draft folder currently include
<ul>
	<li>A bunch of discussion of Perl modules I've started using in the last few years.  I used to review 25 modules a year for the Perl Advent Calendar and I miss writing about cool modules.  (I don't miss the grueling post-per-day schedule however)</li>
	<li>How Devel::Declare is allowing redevelopment of the Perl language directly from the CPAN, and how we're even using in production now</li>
	<li>Something on how Ash Berlin's TryCatch module is the improvement to Perl I've been waiting for my entire programming career.</li>
	<li>Waffle on XML::Easy, my new favourite XML module of choice, and how I used it to create Test::XML::Easy.</li>
	<li>Improvements to my Perl modules;  Where I'm heading with Test::Builder::Tester after leaving that code base dormant for so long.</li>
	<li>How I'm moving all my code to github, and what changes I'm making to the packaging of all my CPAN modules as a matter of course as I do so.</li>
</ul>
And eventually I'm going to talk about my super secret Perl project when it comes out of stealth mode.  But I'll leave that for another post...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>3</wp:post_id>
		<wp:post_date>2009-08-11 16:20:18</wp:post_date>
		<wp:post_date_gmt>2009-08-11 16:20:18</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>say-hello-world</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Smith]]></wp:comment_author>
			<wp:comment_author_email>phillip@communitybandwidth.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.communitybandwidth.ca</wp:comment_author_url>
			<wp:comment_author_IP>200.127.230.15</wp:comment_author_IP>
			<wp:comment_date>2009-08-14 16:00:53</wp:comment_date>
			<wp:comment_date_gmt>2009-08-14 16:00:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Welcome. Looking forward to the next post. (And that post on "I though it might be fun to write my own blogging engine to do that." ;)  )

Phillip.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-14 16:00:53]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Testing Perl 5.10.1 RC 1</title>
		<link>https://twoshortplanks.wordpress.com/2009/08/12/testing-perl-5-10-1-rc-1/</link>
		<pubDate>Wed, 12 Aug 2009 13:36:52 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=11</guid>
		<description></description>
		<content:encoded><![CDATA[<strong>UPDATE: Since this blog post was written, this got a lot easier with perlbrew.  I wrote about this <a href="http://blog.twoshortplanks.com/2011/01/01/perlbrew/">here</a></strong>

There's a new stable release of perl in the works - Perl 5.10.1 - that's reached "Release Candidate" stage.  In other words, we've got a shiny new version of the perl interpreter and associated core Perl modules that the pumpking (the person in charge of the release) thinks is ready, but he wants us to all test it on our systems with our code to make sure that there's no problems he can't spot himself before it's finally released.

So how do we do that?  Well, we can follow <a href="http://gugod.org/2009/08/install-perl-to-home.html">gugod's instructions</a> to build a version in our home directory.  Below is what I did for my system (a Mac OS X 10.5 box, with the developer tools already installed from the CD that shipped with the computer) 

First we download and extract the distribution:

<code><pre>bash$ wget http://search.cpan.org/CPAN/authors/id/D/DA/DAPM/perl-5.10.1-RC1.tar.gz
bash$ gunzip -c perl-5.10.1-RC1.tar.gz | tar -xvf -
bash$ cd perl-5.10.1-RC1</pre></code>

Then we then configure it.  

<code><pre>bash$ Configure -de -Dprefix=${HOME}/local</pre></code>

<code>-de</code> means "Accept the defaults" and "Go on accepting the defaults".  <code>-Dprefix</code> tells the installer where to install - in this case in "local" in our home directory where it won't interfere with the system Perl.

We then can tell it to build, test, and install itself.

<code><pre>bash$ make
bash$ make test
bash$ make install
</pre></code>

This all will take some time.  Either go make a cup of tea, or just get on with something else.

Whenever I want to test the new version of Perl I can use the <code>export</code> command to modify my path to put this new perl first.

<code><pre>bash$ export PATH=${HOME}/local/bin:${PATH}</pre></code>

This means that when I type <code>perl</code> from my shell (or use any of the other perl utilities in this shell) from that point on it'll run the version of perl I'm testing rather than the system perl that came with my Mac.

<code><pre>bash$ perl -v

This is perl, v5.10.1 (*) built for darwin-2level
(with 1 registered patch, see perl -V for more detail)

Copyright 1987-2009, Larry Wall

Perl may be copied only under the terms of either the Artistic License or the
GNU General Public License, which may be found in the Perl 5 source kit.

Complete documentation for Perl, including FAQ lists, should be found on
this system using "man perl" or "perldoc perl".  If you have access to the
Internet, point your browser at http://www.perl.org/, the Perl Home Page.
</pre></code>

We can now start installing modules from the CPAN in order to test out our new perl.  I must admit that I jumped straight for the big guns: <a href="http://search.cpan.org/dist/Task-Kensho/">Task::Kensho</a>.

"Tasks" are psudo-packages that you find on the CPAN that don't really contain any code of their own, but just provide documentation and depend on a bunch of other modules.  They're a common way to load a collection of modules.  Task::Kensho is one of the big ones here - it's a large-ish collection of modules that are commonly used by modern Perl programmers, and installing it basically will tell cpan to install all the modules that I need to get up and running and start being productive.

It took me about an hour to install all of these modules from a local on disk cpan mirror I had previously created with <a href="http://search.cpan.org/dist/CPAN-Mini/">minicpan</a>, but quite a lot of that was delays caused by me configuring my cpan shell to prompt me before doing anything (because I wanted to keep track of what it was doing, as I was testing the new release candidate.)

All in all it was a fairly painless experience.  I look forward to the release proper of 5.10.1 in the near future!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>11</wp:post_id>
		<wp:post_date>2009-08-12 13:36:52</wp:post_date>
		<wp:post_date_gmt>2009-08-12 13:36:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testing-perl-5-10-1-rc-1</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>213</wp:comment_id>
			<wp:comment_author><![CDATA[Having a Brew &laquo; As Thick As Two Short Planks &#8211; Mark Fowler&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.twoshortplanks.com/2011/01/01/perlbrew/</wp:comment_author_url>
			<wp:comment_author_IP>66.135.48.189</wp:comment_author_IP>
			<wp:comment_date>2011-01-01 17:46:36</wp:comment_date>
			<wp:comment_date_gmt>2011-01-01 17:46:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] in August in 2009 I wrote a post on how to install a release candidate of Perl. Installing a custom perl in your home [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1295686512]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1295686512.8155";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293903996.8072";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-01-01 17:46:36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Saying Thanks</title>
		<link>https://twoshortplanks.wordpress.com/?p=17</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=17</guid>
		<description></description>
		<content:encoded><![CDATA[The first thing I did when I installed the release candidate was to <em>thank</em> those people involved using the <code>perlthanks</code> utilitly, which you can just run from the command line.  This throws up a simple command line application that sends an email of gratitude.  It's essentially the same thing as <code>perlbug</code> but for saying thanks, not for reporting bugs

<code>
<pre>bash$ travis-2:~ mark$ perlthanks
This program provides an easy way to send a thank-you message
back to the authors and maintainers of perl.

If you wish to submit a bug report, please run it without the -T
flag (or run the program perlbug rather than perlthanks)

First of all, please provide a subject for the message.
Subject: Thanks for all the releases


It's now time to compose your thank-you message.

Some information about your local perl configuration will
automatically be included at the end of your message, because
we're curious about the different ways that people build and use
perl. If you'd rather not share this information, you're welcome
to delete it.

You will probably want to use a text editor to enter the body of
your report. If "vi" is the editor you want to use, then just
press Enter, otherwise type in the name of the editor you would
like to use.

If you have already composed the body of your report, you may
enter "file", and /Users/mark/local/bin/perlthanks will prompt
you to enter the name of the file containing your report.

Editor [vi]: 
</pre></code>
<i>type thanks message here</i>
<code><pre>

You have finished composing your message. At this point, you have 
a few options. You can:

    * [Se]end the message to perl-thanks@perl.org, 
    * [D]isplay the message on the screen,
    * [R]e-edit the message
    * Display or change the message's [su]bject
    * Save the message to a [f]ile to mail at another time
    * [Q]uit without sending a message

Action (Send/Display/Edit/Subject/Save to File): Se</pre>
</code>

W]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>17</wp:post_id>
		<wp:post_date>2009-08-12 18:10:19</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Devel::Declare</title>
		<link>https://twoshortplanks.wordpress.com/?p=23</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=23</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>23</wp:post_id>
		<wp:post_date>2009-08-12 19:30:00</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test::XML::Easy</title>
		<link>https://twoshortplanks.wordpress.com/?p=24</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=24</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>24</wp:post_id>
		<wp:post_date>2009-08-12 19:30:23</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Moving to GitHub</title>
		<link>https://twoshortplanks.wordpress.com/?p=26</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=26</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>26</wp:post_id>
		<wp:post_date>2009-08-12 19:30:39</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>TryCatch</title>
		<link>https://twoshortplanks.wordpress.com/?p=27</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=27</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>27</wp:post_id>
		<wp:post_date>2009-08-12 19:31:01</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>What does &quot;ownership&quot; of a module mean?</title>
		<link>https://twoshortplanks.wordpress.com/2009/08/19/cpan-ownership/</link>
		<pubDate>Wed, 19 Aug 2009 09:05:56 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=28</guid>
		<description></description>
		<content:encoded><![CDATA[So, I was contacted by someone yesterday with patches for a module I wrote during my employment at Fotango.  I thought it might be a good idea to release these patches, but looking at the module in question, I quickly realised that I didn't actually have rights to upload an updated version, because the module in question is owned on CPAN by the FOTANGO CPAN user.

This complicates matters no end.  You see, Fotango was shut down by it's parent company quite a while back.  There is no Fotango anymore.  I no longer have access to the FOTANGO CPAN account, nor do I know any person that does.

I contacted Alias.  He's <a href="http://use.perl.org/~Alias/journal/39488">trying to sort it out</a>.

I know, for example, in theory the property rights for Fotango revert to the parent company (though the exactly who owns that IP is something that the lawyers probably know - I'm not sure myself.)  Obviously the code isn't the issue here;  The code is open source and licensed in such a way that it can be forked by me quite happily. The real question here is, is the CPAN ID intellectual property?  Are the CPAN namespaces?  Do they have value in the same way that a domain name does?

If the answer is yes, then we need to get then we've got bigger issues at foot than who owns the Fotango modules.  Anyone who has released company code using their own CPAN ID rather than a company one (which is currently considered best practice) is registering IP that belongs to the company in their own name.  That can't be right.

If the answer is no, then the namespaces are just things that someone (presumably the PAUSE admins and/or the modules mailing list) control and "ownership" of a module is just a handy tag to let the automated systems do automated tasks so a real human doesn't keep having to make judgement calls every five minutes.  This doesn't mean the real human doesn't need guidelines and rules to work within however.  What's the correct thing to do when a company (or for that matter, human) dies?  I think my argument stands that the "ownership" doesn't transfer like other property rights.

I'm sure that Greater Minds than myself have already debated and come to conclusions on this;  Anyone want to point me towords the guidelines?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>28</wp:post_id>
		<wp:post_date>2009-08-19 09:05:56</wp:post_date>
		<wp:post_date_gmt>2009-08-19 09:05:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpan-ownership</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>3</wp:comment_id>
			<wp:comment_author><![CDATA[Barbie]]></wp:comment_author>
			<wp:comment_author_email>barbie@missbarbell.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://barbie.missbarbell.co.uk</wp:comment_author_url>
			<wp:comment_author_IP>82.71.200.107</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 12:41:04</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 12:41:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You're confusing the PAUSE ID with the identity of an owner. The two are not the same. The owner of the IP, in this case the code, is as written in the Copyright statement. If that happens to be a company, rather than an individual, so be it. Hopefully the licence listed is clear enough to explain what you can and can't do with the code. In this case you're free to fork, etc as you note.

However, the PAUSE ID is not necessarily the owner. In many cases it just so happens that they are. Or at least part-owner :) The PAUSE ID is better described as the identity of the release manager. It is the person that is responsible for ensuring that the distribution is correctly packaged and uploaded to PAUSE/CPAN. There are now several projects which follow this practice and are the better for it IMHO.

The problem that the PAUSE Admins face is that the PAUSE ID identity of FOTANGO belongs to the parent company, and as such finding someone to actually agree that maintainership can pass to another person (ex-employee or otherwise) is difficult as it can take time to find the right person to give authorisation, and in some cases understand what they are authorising.

Personally I think there should be better agreed terms to signing up to receiving a PAUSE account, so that regardless of whether you sign up as an individual or a corporate identity, if at any time the identity ceases to be active, the PAUSE Admins have the right to reassign the identity of the release manager to another PAUSE ID. Essentially meaning that if the company is folded, the PAUSE Admins can give co-maintainer access to another PAUSE ID to then make future releases. However, I think it will take time before someone can figure out the best way to approach this.

The link you're looking for though is .. http://pause.perl.org/pause/query?ACTION=pause_04about#takeover .. where even that references the maintainer, not the owner.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-19 12:41:04]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>markfowler@me.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.193.221.218</wp:comment_author_IP>
			<wp:comment_date>2009-08-19 15:39:45</wp:comment_date>
			<wp:comment_date_gmt>2009-08-19 15:39:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I guess the issue here is that of identity.  You're right that "The PAUSE ID is better described as the identity of the release manager".  It's not IP and doesn't transfer like other IP.

The bit that doesn't square with me is the statement "the PAUSE ID identity of FOTANGO belongs to the parent company".  Does it?  Is identity transferable like that?  We're not talking about a company that subsumed another company, but rather one that closed down another and transfered the IP....

Alias has been helping me with the thankless task of working out what to do next, and I've sent emails to people that should eventually either get to the right person in Fotango's parent company to authorize this (or ignore us, so we can officially declare the maintainer as "non-responsive".)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>3</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-19 15:39:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>9</wp:comment_id>
			<wp:comment_author><![CDATA[Bill Bartmann]]></wp:comment_author>
			<wp:comment_author_email>stefaniad1y@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://wso2.org/wiki/display/~natefern</wp:comment_author_url>
			<wp:comment_author_IP>88.169.2.156</wp:comment_author_IP>
			<wp:comment_date>2009-09-03 16:48:27</wp:comment_date>
			<wp:comment_date_gmt>2009-09-03 16:48:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent site, keep up the good work]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-09-03 16:48:27]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>test</title>
		<link>https://twoshortplanks.wordpress.com/?p=31</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=31</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>31</wp:post_id>
		<wp:post_date>2009-08-19 09:10:55</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Testing times</title>
		<link>https://twoshortplanks.wordpress.com/2009/08/20/33/</link>
		<pubDate>Thu, 20 Aug 2009 18:00:29 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=33</guid>
		<description></description>
		<content:encoded><![CDATA[One of my all time favourite things about the CPAN and Perl is that we ship test suites with our distributions that are run before installation.  This means that we can be darn sure that not only does the code run on the developer's machine, but it also runs on the end user's machine correctly too - otherwise, it won't be installed.

This obviously puts quite a burden on the developer to ensure that his or her code functions correctly if the test pass (this is what utilities like Test::Coverage help with.)  I'd like to make a second point however:  It puts a burden on the developer to ensure that if the tests pass if the code functions correctly.

For example, one thing that people do (myself included) is insist that their code is documented correctly by installing a test in their test suite that runs Test::Pod and Test::Pod::Coverage.  These test suites will fail if the documentation isn't in valid pod format, or you haven't documented a method, respectively.

But hang on a minute, what if it's not?  Sure, the tests should fail on the developer system, and fail hard: You've got more work to do.  Should your code now be uninstallable by end users?  Does your code no longer work on the end user's machine?  Arguably yes, but at the same time arguably no.  This kind of failure is a kind of "soft failure" that is often caused by differing test infrastructure on the developer and user machines, not by the previously passing pod somehow mutating after your bundled your machine.

I try and avoid these problems by disabling my pod checks unless someone has either explicitly asked for pod checking to be run by setting the POD_TESTS environment variable.

Here's my standard 001pod.t file:
<pre><code>#!perl
############## STANDARD Test::Pod TEST - DO NOT EDIT ####################
use strict;
use Test::More;
unless ($ENV{POD_TESTS} || $ENV{PERL_AUTHOR} || $ENV{THIS_IS_MARKF_YOU_BETCHA}) {
    Test::More::plan(
        skip_all =&gt; "Test::Pod tests not enabled (set POD_TESTS or PERL_AUTHOR env var)"
    );
}

eval "use Test::Pod 1.14";
plan skip_all =&gt; "Test::Pod 1.14 required for testing POD" if $@;
all_pod_files_ok();</code></pre>
I also provide support for the PERL_AUTHOR environment variable which patchers can turn on while their patching my code and documentation (but keep off while installing modules from CPAN.)  And because I'm really lazy I also put a test for the environment variable THIS_IS_MARKF_YOU_BETCHA in my code that is always enabled in my .bashrc on my development machine, meaning I don't have to remember to turn these tests on for my own modules.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>33</wp:post_id>
		<wp:post_date>2009-08-20 18:00:29</wp:post_date>
		<wp:post_date_gmt>2009-08-20 18:00:29</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>33</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>5</wp:comment_id>
			<wp:comment_author><![CDATA[Brian]]></wp:comment_author>
			<wp:comment_author_email>bricas@cpan.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>64.5.219.130</wp:comment_author_IP>
			<wp:comment_date>2009-08-20 19:18:49</wp:comment_date>
			<wp:comment_date_gmt>2009-08-20 19:18:49</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I prefer Module::Install::ExtraTests (http://search.cpan.org/dist/Module-Install-ExtraTests/) for this sort of thing.

It nicely handles 3 different testing modes: author, release and smoke. These scenarios are ignored by general end-user installations, thus they won't cause unexpected failures.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-20 19:18:49]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>6</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>markfowler@me.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2009-08-21 08:04:34</wp:comment_date>
			<wp:comment_date_gmt>2009-08-21 08:04:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Oh, I didn't know about that.  That's pretty smart.  Only works if you use Module::Install, but then again, I do...

How does this effect the kwalitee rating?  Does the kwalitee server pick up those tests?  Hang on I can work that out for myself, can't I?  *Que sound of Mark wielding git and ack* Ah, Module::CPANTS::Kwalitee::Uses scans for all files in the distribution that ends in .t no matter where they're located.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>5</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-21 08:04:34]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2594</wp:comment_id>
			<wp:comment_author><![CDATA[www.Dibts.com]]></wp:comment_author>
			<wp:comment_author_email>harrygeary@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dibts.com</wp:comment_author_url>
			<wp:comment_author_IP>183.171.168.166</wp:comment_author_IP>
			<wp:comment_date>2015-03-14 22:31:11</wp:comment_date>
			<wp:comment_date_gmt>2015-03-14 22:31:11</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[If you are going for best contents like me, just pay 
a visit this web page everyday since it provides quality contents, thanks]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426377608.7364289760589599609375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1426372271.6613368988037109375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1426372271]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Saying Thanks</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/10/saying-thanks/</link>
		<pubDate>Thu, 10 Sep 2009 11:00:57 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=38</guid>
		<description></description>
		<content:encoded><![CDATA[Did you know that recent releases of perl come with a way to send thanks back to the authors of Perl?  Neither did I until I saw Paul Fenwick speak at YAPC::Europe this year.

Here's what you've got to do.  First, make sure you're running Perl 5.8.9 or 5.10.0 or later.  Then from the command line run the "perlthanks" command with your email address:

<code><pre>bash$ perlthanks -r someone@example.com</pre></code>

This fires up a modified version of the "perlbug" command line tool - a utility for reporting bugs in the perl interpreter itself.  This version is designed:

<code><pre>This program provides an easy way to send a thank-you message
back to the authors and maintainers of perl.

If you wish to submit a bug report, please run it without the -T
flag (or run the program perlbug rather than perlthanks)

First of all, please provide a subject for the message.
Subject:</pre></code>

So we tap in "We think you're totally awesome in every possible way" and hit return.  It takes us onto the next stage:

<code><pre>It's now time to compose your thank-you message.

Some information about your local perl configuration will
automatically be included at the end of your message, because
we're curious about the different ways that people build and use
perl. If you'd rather not share this information, you're welcome
to delete it.

You will probably want to use a text editor to enter the body of
your report. If "vi" is the editor you want to use, then just
press Enter, otherwise type in the name of the editor you would
like to use.

If you have already composed the body of your report, you may
enter "file", and /Users/mark/local/bin/perlthanks will prompt
you to enter the name of the file containing your report.

Editor [vi]: </pre></code>

I can cope with vi quite happily, so I hit return and then it fires up my editor containing the following text:

<code><pre>This is a thank-you report for perl from someone@example.com,
generated with the help of perlbug 1.39 running under perl 5.10.1.


-----------------------------------------------------------------
[Please enter your thank-you message here]



[You're welcome to delete anything below this line]
-----------------------------------------------------------------
---
Flags:
    category=thanks
    severity=none
---
Site configuration information for perl 5.10.1:

Configured by mark at Sun Aug  9 09:11:41 BST 2009.

Summary of my perl5 (revision 5 version 10 subversion 1) configuration:
...</pre></code>

You can tell this was originally written to collect bug reports, can't you?   Okay, so we fill in the bits between the dashed lines with some message like "You rock my world, oh yeah, oh yeah".  Save the file and quit vi and we see:

<code><pre>You have finished composing your message. At this point, you have 
a few options. You can:

    * [Se]end the message to perl-thanks@perl.org, 
    * [D]isplay the message on the screen,
    * [R]e-edit the message
    * Display or change the message's [su]bject
    * Save the message to a [f]ile to mail at another time
    * [Q]uit without sending a message

Action (Send/Display/Edit/Subject/Save to File): </code></pre>

Typing "se" and hitting return sends the message off to perl-thanks@perl.org.  Whee!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>38</wp:post_id>
		<wp:post_date>2009-09-10 11:00:57</wp:post_date>
		<wp:post_date_gmt>2009-09-10 11:00:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>saying-thanks</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Upper Hand</title>
		<link>https://twoshortplanks.wordpress.com/2009/08/28/the-upper-hand/</link>
		<pubDate>Fri, 28 Aug 2009 09:00:37 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=40</guid>
		<description></description>
		<content:encoded><![CDATA[When coding I quite often find myself having to setup some state temporarily limited to just the block I'm in and the routines the block calls.

For way of a simple example, imagine we have a password reset utility on our website.  In our example resetting works by sending a user a url with a token in it to email address associated with their account, and then when the user clicks on that url they're sent to a a page where they can send us the token and a new password.

The core of the code to do the actual password resetting might look something like this:

<code><pre>sub reset_password_from_email_token {
  my $self = shift;
  my $token = shift;
  my $password = shift;

  # temporarily disable security checks as this user isn't the one
  # the session is logged in as
  $self-&gt;disable_security_checks;

  if (any { $_ eq $token } $self-&gt;recent_reset_tokens) {
    $self-&gt;set_password($password);
    $self-&gt;remove_reset_token($token);
  }

  # turn the checks back on again
  $self-&gt;enable_security_checks;
 }</pre></code>

This is fairly reasonable code, but prone to subtle bugs.

What if there's a problem with setting the password?  For example, <code>set_password</code> could have easily been written to raise an exception if the password isn't long enough:

<code><pre>sub set_password {
  my $self = shift;
  my $value = shift;

  if (length($value) {value} = $value;
  return $self;
}</pre></code>

And it's fairly reasonable for someone therefore to write something like this:

<code><pre>eval {
  $user-&gt;reset_password_from_email_token($token, $password);
};
if ($@) {
  if ($@ =~ /too short/) {
    return render_bad_password_page();
  } else { die $@ }
}
return render_password_reset_page();</pre></code>

Have you spotted the problem yet?  Yep, <code>enable_security_checks</code> never got called. <code>render_bad_password_page</code> is running with security off!

What we want is to ensure that security is always turned back on when we exit from <code>reset_password_from_email_token</code> no matter how we do that.

We want something like this psudocode:

<code><pre>sub reset_password_from_email_token {
  my $self = shift;
  my $token = shift;
  my $password = shift;

  # this user isn't the one the session is logged in as
  ...temporarily disable security checks somehow...

  if (any { $_ eq $token } $self-&gt;recent_reset_tokens) {
    $self-&gt;set_password($password);
    $self-&gt;remove_reset_token($token);
  }
}</pre></code>

Now how to write that?  One <em>very</em> hacky way of doing it would be to localise a state variable that Perl will automatically restore to the original value as it exits the current scope, i.e. as it exits the subroutine:

<code><pre>sub reset_password_from_email_token {
  my $self = shift;
  my $token = shift;
  my $password = shift;

  # this user isn't the one the session is logged in as
  local $self-&gt;{security} = 0;

  if (any { $_ eq $token } $self-&gt;recent_reset_tokens) {
    $self-&gt;set_password($password);
    $self-&gt;remove_reset_token($token);
  }
}</pre></code>

Of course, this has several obvious drawbacks.  Firstly, it requires the <code>reset_password_from_email</code> routine to understand how security works;  If we ever change the security implementation of the module we're going to have to alter this code too.  Heaven help us if we try this approach on a third party module!

Secondly, it assumes that the implementation of security is sufficiently trivial that it can be controlled by a simple variable.  This isn't often the case.  You may have to end up localising a whole collection of variables, or even running complex logic to work out what to do.  Very very messy.

Quite simply, just resetting variables back to their original state isn't powerful enough of a mechanism.  What we actually would like to do is define some <em>code</em> that will be run on the exit of the subroutine.

One way to do that is to use the <a href="http://search.cpan.org/dist/End/lib/End.pm">End</a> module from the CPAN:

<code><pre>use End qw(end);

sub reset_password_from_email_token {
  my $self = shift;
  my $token = shift;
  my $password = shift;

  # this user isn't the one the session is logged in as
  $self-&gt;disable_security_checks;
  my $temp = end { $self-&gt;enable_security_checks };

  if (any { $_ eq $token } $self-&gt;recent_reset_tokens) {
    $self-&gt;set_password($password);
    $self-&gt;remove_reset_token($token);
  }
}</pre></code>

As long as <code>$temp</code> stays in scope nothing happens, but as soon as the subroutine exits and <code>$temp</code> goes out of scope the code we passed in will be executed.

How does that work?  The End module is a way to create an instance that runs some code when it's garbage collected.  In the above example when <code>$temp</code> goes out of scope  its DESTROY method will be called which will in turn call the anonymous subroutine that we passed in which calls <code>enable_security_checks</code>.

Great! We've solved the problem.  We've almost invented a kind of backwards try / catch / finally syntax al-la Java and friends.

The problem with is it still requires me to write code every time I disable security, and therefore think, and therefore have a chance to introduce bugs.  What I really really would like to do is write this:

<code><pre>sub reset_password_from_email_token {
  my $self = shift;
  my $token = shift;
  my $password = shift;

  # this user isn't the one the session is logged in as
  $self-&gt;temporarily_disable_security_checks;

  if (any { $_ eq $token } $self-&gt;recent_reset_tokens) {
    $self-&gt;set_password($password);
    $self-&gt;remove_reset_token($token);
  }
}</pre></code>

And it to essentially do the same thing, call <code>disable_security_checks</code> immediately and <code>enable_security_checks</code> at the end of scope.  Is this possible? Yes, with the help of another CPAN module, <a href="http://search.cpan.org/dist/Scope-Upper/lib/Scope/Upper.pm">Scope::Upper</a>:

<code><pre>use Scope::Upper;

sub temporarily_disable_security_checks {
  my $self = shift;
  
  # disable security checks immediately
  $self-&gt;disable_security_checks;
  
  # and when the scope that called us exits, re-enable them
  reap sub {
    $self-&gt;enable_security_checks;
  }, UP;
}</pre></code>

Whoa! What happened there?  Like <code>end</code>, the <code>reap</code> function exported by Scope::Upper allows us to to define an anonymous subroutine that will be called when a scope exits - but rather than the <em>current</em> scope, we can say when <em>any</em> scope in our call-chain exits.  In this example we're saying "UP", which is a constant exported by Scope::Upper which means "in the scope that called us", i.e. run this code when <code>reset_password_from_email_token</code> exits.

As you can imagine this is a really powerful mechanism that can be used to encapsulate complex logic.  It's useful for all sorts of things from cleanup exercises like I've shown here, to being really helpful in defining new keywords...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>40</wp:post_id>
		<wp:post_date>2009-08-28 09:00:37</wp:post_date>
		<wp:post_date_gmt>2009-08-28 09:00:37</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-upper-hand</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>7</wp:comment_id>
			<wp:comment_author><![CDATA[Pedro Melo]]></wp:comment_author>
			<wp:comment_author_email>melo@simplicidade.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.simplicidade.org</wp:comment_author_url>
			<wp:comment_author_IP>81.193.241.162</wp:comment_author_IP>
			<wp:comment_date>2009-08-28 15:58:29</wp:comment_date>
			<wp:comment_date_gmt>2009-08-28 15:58:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I might be missing something obvious, but isn't this the reason for all the Guard classes on CPAN?

 * Guard: http://search.cpan.org/dist/Guard/
 * Scope::Guard: http://search.cpan.org/dist/Scope-Guard/

They won't do the extra magic of running when a upper scope exits (like the Scope::Upper) but for cleanup inside the current scope, I think they will work nicely.

You can even keep a reference to them in a closure to cleanup later.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-08-28 15:58:29]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Test::EnhancedIs</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/04/testenhancedis/</link>
		<pubDate>Fri, 04 Sep 2009 19:51:11 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=55</guid>
		<description></description>
		<content:encoded><![CDATA[The other day I made an idiot out of myself on IRC.

Now this isn't exactly news, but the way I did so is interesting.  It seemed to me that Test::More's <code>is</code> was unexpectedly failing when it was passed identical inputs.  Having pondered over the issue for a good while, I turned to greater minds than myself for enlightenment; Thus I pastied this output to the London Perl Monger's IRC channel:

<code><pre>bash$ perl -Ilib t/01multi.t 
1..3
ok 1 - data okay
not ok 2 - ip
#   Failed test 'ip'
#   at t/01multi.t line 61.
#          got: '123.45.67.98'
#     expected: '123.45.67.89'
ok 3 - port
# Looks like you failed 1 test of 3.</pre></code>

Can you spot the obvious mistake?  I didn't.  Of course, being a bunch of pedantic so-and-sos the London Perl Mongers are they immediately pointed out that "89" is not the same as "98", and that's why the tests were failing....Ooops.

But wait? Why should <em>I</em> have to spot that.  That's not very <em>lazy</em>.  Shouldn't this comparing strings kind of thing be exactly what the computer is good at, and darn it, why can't it just point out where the string starts being different, preferably with a big flashing arrow, a klaxon, and a troupe of dancing girls...

We can't quite manage that, but with my new module, we can get a lot closer:

<code><pre>travis-4:Babel-WideLog mark$ perl -MTest::EnhancedIs -Ilib t/01multi.t 
1..3
ok 1 - data okay
not ok 2 - ip
#   Failed test 'ip'
#   at t/01multi.t line 61.
#          got: '123.45.67.<span style="color:white;background:red;">*</span>98'
#     expected: '123.45.67.<span style="color:white;background:red;">*</span>89'
ok 3 - port
# Looks like you failed 1 test of 3.</pre></code>

Yep, a white dot on a red background.  The universal <em>Look at Me!</em>.  Actually, I did start by just making dot red, but then that wasn't as clear when you're running under <code>prove</code> which already colourises your output.

Sadly, the implementation of Test::EnhancedIs leaves a lot to be desired, and is really a proof of concept rather than what I'd consider actual safe, shippable code.  Let's have a look at the actual code and try not to wince too much:

<code><pre>package Test::EnhancedIs;
use base qw(Devel::UseFromCommandLineOnly);

use strict;
use warnings;
no warnings "redefine"; ## no critic (ProhibitNoWarnings)

our $VERSION = 0.00_01;

use Term::ANSIColor qw(colored);
use List::Util qw(min);

use Test::Builder;

# remember the original subroutine.  Note the BEGIN { } here - this is because
# without it this code will be run after the sub Test::Builder::_is_diag
# has been declared and we'll grab a ref to the wrong subroutine
my $uboat;
BEGIN { $uboat = \&amp;Test::Builder::_is_diag }; ## no critic (ProtectPrivateVars)

# now write a new subroutine, overriding the subroutine in another package
# don't try this at home kids.
sub Test::Builder::_is_diag { ## no critic (ProtectPrivateSubs)
  my( $self, $got, $type, $expect ) = @_;

  # look for either a different character, or the end of either string
  my $index;
  foreach (0..min(length $got,length $expect)) {
    $index = $_;
    last if substr($got,$index,1) ne substr($expect,$index,1);
  }

  # put a marker in there
  substr($got,$index,0,colored("*","white on_red"));
  substr($expect,$index,0,colored("*","white on_red"));

  # run the original code
  return $uboat-&gt;($self,$got,$type,$expect);
}

1;</pre></code>

As you can tell from the comments, we're really breaking the rules here.  Anything that disables warnings like that and requires multiple Perl Critic tests to be disabled is more than a little bit worrying!

The worst of it is that we're redefining a private function that's inside the Test::Builder namespace.  By convention any method or function that starts with an underscore in Perl is considered to be private and can change between versions of the code without notice, meaning that this code will probably not work on different versions of Test::Builder than the one I have installed (which is the latest) - including future versions that are yet to be released.

Still, as long as we're aware of the pitfalls this isn't too bad a snippet to have <a href="http://github.com/2shortplanks/test-enhancedis">around</a> to fire up from the command line for one off tests when our eyes start to glaze over, at least until it next breaks again.  We'll just have to be careful not to include it in any commands or scripts we save to disk, lest we start to rely on it.

Of course the real solution is to take this proof of concept to the Perl-QA guys and gals and ask them how we can get best this functionality integrated properly into the next release of Test::Builder.  That's a task for another day however.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>55</wp:post_id>
		<wp:post_date>2009-09-04 19:51:11</wp:post_date>
		<wp:post_date_gmt>2009-09-04 19:51:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testenhancedis</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>13</wp:comment_id>
			<wp:comment_author><![CDATA[Devel::UseFromCommandLineOnly &laquo; As Thick As Two Short Planks &#8211; Mark Fowler&#39;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://blog.twoshortplanks.com/2009/09/07/develusefromcommandlineonly/</wp:comment_author_url>
			<wp:comment_author_IP>72.233.104.50</wp:comment_author_IP>
			<wp:comment_date>2009-09-07 11:17:50</wp:comment_date>
			<wp:comment_date_gmt>2009-09-07 11:17:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] On Friday I posted a horrible chunk of code to my blog. With all the scorn I threw about it there&#8217;s one bit I [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-09-07 11:17:50]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Devel::UseFromCommandLineOnly</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/07/develusefromcommandlineonly/</link>
		<pubDate>Mon, 07 Sep 2009 11:00:31 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=59</guid>
		<description></description>
		<content:encoded><![CDATA[On Friday I <a href="http://blog.twoshortplanks.com/2009/09/04/testenhancedis/">posted</a> a horrible chunk of code to my blog.  With all the scorn I threw about it there's one bit I didn't cover however, a sort of saving grace.  The second line here:

<code><pre>package Test::EnhancedIs;
use base qw(Devel::UseFromCommandLineOnly);</pre></code>

Devel::UseFromCommandLineOnly?  What the heck is that, and why am I subclassing it?  Well, that, boys and girls, is another quick module I knocked up while butchering the internals of Test::Builder.

You see, I wrote Test::EnhancedIs as a proof of concept that I knew would very likely break just as soon as someone changed Test::Builder in the slightest.  I'm offering it as unsupported experimental code, but even I know no sooner had I typed those warning words that someone else was busy typing

<code><pre>#!/usr/bin/perl

use strict;
use warnings;

use Test::More tests =&gt; 1;
use Test::EnhancedIs;  # whooo, easier tests

use Sharks;
is(Sharks-&gt;armed,"frickin' laser beams");</pre></code>

And committing it to their version control system.  I know what'll happen next is that that person or their coworkers, months down the line when this inevitably breaks, will hunt me or the hardworking geniuses that maintain Test::Builder down to blame us for <i>breaking their code</i>.

So I decided to not let that happen.  If you run the above code it outputs:

<code><pre>bash$ perl test.t
1..1
Invalid use of Test::EnhancedIs in 'test.t' at line 7; This module can only be loaded from the command line at test.t line 7</pre></code>

Yep, that's Devel::UseFromTheCommandLineOnly kicking in and hitting you with the cluestick.  However, if you remove line 7 from the above example and run the test loading the extra module from the command line like so:

<code><pre>travis-4:~ mark$ perl -MTest::EnhancedIs test.t 
1..1
not ok 1
#   Failed test at test.t line 9.
#          got: 'frickin' <span style="color:white;background:red;">*</span>sharp teeth'
#     expected: 'frickin' <span style="color:white;background:red;">*</span>laser beams'
# Looks like you failed 1 test of 1.</pre></code>

Everything is dandy.

Devel::UserFromCommandLineOnly is on <a href="http://search.cpan.org/dist/Devel-UseFromCommandLineOnly/">CPAN</a> and <a href="http://github.com/2shortplanks/devel-usefromcommandlineonly">GitHub</a> if you want to play with it.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>59</wp:post_id>
		<wp:post_date>2009-09-07 11:00:31</wp:post_date>
		<wp:post_date_gmt>2009-09-07 11:00:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>develusefromcommandlineonly</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Three Blinding Perl Tips, See How They Execute</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/17/three-perl-tips/</link>
		<pubDate>Thu, 17 Sep 2009 21:50:25 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=71</guid>
		<description></description>
		<content:encoded><![CDATA[I've got a lot of half written posts that I still need to complete, but I don't want to let this blog stagnate.  Quick! Time for an <a href="http://www.paulgraham.com/nthings.html">n things list</a> - Three random Perl things that I've been using a lot recently:

<h2>Default Prompts</h2>

If you install Term::ReadLine::Perl you can provide defaults for interactive prompts in your program

<code><pre>my $term = Term::ReadLine-&gt;new('report');
my $filename = $term-&gt;readline(
   "file to write output to? ",
   "$ENV{HOME}/report-".DateTime-&gt;now-&gt;ymd.".csv"
);</pre></code>

When this executes this code creates a line in your terminal that has a default value already filled in for you to edit:

<code><pre>file to write output to? /Users/mark/report-2009-09-16.csv</pre></code>

<h2>Controlling Where lwp-request Sends Its Requests</h2>

The command line utility lwp-request, which is a handy Perl utility that ships with LWP that allows you to download webpages from the command line, can take proxy settings from the environment variables you pass to it.

<code><pre>bash$ http_proxy=http://127.0.0.1 lwp-request http://www.mywebsite.com</pre></code>

This is really useful for development:  You can set your test apache running on your local machine / virtual machine / dev box up to answer on the same virtual host name as your live domain and, via the proxy settings, have lwp-request send requests there rather than to the real live machine whose DNS the domain name points to.  This is also really useful for debugging reverse proxies in live - you can choose exactly which machine in your proxy chain to send to, bypassing the nginx / lighttpd / varnish front proxy machine and talking directly to the backend machine if you wish.

<h2>The "Just Show Me The Data" Incarnation for DBI</h2>

Most of the time I don't use DBI directly - I use an object relational mapper like DBIx-Class.  But sometimes I'll get handed a chunk of SQL from our DBA and I just want to write a wrapper script to run that SQL and do something simple with it.  DBI is very flexible, and the documentation talks at length about things like caching parsed queries, reading data in from the database row by row, efficency of data structures, etc, etc.  What it's not very clear about, however, is how to ignore all of that and just get all your data from executing some SQL in the easiest possible format to manipulate.

The magic incarnation looks like this:

<code><pre>    my $dbh = DBI-&gt;connect(
      "DBI:mysql:hostname=127.0.0.1;database=foo",
      $username, 
      $password,
      { RaiseError =&gt; 1 },
    );

    my $rows = $dbh-&gt;selectall_arrayref( &lt;&lt;'SQL',{ Slice =&gt; {} }, "flintstone");
      SELECT *
        FROM characters
       WHERE last_name = ?
    SQL</code></pre>

This gives you a reference to an array, with each element in this array representing one row returned from the database as a hashref keyed by field name.  This is really easy to process:

<code><pre>    foreach my $row (@{ $rows }) {
      say " * $row-&gt;{first_name} $row-&gt;{last_name}";
    }</pre></code>

If there's any problem at all DBI will raise an exception, so you don't need to worry about writing lots of error checking code.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>71</wp:post_id>
		<wp:post_date>2009-09-17 21:50:25</wp:post_date>
		<wp:post_date_gmt>2009-09-17 21:50:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>three-perl-tips</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Think McFly, Think!</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/24/test-time-hires/</link>
		<pubDate>Thu, 24 Sep 2009 18:00:58 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=76</guid>
		<description></description>
		<content:encoded><![CDATA[This week I made a time machine with Perl.

So, writing tests for testing anything that happens with the passage of time is very very hard to do as you don't know how long any operation might actually take on the computer you're testing on.  Code may take different time to run on different machines.  Sleep instructions may take longer on busy machines than on non-busy machines.  The user might suspend the computer in the middle of your test suite!

Multiple this across the large number and diverse set of computers that might run your test suite after you upload your module to the CPAN and you're in a situation where you're going to get some false negatives, where the test suite will fail even though nothing's really wrong.  Telling your end users to "try it again, it'l probably work this time" isn't exactly a recipe for instilling confidence in your code.

That's why I developer my trusty time machine.  Test::Time::HiRes is what I call it, and it allows me fine grained control over passage of a certain type of time - the time that Test::HiRes reports back to modules using it.

The easiest way to think of it is an alternative implementation of Time::HiRes where time only progresses time when you (or the code you're testing) tells it to.  This means that all sleeps your code does take an instant of wallclock seconds, but the simulated clock moves automatically.  As such this code runs in milliseconds, rather than hours:

<code><pre>use Test::Time::HiRes;  
use Time::HiRes qw(sleep);
sleep(3600 * 10);</pre></code>

We can also jump around in time however we want.

<code><pre>use Test::More tests =&gt; 2;
use Test::Time::HiRes;

# Time::Hash::Expire uses Time::HiRes to get it's timing
use Tie::Hash::Expire;
tie my %hash, "Tie::Hash::Expire", { expire_seconds =&gt; 10 };
$hash{"foo"} = 1;

ok($hash{"foo"}, "key not expired");
time_travel_by(3600);
ok(!$hash{"foo"}, "key expired");</pre></code>

(or back in time, or to particular points in time.)  We have complete control!

Of course, I'm not the first person to come up with this idea.  The very fine Test::MockTime does the same thing for Perl's inbuilt <code>time()</code>,<code>localtime()</code>, and <code>gmtime()</code> functions.  I'm just extending the concept for more accurate time.

It's not quite a DeLorean, but it'll do me.

The module is on <a href="http://search.cpan.org/dist/Test-Time-HiRes">the CPAN</a> and on <a href="http://github.com/2shortplanks/test-time-hires">github</a>.  [Update: as of 2009-09-24 20:15:39 UTC, the module still hasn't reached search.cpan.org yet - I'll leave the link in place for when it does, but if you're impatient, head off to github]]]></content:encoded>
		<excerpt:encoded><![CDATA[This week I made a time machine with Perl...

]]></excerpt:encoded>
		<wp:post_id>76</wp:post_id>
		<wp:post_date>2009-09-24 18:00:58</wp:post_date>
		<wp:post_date_gmt>2009-09-24 18:00:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>test-time-hires</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_02b4e15cf7e08fef73a8a92e7b89d4d2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6cde95d90008816be5ffd1493936e95b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_41f2adcf57091152c78fd167850e1a00</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_77b2e53488c224e7666433cf7a71130e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bc4170ab5b6024aec2263df99a79f5f2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0b24038d0fce86f9e5c07f5e24ef06a7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_07245cc27019800e9d23eca986f444fd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f7513de4b6b8aacc7503f1c560f91703</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>25</wp:comment_id>
			<wp:comment_author><![CDATA[Potyl]]></wp:comment_author>
			<wp:comment_author_email>emmanuel.rodriguez@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://github.com/potyl</wp:comment_author_url>
			<wp:comment_author_IP>62.190.51.12</wp:comment_author_IP>
			<wp:comment_date>2009-09-25 06:46:33</wp:comment_date>
			<wp:comment_date_gmt>2009-09-25 06:46:33</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I used a similar approach while writing unittests for Log4perl. In my case I only wanted to make sure that I override the time functions for specific modules. If some other part of code would be using the same time functions then they would be getting the right values.

http://github.com/potyl/log4perl/blob/master/t/003Layout-R-hires.t
http://github.com/potyl/log4perl/blob/master/t/003Layout-R-time.t]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-09-25 06:46:33]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>meta META update</title>
		<link>https://twoshortplanks.wordpress.com/2009/09/28/meta/</link>
		<pubDate>Mon, 28 Sep 2009 09:34:52 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=86</guid>
		<description></description>
		<content:encoded><![CDATA[I'm on holiday in the states at the moment, so I haven't had much chance to do much Perl stuff.  That said, I did take a chance to add proposals for the new META.yml spec.

For those of you that don't know, META.yml is a small file that ships in modern CPAN distributions that contains, well, meta information.  It's a way to know things about the distribution like author, pre-requisits, etc, etc, without actually having to examine or even execute other files in the distribution.  A lot of the more fancy automated tools that do really clever things with CPAN distibutions rely on it.

I added two suggestions.  The first suggestion was a way to provide more detailed information on the repository (a.k.a. the version control system) the original source for the module was stored in.  Currently we support a simple URL, but it's not clear if this is the URL for the web front end or the version control resource itself, nor how to go from one to the other.  I'd also like a format ("git", "svn", "cvs") and type ("github", "sourceforge") so automated tools don't have to derive things they can do from the URL alone.  I'm imaginging a tool where I can type in a module name and it'll do the right thing to get me to a stage where I can immediatley start working on a patch (e.g. forking the project and checking out the fork if it's on github, svn co-ing the project if its a subversion mirror, etc)

The second proposal was the more straight forward.  I suggested that we provide an official way for inhouse extensions to META.yml for private use that won't get stomped on by future versions of the spec and won't get complained about by tools the use META.yml: Simply reserving the 'x-' prefix to keys much like in HTTP headers.

You can view my full proposals (or submit your own proposals before the 1st of October) on the <a href="http://perl-qa.hexten.net/wiki/index.php/CPAN_Meta_Spec_Proposals">CPAN Meta Spec Proposals page</a> on the Perl QA wiki.]]></content:encoded>
		<excerpt:encoded><![CDATA[I'm on holiday in the states at the moment, so I haven't had much chance to do much Perl stuff.  That said, I did take a chance to add proposals for the new META.yml spec...]]></excerpt:encoded>
		<wp:post_id>86</wp:post_id>
		<wp:post_date>2009-09-28 09:34:52</wp:post_date>
		<wp:post_date_gmt>2009-09-28 09:34:52</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>meta</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>28</wp:comment_id>
			<wp:comment_author><![CDATA[Tatsuhiko Miyagawa]]></wp:comment_author>
			<wp:comment_author_email>miyagawa@bulknews.net</wp:comment_author_email>
			<wp:comment_author_url>http://bulknews.typepad.com/</wp:comment_author_url>
			<wp:comment_author_IP>204.14.154.180</wp:comment_author_IP>
			<wp:comment_date>2009-09-28 10:59:07</wp:comment_date>
			<wp:comment_date_gmt>2009-09-28 10:59:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+1. I did this with my Module::Install::Repository and CPAN::Command::Repo, both of which are on my github http://github.com/miyagawa

I received some patches to Module::Install::Repositoy from people who prefer github's http URL rather than git URL, but i thought git URL is handier to do automated testing and cloning so i declined it. It'd be nice if we can have both defined in the META.yml.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-09-28 10:59:07]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>say What?</title>
		<link>https://twoshortplanks.wordpress.com/2009/10/05/say-what/</link>
		<pubDate>Mon, 05 Oct 2009 18:24:02 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=90</guid>
		<description></description>
		<content:encoded><![CDATA[Now that I've got Snow Leopard (finally) installed on my Mac, the default perl binary is now 5.10.0.  This means many things: The given keyword and smart matching, the defined-or operator, the wonderful additions to the regex engine, and other things I'm bound to blog about later when I get round to enthusing about them.

What I wanted to talk about today is the simpliest change that'll be making the most difference to me on a day to day basis:  The "say" keyword.  More or less <code>say</code> is exactly the same as <code>print</code> but two characters shorter and automatically adds a newline at the end.  This is most useful when you're writing one liners.  This quick calculation:

<code><pre>bash$ perl -e 'print 235*1.15, "\n"'</pre></code>

Becomes just:

<code><pre>bash$ perl -E 'say 235*1.15'</pre></code>

(Note the use of <code>-E</code> instead of <code>-e</code> to automatically turn on the 5.10 keywords like <code>say</code> without having to add <code>use 5.10</code> or <code>use feature 'say'</code>.)

This saves us a grand total of nine keypresses (including having to hit shift one less time.)  More importantly it saves us having to use double quotes at all.  This is really useful when you're already using the quotes for something else.  For example, running a Perl one-liner remotely with ssh:

<code><pre>bash$ ssh me@remote "perl -MSomeModule -e 'print SomeModule-&gt;VERSION, qq{\n}"'</pre></code>
 
With 5.10 on the remote machine this becomes just:

<code><pre>bash$ ssh me@remote "perl -MSomeModule -E 'say SomeModule-&gt;VERSION'"</pre></code>
 
This has not only the advantage of saving me a bunch of keystrokes, but also doens't make me think as much.  And the less I have to think, the less chance I'm going to do something stupid and make a mistake.]]></content:encoded>
		<excerpt:encoded><![CDATA[Now that I've got Snow Leopard (finally) installed on my Mac, the default perl binary is now 5.10.0.  This means many things: The given keyword and smart matching, the defined-or operator, the wonderful additions to the regex engine, and other things I'm bound to blog about later when I get round to enthusing about them.  What I wanted to talk about today is the simpliest change that'll be making the most difference to me on a day to day basis:  The "say" keyword. ]]></excerpt:encoded>
		<wp:post_id>90</wp:post_id>
		<wp:post_date>2009-10-05 18:24:02</wp:post_date>
		<wp:post_date_gmt>2009-10-05 18:24:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>say-what</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>47</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.24.117.46</wp:comment_author_IP>
			<wp:comment_date>2009-10-07 13:36:53</wp:comment_date>
			<wp:comment_date_gmt>2009-10-07 13:36:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I've always disliked -l because it means that *everything* I print has a newline by default.  Realistically, most times I tend to do several prints with a post if, and then a final say to avoid having to use a tertiary operator too much.

Of course, in the convoluted blog entry that wasn't clear...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-07 13:36:53]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>41</wp:comment_id>
			<wp:comment_author><![CDATA[Hinrik Örn Sigurðsson]]></wp:comment_author>
			<wp:comment_author_email>hinrik.sig@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.nix.is</wp:comment_author_url>
			<wp:comment_author_IP>194.144.99.91</wp:comment_author_IP>
			<wp:comment_date>2009-10-05 22:40:39</wp:comment_date>
			<wp:comment_date_gmt>2009-10-05 22:40:39</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Too bad you didn't know about the -l option, which turns causes "print" to append a newline. :)

I.e. "perl -MSomeModule -le 'print SomeModule-&gt;VERSION'"

The "say" version is still an improvement though, key stroke-wise.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-05 22:40:39]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>42</wp:comment_id>
			<wp:comment_author><![CDATA[Rhomboid]]></wp:comment_author>
			<wp:comment_author_email>brian@dessent.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.181.233.150</wp:comment_author_IP>
			<wp:comment_date>2009-10-05 22:42:23</wp:comment_date>
			<wp:comment_date_gmt>2009-10-05 22:42:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seriously?  You could have just used 

perl -le 'print 235*1.15'

...with perl 5.8.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-05 22:42:23]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>43</wp:comment_id>
			<wp:comment_author><![CDATA[Moritz Onken]]></wp:comment_author>
			<wp:comment_author_email>onken@netcubed.de</wp:comment_author_email>
			<wp:comment_author_url>http://blog.netcubed.de</wp:comment_author_url>
			<wp:comment_author_IP>84.148.212.26</wp:comment_author_IP>
			<wp:comment_date>2009-10-06 08:27:34</wp:comment_date>
			<wp:comment_date_gmt>2009-10-06 08:27:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Too bad that apple shipped perl 5.10.0 with the unknown error bug...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-06 08:27:34]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>44</wp:comment_id>
			<wp:comment_author><![CDATA[Sol]]></wp:comment_author>
			<wp:comment_author_email>colomon@ralf.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>68.40.151.163</wp:comment_author_IP>
			<wp:comment_date>2009-10-06 11:24:51</wp:comment_date>
			<wp:comment_date_gmt>2009-10-06 11:24:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I really scoffed at "say" when I first heard about it, but after nine months of Perl 6 programming I can say I was completely wrong about that.  <code>say $value;</code> really is a lot nicer than <code>print "$value\n";</code>.  And it's even more drastic if you are calculating something you'd like to print without saving: <code>say @values.sort.perl;</code> is much cleaner than <code>print "{@values.sort.perl}\n";</code>.  (Is there even a way to do that in one statement in Perl 5?)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-06 11:24:51]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>45</wp:comment_id>
			<wp:comment_author><![CDATA[wallace]]></wp:comment_author>
			<wp:comment_author_email>wallace@marcello.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>81.198.240.195</wp:comment_author_IP>
			<wp:comment_date>2009-10-06 11:41:58</wp:comment_date>
			<wp:comment_date_gmt>2009-10-06 11:41:58</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[say what one more time. i dare you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-06 11:41:58]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>46</wp:comment_id>
			<wp:comment_author><![CDATA[Dave Cross]]></wp:comment_author>
			<wp:comment_author_email>dave@dave.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://dave.org.uk/</wp:comment_author_url>
			<wp:comment_author_IP>80.177.210.58</wp:comment_author_IP>
			<wp:comment_date>2009-10-06 19:43:15</wp:comment_date>
			<wp:comment_date_gmt>2009-10-06 19:43:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[perl -e 'print 235*1.15, "\n"'

Did you really use that? Did no-one ever introduce you to the -l command line option?

perl -le 'print 235*1.15'

Still not as short as the 5.10 version, but you've been wasting a lot of keystrokes under 5.8.8 :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-06 19:43:15]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>48</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>12.24.117.46</wp:comment_author_IP>
			<wp:comment_date>2009-10-07 13:37:34</wp:comment_date>
			<wp:comment_date_gmt>2009-10-07 13:37:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[@wallace:  What?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-07 13:37:34]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>40</wp:comment_id>
			<wp:comment_author><![CDATA[Jakub Narębski]]></wp:comment_author>
			<wp:comment_author_email>jnareb@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.8.213.12</wp:comment_author_IP>
			<wp:comment_date>2009-10-05 22:25:25</wp:comment_date>
			<wp:comment_date_gmt>2009-10-05 22:25:25</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Simply use '-l' switch:
<code>
bash$ perl -le 'print 235*1.15'
</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-05 22:25:25]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>39</wp:comment_id>
			<wp:comment_author><![CDATA[Chas. Owens]]></wp:comment_author>
			<wp:comment_author_email>chas.owens@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://svok.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>66.170.97.139</wp:comment_author_IP>
			<wp:comment_date>2009-10-05 21:23:46</wp:comment_date>
			<wp:comment_date_gmt>2009-10-05 21:23:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Why in the world weren't you saying

<code>ssh me@remote "perl -MSomeModule -le 'print SomeModule-&gt;VERSION'"</code>

Or even better yet

<code>ssh me@remote perl -MSomeModule=99999999</code>

That will get you an error message like

<code>Carp version 99999999 required--this is only version 1.04 at /usr/share/perl/5.8/Exporter/Heavy.pm line 107.
BEGIN failed--compilation aborted.</code>

Which has the version number in it (in this case Carp is version 1.04)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-05 21:23:46]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>CPAN Unplugged</title>
		<link>https://twoshortplanks.wordpress.com/2009/10/12/cpan-unplugged/</link>
		<pubDate>Mon, 12 Oct 2009 09:46:56 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=101</guid>
		<description></description>
		<content:encoded><![CDATA[CPAN is often described as Perl's Killer App;  Modern Perl relies on it, with the perl distribution being almost considered in parts to be nothing more than a bootstrap for the rest of the language that's out there in the cloud.  Which makes it all the more annoying when you're stuck somewhere without an internet connection missing the vital bit of the language you need.  I just had first hand experience of being offline for a two week holiday, but I didn't have this problem when hacking on personal projects: I took CPAN with me.

So, want CPAN at your fingertips even when you're offline?  Yep, you've guessed it: There's a CPAN module for that!

It's called CPAN::Mini, and it lets you create a mini-mirror of CPAN.  A mini-mirror?  What's that?  It's a mirror of just the latest non-development versions of the modules from the CPAN - or in other words, it's a mirror of anything you can install by just typing "install" and just the module name into the cpan shell.  As I type this now this mirror weighs in at about 1.1GB, which is a fair bit smaller than the full archive.

So how do we create a mini-mirror?  Well, first (when you're actually online) you need to install the module.

<code><pre>bash$ sudo cpan Mini::CPAN</pre></code>

Once you've done that the <code>minicpan</code> command will be installed on your computer.

While you can pass arguments on the command line to tell it how to run, it's easier to create a <code>.minicpanrc</code> file in your home directory so you don't have to remember what commands to type each time you want to sync your mirror.  This is what mine looks like:

  local: /cpan/
  remote: http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/

So I've got minicpan set up to download from mirrorserver.org (my nearest CPAN mirror on the internet when I'm in the UK) and create files in <code>/cpan</code> on my hard drive.

So all that's left is to run the cpan mirror command and watch it download.

<code><pre>bash$ minicpan</pre></code>

This prints out each file as it downloads.  The first time you run this might take a while (depending on the speed of your internet connection) so you might want to trigger it while you're laptop is going to be in the same place for a while with a fast internet connection (i.e. just before you go to bed or just after you get into the office for the day.)

The second time you run this command it'll update the existing mirror.  This means that it won't have to download the whole 1.1GB again, just the index files and the new modules that have been released.

<code><pre>bash$ minicpan
authors/01mailrc.txt.gz ... updated
authors/id/A/AD/ADAMK/Test-POE-Stopping-1.05.tar.gz ... updated
authors/id/A/AD/ADAMK/CHECKSUMS ... updated
authors/id/A/AN/ANDK/CPAN-Testers-ParseReport-0.1.4.tar.bz2 ... updated
authors/id/A/AN/ANDK/CHECKSUMS ... updated
authors/id/A/AT/ATHOMASON/Ganglia-Gmetric-PP-1.01.tar.gz ... updated
authors/id/A/AT/ATHOMASON/CHECKSUMS ... updated
authors/id/A/AT/ATHOMASON/Gearman-WorkerSpawner-1.03.tar.gz ... updated
...
cleaning /cpan/authors/id/A/AA/AAYARS/Fractal-Noisemaker-0.011.tar.gz ...done
cleaning /cpan/authors/id/A/AD/ADAMK/Test-POE-Stopping-1.04.tar.gz ...done
cleaning /cpan/authors/id/A/AL/ALEXLOMAS/CHECKSUMS ...done
cleaning /cpan/authors/id/A/AL/ALEXLOMAS/WWW-Nike-NikePlus-0.02.tar.gz ...done
...</code></pre>

The module will also delete any old versions of modules that are no longer in the index;  In the above example you can see Adam released a new version of Test::POE::Stopping, so CPAN::Mini downloaded the new distribution and deleted the old distribution (as no modules contained in the index still relied on that distribution).  This keeps the size of the local mirror as small as possible on disk.

There's several ways you can configure the CPAN module to use this new local mirror, including typing commands in the CPAN shell.  However, my preferred way is to directly edit the CPAN::Config module on the system directly.

First work out where the module containing your config is installed:

<pre><code>bash$ perl -E 'use CPAN::Config; say $INC{"CPAN/Config.pm"}'
/System/Library/Perl/5.10.0/CPAN/Config.pm</code></pre>

Then edit it changing the urllist parameter to contain your CPAN mirror in addition to your normal remote mirror:

<pre><code>'urllist' =&gt; [
  q[file:///cpan/],
  q[http://www.mirrorservice.org/sites/ftp.funet.fi/pub/languages/perl/CPAN/]
],</pre></code>

This means your CPAN shell will try and install files from disk first, and if for any reason that fails (for example, you tell it to install a development release) it'll go to the second mirror.

Which way round you order the mirrors depends really on how often you update your cpan mirror and personal preference.  If you, as I do, put your local mirror first this has the disadvantage that CPAN will seem "frozen" at the last time you ran minicpan, with any new changes being hidden from you until you next update.  It however means that installs are very quick compared to normal internet installs (be you offline or not) and it avoids having to wait for the internet connection timeout every time CPAN tries to fetch a file and fallback to the local mirror when you're offline.

With all this done, I can now install modules in the usual way with the CPAN shell no matter if I have an internet connection or not.  Of course, I haven't yet explained how I work out what modules I should be using when I'm offline and haven't got access to search.cpan.org.  I'll get to that in a future blog post...]]></content:encoded>
		<excerpt:encoded><![CDATA[CPAN is often described as Perl's Killer App;  Modern Perl relies on it, with the perl distribution being almost considered in parts to be nothing more than a bootstrap for the rest of the language that's out there in the cloud.  Which makes it all the more annoying when you're stuck somewhere without an internet connection missing the vital bit of the language you need.  I just had first hand experience of being offline for a two week holiday, but I didn't have this problem when hacking on personal projects: I took CPAN with me.]]></excerpt:encoded>
		<wp:post_id>101</wp:post_id>
		<wp:post_date>2009-10-12 09:46:56</wp:post_date>
		<wp:post_date_gmt>2009-10-12 09:46:56</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>cpan-unplugged</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fb9fbfe06042d7f855f321b057b0f9f0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6fc00021f12281260b75d02ba31b020b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e8b7a4107cddc3121916127c2dee67b7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_636baeb1e963add5d2c7fdb345a9b357</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>57</wp:comment_id>
			<wp:comment_author><![CDATA[Matt S Trout]]></wp:comment_author>
			<wp:comment_author_email>m.trout@shadowcat.co.uk</wp:comment_author_email>
			<wp:comment_author_url>http://www.shadowcat.co.uk/blog/matt-s-trout/</wp:comment_author_url>
			<wp:comment_author_IP>85.92.186.216</wp:comment_author_IP>
			<wp:comment_date>2009-10-14 07:12:23</wp:comment_date>
			<wp:comment_date_gmt>2009-10-14 07:12:23</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[http://www.trout.me.uk/perl/mirror.sh.txt

is my take on the process. Slightly crazier but does the sync in two rsync calls rather than oh-my-gods-how-many HTTP calls.

-- mst, out.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-14 07:12:23]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>58</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2009-10-14 12:43:40</wp:comment_date>
			<wp:comment_date_gmt>2009-10-14 12:43:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Of course, modern minicpan (updated some time after you wrote this script) now uses Keep-Alive, so it's really just one TCP stream]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>57</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-10-14 12:43:40]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Let&#039;s have our cake and eat it too</title>
		<link>https://twoshortplanks.wordpress.com/2009/10/19/lets-have-our-cake-and-eat-it-too/</link>
		<pubDate>Mon, 19 Oct 2009 22:12:48 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=111</guid>
		<description></description>
		<content:encoded><![CDATA[One of the most difficult tradeoffs in language design is brevity verses explicitness.  Having long names for methods, functions, variables and verbose patterns makes your code much clearer and less ambiguous.  To my mind there's nothing ambiguous about:

<code><pre>System.out.println("Hello World");</pre></code>

It's obviously printing a line to standard out and, at least as long as you associate "System" with "standard" in your head, there's no surprises lurking here.  This kind of explicitness is great.  It means anyone can read the code and bit by bit pick it apart to work out exactly what's happening (Oh...so there's a 'System' class....and look an 'out' property....and a 'println' method...)

Of course, the problem with this level explicitness is that the verbosity it requires takes too long to write all the time unless you've got a super-charged macro based IDE.  And even then it faces a worse drawback: As the patterns get larger and the verbosity multiplies it gets harder to comprehend the overall picture.  Your eyes tends to glaze over after a day's protracted coding and the details start to become obscured.  For example in microcosm, the "System.out" is the least interesting bit of the above code, but it's the part of the statement my eyes are drawn to first.  Worse still, programmers tend to write the same number of lines of code no matter how verbose the programming language they tend to use is.  Those languages with more brevity therefore tend on the whole to get more done in those lines!

Compare and contrast the above Java statement to the following Perl statement:

<code><pre>say "Hello World"</pre></code>

Much shorter, and much easier to read;  The eyes are drawn to the "Hello World" which is indeed the interesting part of the statement.  With much shorter statements and less wrapper code, the Perl users should be producing many more lines of code a day and beating the pants off the Java programmers.

Well, this is <i>sometimes</i> true.  And, to be fair, often <i>not</i>.

What was the tradeoff with brevity again?  Oh, yes...more ambiguity.  When does this strike?  In maintenance and what I like to call "pre-maintenance", the time you're developing the code yourself and if reaches the point it's too big to fit in your head.

Consider the two examples above.  While the Java version is clearly printing to standard out, "say" is printing to the 'current file handle' which <i>almost</i> always is standard out.  Of course Perl people might consider this potential action at a distance to be a worthwhile abstraction layer.  Which really emphasises an important difference between the two languages.

Perl and Java are essentially operating at about the same level of abstraction.  They're both a level above C, running on a virtual machine layer that has nice safety nets built in meaning things like memory allocation, array boundary checking, sorting algorithms, etc. are all taken care by the core language and API.  There's really little to separate the two languages, and they share more in common with each other than say, C and Prolog do, so it's more interesting to look at the small details that make the two languages different to one another.  The Perl and Java programmer have a lot to learn from one another.

This difference in syntax philosophy is really interesting to me.  Perl's basic syntax typically allows you to express more in shorter space by exploiting what is known as <i>context</i>.  There's a lot of <em>implicit</em> things.  There's list or scalar context for example, or the current file handle, or there's the topic variables ($_, @_ et al) that are often used as default arguments for calls.  This either allows you to hold more in your head (because you worry about less because you can ignore the need to restate the context all the time) or hold a lot less (because the code isn't clear and you have to worry about what's in the hidden context all the time.)

So in theory Perl allows you to express more in a line, but you can also get yourself in a mess a heck of a lot quicker.  It can be really easy for beginners to pick up Perl compared to Java because they aren't forced to deal with all the implicit stuff directly, but at the same time they're not aware of all the implicit things going so it can harder to deal with too;  A double edged sword.

No wonder sometimes Perl is better than Java, and sometimes Java is better than Perl.

The obvious thing that Perl and Java can do, in the grand tradition of langauge design,  is learn from each other's mistakes and steal the good bits from each other without (hopefully) picking up the bad bits.  Java stealing regular expressions and Perl stealing layered IO are good examples of worthwhile theft.

So what would I change about Perl to take advantage of what Java teaches us?  Probably more than some people would like, and a lot less than others.

As a way of example of what I would change I wrote is this particularly confusing chunk of code earlier in the week:

<code><pre>sub log {
  no warnings;
  warn @_;
}</pre></code>

<code>no warnings</code> immediately followed by <code>warn</code>?  Gah!  Of course, what I'm actually doing is suppressing all warnings that perl will generate (undefined values, printing of wide characters, etc) while it prints out my warnings message.  Very brief.  Different semantic domains entirely.

So what do I think we should do to fix this?  Nothing.  This is just the pain of having a brief ambigious language: Sometimes you're just going to end up with what I dub "talking at semantic cross purposes" in your code.  I could suggest that we force people more explicit so it's clear what warnings I'm talking about in each case, but then I'd be changing the feel of the language.  I'm in no rush to recreate Java;  Java's a fine language and I know where it is when I want to use it.

So what <em>would</em> I change? Ambiguity where there's genuine confusion due to overloading meaning of things.

If you're paying a lot of attention in my example you'll notice that I'm <b>not</b> declaring something that's going to be used as a subroutine there, despite the <code>sub</code> keyword (because, obviously, without syntatic gymnastics you can't call a subroutine called <code>log</code> without calling the <code>log</code> built in function instead.)  In fact, the occasions where you want a method to be also be callable as a subroutine (or vice versa) are very thin.  So <b>this</b> is where I'd be more explicit and lose the unnecessary ambiguity be able to express the difference between a <i>function</i> and a <i>method</i>.  Like so:

<code><pre>method log {
  no warnings;
  warn @_
}</pre></code>

Of course, that's exactly what some of the more radical extensions like <a href="http://search.cpan.org/dist/MooseX-Declare/">MooseX::Declare</a> allow you to do, and I'll talk more about that in a future blog entry.
]]></content:encoded>
		<excerpt:encoded><![CDATA[One of the most difficult tradeoffs in language design is brevity verses explicitness.  What does Java do better than Perl?  What should we steal?]]></excerpt:encoded>
		<wp:post_id>111</wp:post_id>
		<wp:post_date>2009-10-19 22:12:48</wp:post_date>
		<wp:post_date_gmt>2009-10-19 22:12:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>lets-have-our-cake-and-eat-it-too</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>DropBox as a No Paste server</title>
		<link>https://twoshortplanks.wordpress.com/2009/10/26/dropbox-as-a-no-paste-server/</link>
		<pubDate>Mon, 26 Oct 2009 18:30:36 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=122</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post I'm going to talk about my own custom "no paste" solution that I've developed over the years.  How I started out using a web page as a service, moved to scripting this from the command line, and how I finally ended up subverting DropBox to my ends.  Skip to the end to get to the code.

So, what's "no paste" I hear you ask?  "No paste" servers allow you to go to a webpage and submit a bit of text and get a unique url back where that text can be viewed.  This means that you don't have to paste a whole bunch of text into IRC or an IM conversation, you can just upload your text and and copy and paste only the link the "no paste" server sent back into your IM.  If you haven't seen one before check out <a href="http://pastie.textmate.org/">textmate's nopaste server</a>.

This has several advantages.  Firstly and foremostly, it doesn't "SPAM" the conversation you're having. Pasting a whole bunch of code into a IRC channel where people are having a conversation causing that conversation to scroll off the screen before they can read it isn't polite.  Secondly it makes the text easier to read and easier to copy and paste into an editor (for example, most IRC an IM clients will prepend each line someone says with a datestamp when you copy and paste from them.)

Excellent.  A useful idea.  Now how can we make it better?

As a Perl programmer I tend to automate a heck of a lot of what I do with my computer.  Filing in a form on a webpage is easy to do, but it's more hassle than hitting a key combination that pastes whatever text is highlighted in your editor.  If we do it a lot we should make the computer do all the work!

For a long time I used the <a href="http://search.cpan.org/dist/App-Nopaste">App::Nopaste</a> module on CPAN which installs a command line utility called <code>nopaste</code> which integrates with a vast range of "no paste" servers.  This utility can take input on the command line and automatically fill in the forms on those websites for you.  This means that it's trivial to execute from your editor - in textmate it's just a simple "Bundle" command.

In the end I stopped using <code>nopaste</code> not because I had a problem with the script, but because I had a problem with the nopaste servers, in particular the lack of privacy.  Now, I'm a great believer in simply not putting anything on the internet that is truly private (face it, it's going to get out!) but there exists a bunch of "semi-private" stuff (closed source code, contact information, private correspondence) that shouldn't be put on a totally public paste service.  Often it's just a case of editing the URL that the "no paste" server returns by increasing or decreasing the number at the end to see the thing the next or previous person pasted!

So in the end I decided it might be a good idea to run my own custom "No Paste" solution with semi-secure (non-guessable) URLs.  One problem with that: I couldn't justify the infrastructure - I'm currently trying to reduce the amount of stuff I have to maintain, not increase it.   So I started looking at what infrastructure I'm already using and seeing how I can better use that.

Enter <a href="http://www.getdropbox.com/">DropBox</a>.  DropBox is a service that syncs a directory on your various computers with each other and the DropBox server.  And one of the things it does is publish files in a certain directory as accessible from the web.   This simplifies my problem a lot:  All I need to do to have my own "No Paste" solution is simply have an easy way of getting text into a file on my hard drive and let the DropBox program automatically handle the "uploading" to a hosted service.

So, below is the script I wrote to do that.  Features include:

<ul>
<li>Using a web-safe version of the "MD5 hex" one way hash of the file contents as the filename.  This means that it's both unguessable unless you know what the text contains and reasonably guaranteed to be unique</li>
<li>Taking input from STDIN or the system clipboard</li>
<li>Printing out the URL that the text will be available at, and/or copying it to the clipboard, and/or displaying it in a <a href="http://growl.info/">Growl</a> message</li>
</ul>

<code><pre>#!/usr/bin/perl

use strict;
use warnings;

use 5.010;
use autodie;
use Path::Class qw(file dir);
use Digest::MD5 qw(md5_base64);
use Net::Growl qw(register notify);
use Getopt::Std qw(getopt);

########################################################################
# config

my $DROPBOX_ID = &quot;301667&quot;;
my $GROWL_PASSWORD = &quot;shoutout&quot;;

########################################################################

# get the config options
my %opt;
getopt(&quot;&quot;,\%opt);

# read the entire of STDIN / the files passed on the command line
my $data = $opt{c}
  ? read_clipboard()
  : do { local $/; scalar &lt;&gt; };

# work out the digest for it.  Covert the non url safe characters
# to url safe characters
my $uuid = md5_base64($data);
$uuid =~ s{/}{-}g;
$uuid =~ s{\+}{_}g;

# copy the data to the new file
open my $fh, &quot;&gt;:bytes&quot;,
  file($ENV{HOME},&quot;Dropbox&quot;,&quot;Public&quot;,&quot;nopaste&quot;,&quot;$uuid.txt&quot;);
print {$fh} $data;
close $fh;

# output the url that dropbox will make that file avalible at
my $url = &quot;http://dl.getdropbox.com/u/$DROPBOX_ID/nopaste/$uuid.txt&quot;;
say $url unless $opt{q};
write_clipboard($url) if $opt{p};
if ($opt{g}) {
  my $message = &quot;shortly at $url&quot;;
  $message .= &quot; (copied to clipboard)&quot; if $opt{p};
  growl(&quot;Text Dropped&quot;, $message);
}

########################################################################

# this is mac os X depenent.  I&#x27;d use the Clipboard module from CPAN
# to make this system independent, but it fails tests.

sub read_clipboard {
  open my $pfh, &quot;-|&quot;, &quot;pbpaste&quot;;
  local $/;
  return scalar &lt;$pfh&gt;;
}

sub write_clipboard {
  my $data = shift;
  
  open my $pfh, &quot;|-&quot;, &quot;pbcopy&quot;; 
  print {$pfh} $data;
  close $pfh;
}

sub growl {
  my $title = shift;
  my $description = shift;
  
  register(
    application =&gt; &quot;droptxt&quot;,
    password =&gt; $GROWL_PASSWORD,
  );

  notify(
    application =&gt; &quot;droptxt&quot;,
    password =&gt; $GROWL_PASSWORD,
    title =&gt; $title,
    description =&gt; $description,
  );
  
}

########################################################################

__END__

=head1 NAME

droptxt - easily write text to a file in your public dropbox

=head1 SYNOPSIS

  # read from stdin
  bash$ droptxt
  this is some text
  ^D
  http://dl.getdropbox.com/u/301667/nopaste/4ZwSg8klsyBmhf9SKs-j5g.txt
  
  # read from a file
  bash$ droptxt some_text.txt
  http://dl.getdropbox.com/u/301667/nopaste/asdSDsq_asdQsasdw12s3d.txt
  
  # read from the clipboard
  bash$ droptxt -c
  http://dl.getdropbox.com/u/301667/nopaste/cssj12-22WWdsqQfxjpDDe.txt
  
  # also paste the url to the clipboard
  bash droptxt -p some_text.txt
  http://dl.getdropbox.com/u/301667/nopaste/asdSDsq_asdQsasdw12s3d.txt

=head1 DESCRIPTION

This is a command line utility that is designed to be used as an
alternative to &quot;no paste&quot; utilities.  Instead of sending the input to a
webserver it simply writes it to a location on your hard drive where the
DropBox utility will syncronize it with the Dropox webservers.

=head2 Options

=over

=item -c

Copy the input from the system clipboard rather than from the usual
location.

=item -p

Paste the url to the system clipboard.

=item -g

Announce the url via Growl

=item -q

Do not print the url to STDOUT

=back

=head1 AUTHOR

Copyright Mark Fowler E&lt;lt&gt;mark@twoshortplanks.comE&lt;gt&gt; 2009. All rights reserved.

This program is free software; you can redistribute it
and/or modify it under the same terms as Perl itself.

=head1 BUGS

Doesn't wait for DropBox to sync the file.  The URL this creates may not be
usable straight away!

=head1 SEE ALSO

L&lt;http://www.getdropbox.com&gt; for details on the service.

L&lt;App::Nopaste&gt; for a utility that uses public &quot;no paste&quot; servers instead.

=cut

</code></pre>
]]></content:encoded>
		<excerpt:encoded><![CDATA[In this blog post I'm going to talk about my own custom "no paste" solution that I've developed over the years.  How I started out using a web page as a service, moved to scripting this from the command line, and how I finally ended up subverting DropBox to my ends.]]></excerpt:encoded>
		<wp:post_id>122</wp:post_id>
		<wp:post_date>2009-10-26 18:30:36</wp:post_date>
		<wp:post_date_gmt>2009-10-26 18:30:36</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dropbox-as-a-no-paste-server</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0c73f373f5a21748b71222a686d6c7cb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0e66bcc20e62cd7fdaa3edeb07485595</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0f8911b778ef8147145e8c3ad75e31b6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_447a63216350642552fee110275b8927</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_982c050a4f3b69f6184ec9b33bc44f72</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_94b71270ec7f6013f3fbd3888f64f5ec</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_88491675997a241baafd830683329330</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c72cddecce5b1794d9e85e8fedbc0779</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_4de298487898465e6c352010fa6d6437</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_832585fc4502286e1ca8907cea2c98b5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0d136081678e32b8961f6b3593d498ec</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5ec1dc392ac7a9c874b34bf224351c42</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8fdf730432a31a8f5b6e41349c9b2b8b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_686763fbee36549ed13bcc3e5579606a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ebcf9e6d65a2a51cfe45b25115446b64</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_30b73faae2a215cb01f7d1fefde9077a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fbd530b3d6a2175f7413fe09bb5c3aca</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1cb0382eb965f70ccfada1b63c807e97</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6456cf36ce77c751b618b0513c9f3d5e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_afa57f77e0e96107674839a0b072e6e9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6faedb7ab2c727559603f7b8e4451d93</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_6a62537d52f88c04ff11ea2b5abbdc01</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_884d4794a23bf60d7668775a899ec36a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1e6561a1eb5bc41f808f7eae45c19595</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_922d2bb04a64efc3d0aac49dd67cd9ca</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d06fb765322f98dc6c8e1ad32cf55eed</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fec307559429b9830d1ce28179a53eb9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1c0f3b48b83201e9b47c57829b784171</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b5b0ef120506b3635a2acc8d76446dab</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3742a4f49d022a6479988db086306880</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9b16af53d6c6176d44a7922181cf3009</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7755baccabf45aac7e93008619be3d19</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2008be65e13dfdaee6d6626c35b60fd3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_31eadd9ca235d1a345307a1a47be510b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c261b0fee1d972a6f92ce53ad44f2d7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_03d66c125910de52334e9d7cabb47a7d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d39aaff231fb0c1a7aac1bfaf95a6a91</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_22bfaed4c3bfe4eead025bcae6091c69</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_227bb01a983ba1fd092979f4359d9057</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f42ffd0d196df1dcce8110d59d7dd89b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_69b045a52b43b5a51a062bf12289bf14</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_482df51581d66b3b386a0f03a584e5b7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ba9f495ed3292f10be1759b1ec7f93b3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a4f6535a9d6786475786da5f7220b06b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_cf55b3b9f8fd3b56f893602bc585461a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Introducing XML::Easy</title>
		<link>https://twoshortplanks.wordpress.com/2009/11/02/introducing-xmleasy/</link>
		<pubDate>Mon, 02 Nov 2009 20:53:28 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=126</guid>
		<description></description>
		<content:encoded><![CDATA[Some days, you just want to parse XML document.

However, the standard distribution of Perl doesn't ship with a bundled XML parser, traditionally instead requiring the user to install a module from CPAN.  This means there's no <em>standard</em> way to do this.  Instead there are several choices of parser, each with their advantages and disadvantages: There is, as we often say in Perl, more than one way to do it.  This is the first post in a series where I'm going to talk about <a href="http://search.cpan.org/dist/XML-Easy">XML::Easy</a>, a relatively new XML parsing module that deserves a little more publicising.

But why another XML parsing library?  What's wrong with the others?  Well, a few things...

One of the biggest problems with the most popular XML parsing modules like XML::LibXML and XML::Parser is that they rely on external C dependancies being installed on your system (libxml2 and expat respectively) so it can be hard to rely on them being installable on any old system.  Suppose you write some software that relies on these modules.  What exactly are you asking of the users of your software who have to install that module as a dependency?  You're asking them firstly to have a C compiler installed - something people using ActiveState Perl, basic web-host providers, or even Mac OS X users without dev tools do not have.  Even more than this you're often asking them to download and install (either by hand or via their package management system) the external C libraries that these modules rely on, and then know how to configure the C compiler to link to these.  Complicated! 

To solve this XML::Easy ships with a pure Perl XML parser neither requiring external libraries or a C compiler to install:  In a pinch you can simply copy the Perl modules into your library path and you're up and ready to go.  This means that this library can be relied on pretty much anywhere.

The observant will point out that there are many existing pure Perl XML parsing libraries on CPAN.  They suffer from another problem: They're slow.  Perl runs not as native instructions but as interpreted bytecode executing on a virtual machine, which is a technical way of saying "in a way that makes lots of very simple operations slow."  This is why the boring details of XML parsing are normally handled in C space.

Luckily, XML::Easy doesn't use its pure Perl parser unless it really has to.  It prefers to compile and install on those systems that do have a working C compiler its own C code for parsing XML.  Note that this C code, bound into the perl interpreter with fast XS, is wholly self contained and doesn't rely on external libraries.  All the user on a modern Linux system has to do to install the module is type <code>cpan XML::Easy</code> at the command prompt.  In this mode XML::Easy is fast:  In our tests it's at least as fast as XML::LibXML (which is to say, very fast indeed.)  This week I've been re-writing some code that used to use MkDoc::XML to use XML::Easy and the new code is 600 (yes, six hundred) times faster.

This is great news for module authors who just want to do something simple with fast performance if they can get it, but don't want to have to worry about putting too much of a burden on their users.

Of course, this would all be for naught if XML::Easy didn't do a good job of parsing XML - but it does.  The other big failing of the many so-called XML parsers for Perl is that they screw up the little but important things.  They miss part of the specification (sometimes even deliberately!) or they don't let you do things properly like handle unicode.  XML::Easy isn't like this: It follows the specification quite carefully (with the devotion I've come to expect from its author, my co-worker Zefram) and doesn't screw up unicode because it doesn't attempt to handle character encodings itself but embraces and works with Perl's own unicode handling.

So by now, I'll have either sold you on the <em>idea</em> of XML::Easy or not, but I haven't really shown you how to use it. In the <a href="http://blog.twoshortplanks.com/2009/11/09/xmleasy-by-example/">next post</a> in this series I'm going to start talking about how you can use XML::Easy to parse XML and extract which bits you want.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>126</wp:post_id>
		<wp:post_date>2009-11-02 20:53:28</wp:post_date>
		<wp:post_date_gmt>2009-11-02 20:53:28</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>introducing-xmleasy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>86</wp:comment_id>
			<wp:comment_author><![CDATA[john napiorkowski]]></wp:comment_author>
			<wp:comment_author_email>jjn1056@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://jjnapiorkowski.vox.com</wp:comment_author_url>
			<wp:comment_author_IP>71.167.133.83</wp:comment_author_IP>
			<wp:comment_date>2009-11-03 01:25:59</wp:comment_date>
			<wp:comment_date_gmt>2009-11-03 01:25:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'll be sure to give it a try!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2009-11-03 01:25:59]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>XML::Easy by Example</title>
		<link>https://twoshortplanks.wordpress.com/2009/11/09/xmleasy-by-example/</link>
		<pubDate>Mon, 09 Nov 2009 22:21:47 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=128</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last week I <a href="http://blog.twoshortplanks.com/2009/11/02/introducing-xmleasy/">posted</a> about why you should be interested in the new XML parsing library on the block, XML::Easy.  In this post I'm going to actually dive into some code so you can see what it's like to work with.</p>

<h2>Parsing XML by Example</h2>

The basics of parsing is pretty straight forward:

<pre><code>use XML::Easy::Text qw(xml10_read_document);

# read in the document
open my $fh, &quot;&lt;:utf8&quot;, &quot;somexml.xml&quot;;
  or die &quot;Can&#x27;t read filehandle: $!&quot;;
my $string = do { local $/; &lt;&gt; };

# parse it
my $root_element = xml10_read_document($string);</code></pre>

Now <code>$root_element</code> contains an XML::Easy::Element.  Getting basic facts out of this element such as its name or attribute values is easy too:

<pre><code>say &quot;the name of the root element is &quot;.$root_element-&gt;type_name;
say &quot;the content of the href attribute is &quot;.$root_element-&gt;attribute(&quot;href&quot;)
  if defeined $root_element-&gt;attribute(&quot;href&quot;);</code></pre>

Getting at the child elements involves dealing with a <em>twine</em>.  What's a <em>twine</em> you say?  Why it's nothing more than an alternating list of strings and elements.  Let's look at an example to help explain this:

   my $input = &#x27;&lt;p&gt;Hello my &lt;i&gt;friend&lt;/i&gt;, here is my picture: &lt;img src=&quot;http://farm1.static.flickr.com/116/262065452_6017d39626_t.jpg&quot; /&gt;&lt;/p&gt;&#x27;

We can then call this:

   my $p = xml10_read_document($string);
   my $twine = $p-&gt;content_twine;

The <code>$twine</code> variable now contains a an array reference holding alternating strings and XML::Easy::Elements

<ul>
  <li><code>$twine-&gt;[0]</code> contains the string "Hello my"</li>
  <li><code>$twine-&gt;[1]</code> contains an XML::Easy::Element representing the &lt;i&gt; tag (which in turn will contain the text "friend")</li>
  <li><code>$twine-&gt;[2]</code> contains the string ", here is my picture "</li>
  <li><code>$twine-&gt;[3]</code> contains an XML::Easy::Element representing the &lt;img&gt; tag</li>
  <li><code>$twine-&gt;[4]</code> contains the empty string "" between the &lt;img&gt; tag and the closing &lt;/p&gt; tag</li>
</ul>

The important thing to remember about twines is that they <em>always</em> alternate element-string-element-string.  When two elements are next to each other in the source document then they're separated by the empty string.  You'll note that the twine first and last elements are <strong>always</strong> strings, even if they have to be empty, and an "empty" tag has a twine that contains just one element - the empty string.

Now we know the basics, let's look at a practical example.  Imagine we want to get all the possible anchors (internal links) in an XHTML document.  This simply involves looking for all the <code>&lt;a&gt;</code> tags that have a name attribute:

<code><pre>sub get_links {
  my $element = shift;
  my @results;

  # check this element
  push @results, $element-&gt;attribute(&quot;name&quot;)
    if $element-&gt;type_name eq &quot;a&quot; &amp;&amp; defined $element-&gt;attribute(&quot;name&quot;);

  # check any child elements
  my $swizzle = 0;
  foreach (@{ $element-&gt;content_twine() }) {

    # skip every other array element because it&#x27;s a string
    next if $swizzle = !$swizzle;

    # recurse into the child nodes
    push @results, get_links($_);
  }

  return @results;
}</code></pre>

If we want to make this even easier on ourselves there's a bunch of helper functions in the XML::Easy::Classify module that can be used to help process parts of XML documents.  For example, we could have written the above code in a more terse (but less efficient) way by using <code>is_xml_element</code>:

<pre><code>use XML::Easy::Classify qw(is_xml_element);

sub get_links {
  my $element = shift;
  my @results;

  # check this element
  push @results, $element-&gt;attribute(&quot;name&quot;)
    if $element-&gt;type_name eq &quot;a&quot; &amp;&amp; defined $element-&gt;attribute(&quot;name&quot;);

  # check any child elements
  push @results, get_links($_)
    foreach grep { is_xml_element $_ } @{ $element-&gt;content_twine() };

  return @results;
}</code></pre>

<h2>Generating XML by Example</h2>

If you've got an XML::Easy::Element instance, writing it out as an XML document is just the opposite of reading it in:

<pre><code>use XML::Easy::Text qw(xml10_write_document);

# turn it into a string
my $string = xml10_write_document($root_element);

# write out the document
open my $fh, &quot;&gt;:utf8&quot;, &quot;somexml.xml&quot;;
  or die &quot;Can&#x27;t write to filehandle: $!&quot;;
print {$fh} $string;</code></pre>

So  One of the first things you have to know about XML::Easy::Elements and their contents is that they are <em>immutable</em>, or put another way <em>you can't change them once they're created</em>.  This means they have no methods for setting the name of an element, altering the attributes, or setting the children.  All of these must be passed in in the constructor.

Let's just jump in with an example.  We're going to create a little code that outputs the following XML document:

<pre><code>&lt;html&gt;
   &lt;head&gt;&lt;title&gt;My Links&lt;/title&gt;&lt;/head&gt;
   &lt;body&gt;
     &lt;h1&gt;Links&lt;/h1&gt;
     &lt;ul&gt;
       &lt;li&gt;&lt;a href=&quot;http://search.cpan.org/&quot;&gt;Search CPAN&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;http://blog.twoshortplanks.com/&quot;&gt;Blog&lt;/a&gt;&lt;/li&gt;
       &lt;li&gt;&lt;a href=&quot;http://www.schlockmercenary.com/&quot;&gt;Schlock&lt;/a&gt;&lt;/li&gt;
     &lt;/ul&gt;
   &lt;/body&gt;
&lt;/html&gt;</code></pre>

(I've added extra whitespace in the above example for clarity - the code examples that follow won't reproduce this whitespace)

I'm going to start of showing you the most verbose and explicit objected-orientated way to create XML::Easy::Elements, and then I'm going to show you the much quicker functional interface once you know what you're doing.  The verbose way of creating an object is to explicitly pass in each of the things to the constructor:

  XML::Easy::Element-&gt;new($name, $attributes_hashref, $xml_easy_content_instance)

The trouble with using such code is that it often requires requires pages and pages of code that puts Java to shame in it's repetition of the obvious (you don't really need to read the following code, just gawk at its length:)

<pre><code>my $root_element = XML::Easy::Element-&gt;new("html",
  {},
  XML::Easy::Content-&gt;new([
    "",
    XML::Easy::Element-&gt;new("head",
      {},
      XML::Easy::Content-&gt;new([
        "",
        XML::Easy::Element-&gt;new("title",
          {},
          XML::Easy::Content-&gt;new([
            "My Links",
          ])
        ),
        "",
      ]),
    ),
    "",
    XML::Easy::Element-&gt;new("body",
      {},
      XML::Easy::Content-&gt;new([
        "",
        XML::Easy::Element-&gt;new("h1",
          {},
          XML::Easy::Content-&gt;new([
            "Links",
          ])
        ),
        "",
        XML::Easy::Element-&gt;new("ul",
          {},
          XML::Easy::Content-&gt;new([
            "",
            XML::Easy::Element-&gt;new("li",
              {},
              XML::Easy::Content-&gt;new([
                "",
                XML::Easy::Element-&gt;new("a",
                  { href =&gt; "http://search.cpan.org/" },
                  XML::Easy::Content-&gt;new([
                    "Search CPAN",
                  ]),
                ),
                "",
              ]),
            ),
            "",
            XML::Easy::Element-&gt;new("li",
              {},
              XML::Easy::Content-&gt;new([
                "",
                XML::Easy::Element-&gt;new("a",
                  { href =&gt; "http://blog.twoshortplanks.com/" },
                  XML::Easy::Content-&gt;new([
                    "Blog",
                  ]),
                ),
                "",
              ]),
            ),
            "",
            XML::Easy::Element-&gt;new("li",
              {},
              XML::Easy::Content-&gt;new([
                "",
                XML::Easy::Element-&gt;new("a",
                  { href =&gt; "http://schlockmercenrary.com/" },
                  XML::Easy::Content-&gt;new([
                    "Schlock",
                  ]),
                ),
                "",
              ]),
            ),
            "",
          ]),
        ),
        "",
      ]),
    ),
    "",
  ]),
);</code></pre>

So, we never ever write code like that!  For starters we could <a href="http://dl.getdropbox.com/u/301667/nopaste/bxk7lCMTgCcG0buyI4X9FQ.txt">use twines instead of content objects</a>, but that's too verbose too.  We use the functional interface presented by XML::Easy::NodeBasics instead:

<pre><code>use XML::Easy::NodeBasics qw(xe);

my $root_element = xe("html",
  xe("head",
    xe("title", "My Links"),
  ),
  xe("body",
    xe("h1", "Links"),
    xe("ul",
      xe("li",
        xe("a", { href =&gt; "http://search.cpan.org/" }, "Search CPAN"),
      ),
      xe("li",
        xe("a", { href =&gt; "http://blog.twoshortplanks.com/" }, "Blog"),
      ),
      xe("li",
        xe("a", { href =&gt; "http://www.schlockmercenary.com/" }, "Schlock"),
      ),
    ),
  ),
);</code></pre>

The <code>xe</code> function simply takes a tag name followed by a list of things that are either hashrefs (containing attributes), strings (containing text,) or XML::Easy::Elements (containing nodes.)  It can also take content objects and twines, which is handy when you're re-using fragments of XML that you've extracted from other documents you may have parsed.  In short, it Does The Right Thing with whatever you throw at it.

Of course, we can optomise further by knowing that this code is Perl:

<pre><code>tie my %hash, "Tie::IxHash",
  "http://search.cpan.org/" =&gt; "Search CPAN",
  "http://blog.twoshortplanks.com" =&gt; "Blog",
  "http://www.schlockmercenary.com" =&gt; "Schlock",
;

my $root_element = xe("html",
  xe("head",
    xe("title", "My Links"),
  ),
  xe("body",
    xe("h1", "Links"),
    xe("ul",
      map { xe("li", xe("a", { href =&gt; $_ }, $hash{$_}) ) } keys %hash
    ),
  ),
);</code></pre>

And that's about it for basic XML parsing and generation with XML::Easy.  There's a lot more handy functions and explantions of the theory behind XML::Easy in <a href="http://search.cpan.org/dist/XML-Easy/">the documentation</a>.  In <a href="http://blog.twoshortplanks.com/2009/11/16/xmleasyproceduralwriter/">my next post</a> I'm going to look at another way of creating XML using XML::Easy, when I talk about one of my own modules: XML::Easy::ProceduralWriter.]]></content:encoded>
		<excerpt:encoded><![CDATA[Last week I posted about why you should be interested in the new XML parsing library on the block, XML::Easy.  In this post I'm going to actually dive into some code so you can see what it's like to work with.]]></excerpt:encoded>
		<wp:post_id>128</wp:post_id>
		<wp:post_date>2009-11-09 22:21:47</wp:post_date>
		<wp:post_date_gmt>2009-11-09 22:21:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmleasy-by-example</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>XML::Easy::ProceduralWriter</title>
		<link>https://twoshortplanks.wordpress.com/2009/11/16/xmleasyproceduralwriter/</link>
		<pubDate>Mon, 16 Nov 2009 20:45:55 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=140</guid>
		<description></description>
		<content:encoded><![CDATA[In this post I want to take a further look at writing code that outputs XML with XML::Easy, and how the example from <a href="http://blog.twoshortplanks.com/2009/11/09/xmleasy-by-example/">my previous blog</a> entry can be improved upon by using <a href="http://search.cpan.org/dist/XML-Easy-ProceduralWriter">XML::Easy::ProceduralWriter</a>.

<h2>What's wrong with the previous example?</h2>

When we left things in my previous post we were looking at this snippet of code that outputs a simple XML webpage:

<pre><code>tie my %hash, "Tie::IxHash",
  "http://search.cpan.org/" =&gt; "Search CPAN",
  "http://blog.twoshortplanks.com" =&gt; "Blog",
  "http://www.schlockmercenary.com" =&gt; "Schlock",
;

my $root_element = xe("html",
  xe("head",
    xe("title", "My Links"),
  ),
  xe("body",
    xe("h1", "Links"),
    xe("ul",
      map { xe("li", xe("a", { href =&gt; $_ }, $hash{$_}) ) } keys %hash
    ),
  ),
);

print {$fh} xml10_write_document($root_element);</code></pre>

The above code produces exactly the output we want, but it doesn't necessarily go about the best way of producing it.

The first problem is that it's using Tie::IxHash to ensure that the keys of the hash (and thus the nodes in the resulting XML) come out in the right order rather than in a random order like traditional hashes.  Tied data structures are much slower than normal data structures and using this structure in this way is a big performance hit.  However in this case we have to tie because it's hard to write, in a readable way, the logic inline in the <code>map</code> statement to process a normal array two elements at a time.

Which brings us onto the second problem, also related to the map statement - it's somewhat unwieldy to write and hard to read (you have to scan to the end of the line to work out that it's using the %hash for its keys.)  This only gets worse as you have to produce more complex XML and you try and use further (possibly nested) map statements and tertiary logic expressions to build up even more complex data structures - which is every bit as messy to do as it is to explain.

Both issues stem from trying to build the XML::Easy::Element tree all in one go, essentially in one statement as a single assignment.  If we choose not to restrict ourselves in this way we can easily re-order the code to use a temporary variable and do away with both the tie and the map:

<pre><code>my @data = (
  "http://search.cpan.org/" =&gt; "Search CPAN",
  "http://blog.twoshortplanks.com" =&gt; "Blog",
  "http://www.schlockmercenary.com" =&gt; "Schlock",
);

my @links;
while (@data) {
  my $url = shift @data;
  my $text = shift @data;
  push @links, xe("li", xe("a", { href =&gt; $url }, $text) );
}

my $root_element = xe("html",
  xe("head",
    xe("title", "My Links"),
  ),
  xe("body",
    xe("h1", "Links"),
    xe("ul", @links),
  ),
);

print {$fh} xml10_write_document($root_element);</code></pre>

The problem with this solution is now we've ended up with code that's backwards.  We're creating the list elements and <em>then</em> creating the node that encloses them.  Now we have to read the bottom of the code to work out that we're creating a HTML document at all!

<h2>Introducing XML::Easy::ProceduralWriter</h2>

To solve this problem I wrote XML::Easy::ProceduralWriter, a module that allows you to write your code in a procedural fashion but without having to "code in reverse".

Here's the above example re-written again, this time using XML::Easy::ProceduralWriter:

<pre><code>use XML::Easy::ProceduralWriter;

print {$fh} xml_bytes {

  element "html", contains {
  
    element "head", contains {
      element "title", contains {
        text "My Links";
      };
    };
    
    element "body", contains {
      element "ul", contains {
         my @data = (
           "http://search.cpan.org/" =&gt; "Search CPAN",
           "http://blog.twoshortplanks.com" =&gt; "Blog",
           "http://www.schlockmercenary.com" =&gt; "Schlock",
         );
         
         while (@data) {
           element "li", contains {
             element "a", href =&gt; shift @data, contains {
               text shift @data;
             };
           };
         }
      };
    };
  };

};</code></pre>

Using the module is straight forward.  You start by calling either <code>xml_element</code> (which returns an XML::Easy::Element) or <code>xml_bytes</code> (which returns a set of bytes you can print out) and inside these call you pass some code that generates XML elements and text.  Each element can 'contain' further code that produces sub-elements and text that element contains and so on.

The key thing to notice is that unlike the previous examples where you were passing <em>data structures</em> into the functions here you're passing <em>code to be executed</em>.  This means you can place arbitrary logic in what you pass in and you're not limited to single statements.  For example, in the above code we declare variables in the middle of generating the XML.  The conceptual jump here is realising that neither what the blocks of code nor what <code>element</code> and <code>text</code> return isn't important, but the side effects of calling these two functions are.  The simplest way to think about it is to imagine the string being built up as the <code>element</code> and <code>text</code> statements are encountered in much the same way output is straight away printed to the filehandle when you use print (even though technically this isn't the case here - a full XML::Easy::Element object tree is always actually built in the background.)

The <a href="http://search.cpan.org/dist/XML-Easy-ProceduralWriter/lib/XML/Easy/ProceduralWriter.pm">documentation</a> for XML::Easy::ProceduralWriter contains a reasonable tutorial that explains its usage in more detail, but it should be pretty straight forward from just reading the above code to jump straight in.

And that's pretty much all I have to say about outputting XML with XML::Easy.  In my next post we'll look instead at advanced parsing and how to cope with documents with XML Namespace declarations.]]></content:encoded>
		<excerpt:encoded><![CDATA[In this post I want to take a further look at writing code that outputs XML with XML::Easy, and how the example from my previous blog entry can be improved upon by using XML::Easy::ProceduralWriter.]]></excerpt:encoded>
		<wp:post_id>140</wp:post_id>
		<wp:post_date>2009-11-16 20:45:55</wp:post_date>
		<wp:post_date_gmt>2009-11-16 20:45:55</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>xmleasyproceduralwriter</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>RationalizeNamespacePrefixes</title>
		<link>https://twoshortplanks.wordpress.com/2009/11/23/rnp/</link>
		<pubDate>Mon, 23 Nov 2009 22:53:41 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=146</guid>
		<description></description>
		<content:encoded><![CDATA[Today I'm going to talk about parsing documents that use XML Namespaces with XML::Easy.  While XML::Easy doesn't (by design) ship with its own XML Namespace aware parser, one of my modules XML::Easy::Transform::RationalizeNamespacePrefixes makes parsing documents that use namespaces a doddle with just one simple function call.

<h2>The problems namespaces solve and cause</h2>

XML Namespaces is an <i>extension</i> of the XML 1.0 specification that allows multiple standards to cooperate so they don't use the same names for their nodes, meaning it's possible to use more than one specification in the <i>same</i> document at the same time without conflict.  For example here's an XML document that uses two different made up specs at the same time to describe a pub lunch that uses the tag "chips" to mean two different things:

<pre><code>&lt;order
  xmlns:prepackaged=&quot;http://twoshortplanks.com/ns/example/behindthebar&quot; 
  xmlns:grub=&quot;http://twoshortplanks.com/ns/example/food&quot;&gt;
  &lt;grub:meal &gt;
    &lt;grub:beefburger/&gt;
    &lt;grub:chips/&gt;
  &lt;/grub:meal&gt;
  &lt;prepackaged:chips type=&quot;Pringles&quot; /&gt;
&lt;/order&gt;</code></pre>

So the way the XML Namespace specification works is by using a convention of naming nodes starting with an extra prefix.  This allow you to use what otherwise would be the same named in the same document to have a different <i>schematic meaning</i>.  For example the "chips" nodes are written as "prepackaged:chips" when they're referring to crisps, and "grub:chips" when they're referring to a fries.  The clever bit of XML Namespaces is that doesn't matter what prefix you use to differentiate the two from each other, but what namespace URLs they map to.  For example, this document here is considered to be essentially identical to the previous example as far as a namespace aware XML parser is concerned:

<pre><code>&lt;order&gt;
  &lt;meal xmlns=&quot;http://twoshortplanks.com/ns/example/food&quot;&gt;
    &lt;beefburger/&gt;
    &lt;chips/&gt;
  &lt;/meal&gt;
  &lt;barsnack:chips xmlns:barsnack=&quot;http://twoshortplanks.com/ns/example/behindthebar&quot; type=&quot;Pringles&quot; /&gt;
&lt;/order&gt;</pre></code>

The meaning of the prefix is entirely derived from the presence of the <code>xmlns</code> prefixed attributes on the node or on the parent node mapping the prefix to a URL<a href="#point1">¹</a>.  This both is great and a complete nightmare: Great since you're mapping an arbitrary prefix to a the unique namespace URL you're not going to get conflicts with other specifications (the way you would if each specification defined its own prefix.)  And a complete nightmare because you don't know what the thing you're looking for is actually called - either your code, or the parser, has to keep track of what namespaces are declared in the current scope and what prefixes map to what namespaces.

<h2>Using XML::Easy::Transform::RationalizeNamespacePrefixes</h2>

What would be great is if there was some way you could force everyone who gives you a document to use the prefixes you'd like, and then you'd know what they'd be called and instead of having to worry about all these xmlns:whatever attributes in the document (and what nodes were where in the tree in relation to them.)  Then you could just look for all the "beverage:larger" nodes. 

Well, we can't force other people to do what we want, but what we can do is make use of the fact that the prefixes are arbitrary and the same document with any prefix means the same thing.  We can therefore just rewrite whatever document we're given into a form we'd like to deal with before we process it.  This is the task XML::Easy::Transform::RationalizeNamespacesPrefixes was designed for - it rationalises the prefixes of the namespaces to whatever you want.  For example, forcing using "drink" and "modifier" prefixes for the namespaces:

<pre><code>my $old_doc = xml10_read_document($string_of_xml);
my $new_doc = rationalize_namespace_prefixes($old_doc, {
  namespaces =&gt; {
    &quot;http://twoshortplanks.com/ns/example/food&quot; =&gt; &quot;kitchen&quot;,
    &quot;http://twoshortplanks.com/ns/example/behindthebar&quot; =&gt; &quot;barstaff&quot;,
  },
  force_attribute_prefix =&gt; 1,
})</code></pre>

Now if you feed <i>either</i> of the above documents to the code, you'll have an in memory representation of the following document:

<pre><code>&lt;order
  xmlns:barstaff=&quot;http://twoshortplanks.com/ns/example/behindthebar&quot; 
  xmlns:kitchen=&quot;http://twoshortplanks.com/ns/example/food&quot;&gt;
  &lt;kitchen:meal &gt;
    &lt;kitchen:beefburger/&gt;
    &lt;kitchen:chips/&gt;
  &lt;/kitchen:meal&gt;
  &lt;barstaff:chips barstaff:type=&quot;Pringles&quot; /&gt;
&lt;/order&gt;</pre></code>

Several important transformations have happened:

<ul>
  <li>It used the namespace/prefixe mapping that we passed into it with <code>namespaces</code> to rename all the corresponding nodes in the document to have the whatever prefixes we want.  This means we now know without looking at the xmlns attributes what our nodes will be called.</p>
 <li>All the namespaces have been moved to the top element of the document.  In this example the module didn't need to introduce any further prefixes to do this (which can happen if the same prefix is used to refer to different URLs in different parts of the tree) nor condense prefixes to a single prefix per namespace (which happens if multiple prefixes refer to the same URL) but if it had to do that, it would have.  This means it's really easy to find other namespaces that are defined in our document - you just look for xmlns attributes at the top element.</li>
 <li>The <code>force_attribute_prefix</code> option forces prefixes to be attached to attribute names too</li>
</ul>

Now we can parse the document <i>without worrying about the namespaces at all</i>.  If we want to look for all the packets of preprepared food in the document:

<pre><code>use XML::Easy::Text qw(xml10_read_document);
use XML::Easy::Classify qw(is_xml_element);
use XML::Easy::NodeBasics qw(xe_twine);
use XML::Easy::Transform::RationalizeNamespacePrefixes qw(rationalize_namespace_prefixes);

sub packets {
  my $element = shift;
  return unless is_xml_element($element);
  my @return;
  push @return, $element-&gt;attribute("barstaff:type") if $element-&gt;type_name eq "barstaff:chips";
  push @return, map { packets($_) } @{ xe_twine($element) };
  return @return;
}

say "We need the following packets:";
say " * $_" for packets(
  rationalize_namespace_prefixes(
    xml10_read_document($string_of_xml), {
      namespaces =&gt; {
        "http://twoshortplanks.com/ns/example/behindthebar" =&gt; "barstaff",
      },
      force_attribute_prefix =&gt; 1,
    }
  )
);</pre></code>

There's more information on '<a href="http://search.cpan.org/dist/XML-Easy-Transform-RationalizeNamespacePrefix">XML::Easy::Transform::RationalizeNamespacePrefix's search.cpan.org page</a><a href="#point2">²</a>.

And that concludes my mini-series into looking into XML::Easy.  I'm sure to write more about it in the future as more interesting uses and extensions are written for it, but in my next entry I'll be taking a break from the pointy brackets!

<hr>

<a name="point1"></a>[1] I've used the term URL mutliple times in this document when I should have really used URI.  We're using the http:// thingy wosit to Identify a Unique Reference, so it should be a URI, rather an a Universal Resorce Location because there's no resource to locate at that address.  It's just a unique name.

<a name="point2"></a>[2]Please note that this blog was originally posted close in time to when the new version of XML::Easy::Transform::RationalizeNamespacePrefixes was uploaded to the CPAN, so not all features described in this post may have reached your local CPAN mirror if you're reading it "hot off the presses".
]]></content:encoded>
		<excerpt:encoded><![CDATA[Today I'm going to talk about parsing documents that use XML Namespaces with XML::Easy.  While XML::Easy doesn't (by design) ship with its own XML Namespace aware parser, one of my modules XML::Easy::Transform::RationalizeNamespacePrefixes makes parsing documents that use namespaces a doddle with just one simple function call.]]></excerpt:encoded>
		<wp:post_id>146</wp:post_id>
		<wp:post_date>2009-11-23 22:53:41</wp:post_date>
		<wp:post_date_gmt>2009-11-23 22:53:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>rnp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5322189ec824d607b0fa9bc80d6d29f9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_95cd385282696a982a51d00ebfacc598</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_16b3c20ccc8be816a7014d5654edb0f7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a14c341f42fc7d3b07ce4b1ff5698648</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f3e2495227753df09e452a50c03dcd0c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_aceafa54917b99d783b6df036ecbd189</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ed894f03cb353c45ba50f713aadd5e50</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_60d9259790b997b8abd3ee07a1ae8249</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f53767701a2fa8b1e3c768636fdc3836</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_56f0159aef206be41662033b8c44dc94</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3cff2f46ab4470b1aac0d749e4294bbc</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fa905a1d92eac78cb16e2a25cbc84f20</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_203453de4928444b0752589969567ea5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_294b1b136ff3b570812b7666733a3c01</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a76ac4ba741316ed268e89b0c41da0b8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_41ecbf50d9848a38bddf206e6a494b3f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3fbd26badcd5c290c907ae94bff023d4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3bba6cd7c3aec46255d2f62959366a15</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0752955e296131a44dd8d428be8bd396</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_352e8300a84a2fd16851f0665100e4bb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_810b3d79fca2d93b7c4c181944ad8bdb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3633b0d5ff0c54cf6bc4a3f2eaaee495</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_491a84b7e82231ca1f9d39eca1ae067e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_aa4b3db73203079ae2e3cf85a16f81f2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_daadc72e0233ad31fc41cc4fc332c133</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_0a684e870e5a6cda6104d8a94ac35be1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_43fdfc2b422e8af0217412cf28d1fde3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_efb4c7386616e5e0bfdb5cfc76e1aa79</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1448f205c6de3b32ea321806e8c568f3</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2af7d85f1740b60f49ce1c680b103db5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_94c401b403cbcffe76a2d29cc0d3fb0e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_93e462121d93ad62e0b8c4903920332b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_93493bf190e4ec85943f1a85069fe843</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9746af9504e68036a4c9c4305bc78adf</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_257635197b9ca5365c3c6848ee071cef</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_de106a28b419028945d0cf8e56d085ff</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d2560531086f6c7ae7fb74962ca1e73f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_876aacfa21cefd6f167a9c691221502c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e12beb21fe81c9b36c6c43469076a828</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3592d692e72c57b134c75be954eae6d6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d769702e056b5e67d6aaf922a697b86a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c24de5d9befbc50e2248f8a56500563f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_46883623a2f37340b966dcc737e064ce</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e142ca390f1686478081f4c4bcd8a0db</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a27046d719e0b2ee8e0f4c20f4afdf62</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7825daec7d9b5383090e8b5906a7a113</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3f7a6e8e13df055cf30ef74c7fb71ae5</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_ebd77749bb78048f75de375862030cbe</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9a2ef2a29cfba00fa0e0a595396d0757</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2ef2c721eee5dd5559f6500fd7820d73</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_070504d8f0285eb1372e452af82a7bf8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7545a3fd28631d0ef511add35be126c4</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3a5d93ec73e7587bcee3984f628d9d51</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e9106fb9f0404e75a4d7e2bb29b3383d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_fae1bd09a8d6ebcbba16a2ec3bc241dd</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_a945dbe30ff912d420c4a5ae6e7c5fd7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_05be3da7f295362b72512812585264fb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_83588a398a54439054fd4dda3a8b141b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_60ca7487597715bdec10969d04b0eadf</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d44d3fe34d310eb5e5af2094b15fedc8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c515a99629d3b1de4fb46399dcfa7b4c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_00a3e816fed4471915d094a2ae4296b0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e14c8c7906b41b9909dc0c015712a924</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_331c00b97c86ff8d21e19725f198d442</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_e0afd7a06c34d62b356025e36b1bc316</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7b9407abd6254e2539cd922f019bce45</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7b1ba07223e3883b215a90bef0be780f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9ea8d5270b86e2bd2f7b7991a89fcbfc</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_51e23f568cc87727743d8bd82789d66d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5630722531da2dc66a93d37607577354</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c01968276ae3e0984184b7b286a6cd7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_df70dfe7a262a2cd35c344c3d9946c5f</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c55fbb0b52003c9cd3271d1d3a26caf0</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_153ca8ced7ee1268cb65e7311c96707c</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c1f9f430ad152f2d367f10db00713cbb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2eb3323bf7c9ca2645b2a22d9fbadfbb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_dee4937c4733bc17e6cd48647784848b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>327</wp:comment_id>
			<wp:comment_author><![CDATA[Aristotle Pagaltzis]]></wp:comment_author>
			<wp:comment_author_email>pagaltzis@gmx.de</wp:comment_author_email>
			<wp:comment_author_url>http://plasmasturm.org/</wp:comment_author_url>
			<wp:comment_author_IP>78.35.25.22</wp:comment_author_IP>
			<wp:comment_date>2011-11-29 14:37:22</wp:comment_date>
			<wp:comment_date_gmt>2011-11-29 14:37:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What <code>force_attribute_prefix</code> does violates the Namespaces in XML spec. The spec declares that attributes that lack a prefix <em>never</em> belong to a namespace – <em>even</em> if there is a default namespace in effect.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1325081747]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1325081748.034";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1322577442.6032";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-11-29 14:37:22]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Under the Hood</title>
		<link>https://twoshortplanks.wordpress.com/2009/12/02/under-the-hood/</link>
		<pubDate>Wed, 02 Dec 2009 21:14:05 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=163</guid>
		<description></description>
		<content:encoded><![CDATA[Perl provides a high level of abstraction between you and the computer allowing you to write very expressive high level code quickly that does a lot.  Sometimes however, when things don't go to plan or you want performance improvements it's important find out what's really going on at the lower levels and find out what perl's doing "under the hood."

<h2>What Did perl Think I Said?</h2>

Sometimes when code doesn't do what you expect it's nice to see how the Perl interpreter understands your code incase your understanding of Perl's syntax and perl's understanding of that same syntax differ.  One way to do this is to use the B::Deparse module from the command line to regenerate Perl code from the internal representation perl has built from your source code when it parsed it.

This is as simple as:

<pre><code>bash$ perl -MO=Deparse myscript.pl</code></pre>

One of my favourite options for B::Deparse is <code>-p</code> which tells it to put in an obsessive amount of brackets so you can see what precedence perl is applying:

<pre><code>bash$ perl -MO=Deparse,-p -le 'print $ARGV[0]+$ARGV[1]*$ARGV[2]'
BEGIN { $/ = "\n"; $\ = "\n"; }
print(($ARGV[0] + ($ARGV[1] * $ARGV[2])));
-e syntax OK</code></pre>

You'll even note there's two sets of brackets immediately after the print statement - one surrounding the addition and one enclosing the argument list to print.  This means that B::Deparse can also be used to work out why the following script prints out <code>25</code> rather than <code>5</code>:

<pre><code>bash$ perl -le 'print ($ARGV[0]**2+$ARGV[1]**2)**0.5' 3 4</code></pre>

The brackets we thought we were using for force precedence actually were parsed by perl as constraining what we were passing to <code>print</code> meaning that the <code>**0.5</code> was actually ignored:

<pre><code>bash$ perl -MO=Deparse,-p -le 'print ($ARGV[0]**2+$ARGV[1]**2)**0.5' 3 4
BEGIN { $/ = "\n"; $\ = "\n"; }
(print((($ARGV[0] ** 2) + ($ARGV[1] ** 2))) ** 0.5);
-e syntax OK</code></pre>

<h2>What Does That Scalar Actually Contain?</h2>

A scalar is many things at once - it can actually hold a string, an integer, a floating point value and convert between them at will.  We can see the internal structure with the Devel::Peek module:

<pre><code>use Devel::Peek;
my $foo = 2;
Dump($foo);</code></pre>

This prints

<pre><code>SV = IV(0x100813f78) at 0x100813f80
  REFCNT = 1
  FLAGS = (PADMY,IOK,pIOK)
  IV = 2</code></pre>

This tells you a lot about the object.  It tells you it's an int (an IV) and the value of that int is 2.  You can see that it's got one reference pointing to it (the <code>$foo</code> alias.)  You can also see it's got several flags set on it telling us which of the values stored in the object are still current (in this case, the IV, since it's an IV)

<pre><code>$foo .= "";
Dump($foo);</code></pre>

This now prints:

<pre><code>SV = PVIV(0x100803c10) at 0x100813f80
  REFCNT = 1
  FLAGS = (PADMY,POK,pPOK)
  IV = 2
  PV = 0x100208900 "2"
  CUR = 1
  LEN = 8</code></pre>

We gain PV flags (it's a "pointer value" aka a string) and we also gain CUR (current string length) and LEN (total string length allocated before we need to re-alloc and copy the string.)  The flags have changed to indicate that the PV value is now current too.

So we can tell a lot about the internal state of a scalar.  Why would we care (assuming we're not going to be using XS that has to deal with this kind of stuff.)  Mainly I find myself reaching for Devel::Peek to print out the contents of strings whenever I have encoding issues.

Consider this:

<pre><code>my $acme = "L\x{e9}on";
Dump $acme;</code></pre>

On my system this shows that L&eacute;on was actually stored internally as a latin-1 byte sequence:

<pre><code>SV = PV(0x100801c78) at 0x100813f98
  REFCNT = 1
  FLAGS = (PADMY,POK,pPOK)
  PV = 0x100202550 "L\351on"
  CUR = 4
  LEN = 8</code></pre>

But it doesn't have to be

<pre><code>utf8::upgrade($acme);
Dump($acme);</code></pre>

Now the internal bytes of the string are stored in utf8 (and the UTF8 flag is turned on)

<pre><code>SV = PV(0x100801c78) at 0x100813f98
  REFCNT = 1
  FLAGS = (PADMY,POK,pPOK,UTF8)
  PV = 0x1002010f0 "L\303\251on" [UTF8 "L\x{e9}on"]
  CUR = 5
  LEN = 6</code></pre>

As far as perl is concerned these are the same string:

<pre><code>my $acme  = "L\x{e9}on";
my $acme2 = $acme;
utf8::upgrade($acme);
say "Yep, this will be printed"
  if $acme eq $acme2;</code></pre>

In fact, perl may decide to switch between these two internal representations as you concatinate and manipulate your strings.  This is not something you normally have to worry about until something goes wrong and you see something horrid being output:

<pre><code>L&#xc3;&#xa9;on</code></pre>

This is usually a sign that you've read in some bytes that were encoded as latin-1 and forgotten to use Encode (or you've done that twice!), or you've passed a UTF-8 string though a C library, or you had duff data to begin with (garbage in, garbage out.)  Of course, you can't really start to work out which of these cases is true unless you look in the variable, and that's hard: You can't just print it out because that will re-encode it with the binmode of that filehandle <em>and</em> your terminal may do all kinds of weirdness with it.  The solution, of course, is to Dump it out as above and see an ASCII representation of what's actually stored in memory.

<h2>How Much Memory Is That Using?</h2>

In general you don't have to worry about memory in Perl - perl handles allocating and deallocating memory for you automatically.  On the other hand, perl can't magically give your computer an infinite amount of memory so you still have to worry that you're using too much (especially in a webserver environment where you might be caching data between requests but running multiple Perl processes at the same time.)  The Devel::Size module from the CPAN can be a great help here:

<pre><code>bash$ perl -E 'use Devel::Size qw(size); say size("a"x1024)'
1080</code></pre>

So in this case a string of 1024 "a" characters takes up the 1024 bytes for all the "a" characters plus 56 bytes for the internal scalar data structure (the exact size will vary slightly between versions of perl and across architectures.)

Devel::Size can also tell you how much memory nested data structures (and objects) are taking up:

<pre><code>perl -E 'use Devel::Size qw(total_size); say total_size({ z =&gt; [("a"x1024)x10] })'
11251</code></pre>

Be aware that Devel::Size will only report how much memory <em>perl</em> has allocated for you - not how much memory XS modules you've loaded into perl are taking up.

<h2>How Does perl Execute That?</h2>

Perl's interpreter (like those that run Python, Java, JavaScript, Ruby and many other languages) neither compiles your code to native machine instructions nor interprets the source code directly to execute it.  It instead compiles the code to an bytecode representation and then 'executes' those bytes on a virtual machine capable of understanding much higher level instructions than the processor in your computer.

When you're optomising your code one of the most important things to do is reduce the number of "ops" (bytecode operations) that perl has to execute.  This is because there's significant overhead in actually running the virtual machine itself, so the more you can get each Perl op to do the better, even if that op itself is more expensive to run.

For example, here's a script that counts the number of "a" characters in the output by using the <code>index</code> command to repeatedly search for the next "a" and increasing a counter whenever we do'

<pre><code>perl -E '$c++ while $pos = index($ARGV[0], "a", $pos) + 1; say $c' aardvark
3</code></pre>

Let's look at what ops that program actually creates.  This can be done with the B::Concise module that ships with perl:

<pre><code>bash$ perl -MO=Concise -E &#x27;$c++ while $pos = index($ARGV[0], &quot;a&quot;, $pos) + 1; say $c&#x27; aardvark
l  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter -&gt;2
2     &lt;;&gt; nextstate(main 42 -e:1) v:%,{ -&gt;3
g     &lt;@&gt; leave vK* -&gt;h
3        &lt;0&gt; enter v -&gt;4
-        &lt;1&gt; null vKP/1 -&gt;g
c           &lt;|&gt; and(other-&gt;d) vK/1 -&gt;g
b              &lt;2&gt; sassign sKS/2 -&gt;c
9                 &lt;2&gt; add[t7] sK/2 -&gt;a
7                    &lt;@&gt; index[t6] sK/3 -&gt;8
-                       &lt;0&gt; ex-pushmark s -&gt;4
-                       &lt;1&gt; ex-aelem sK/2 -&gt;5
-                          &lt;1&gt; ex-rv2av sKR/1 -&gt;-
4                             &lt;#&gt; aelemfast[*ARGV] s -&gt;5
-                          &lt;0&gt; ex-const s -&gt;-
5                       &lt;$&gt; const[GV &quot;a&quot;] s -&gt;6
-                       &lt;1&gt; ex-rv2sv sK/1 -&gt;7
6                          &lt;#&gt; gvsv[*pos] s -&gt;7
8                    &lt;$&gt; const[IV 1] s -&gt;9
-                 &lt;1&gt; ex-rv2sv sKRM*/1 -&gt;b
a                    &lt;#&gt; gvsv[*pos] s -&gt;b
-              &lt;@&gt; lineseq vK -&gt;-
e                 &lt;1&gt; preinc[t2] vK/1 -&gt;f
-                    &lt;1&gt; ex-rv2sv sKRM/1 -&gt;e
d                       &lt;#&gt; gvsv[*c] s -&gt;e
f                 &lt;0&gt; unstack v -&gt;4
h     &lt;;&gt; nextstate(main 42 -e:1) v:%,{ -&gt;i
k     &lt;@&gt; say vK -&gt;l
i        &lt;0&gt; pushmark s -&gt;j
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;k
j           &lt;#&gt; gvsv[*c] s -&gt;k</code></pre>
  

It's not important to really understand this in any great detail;  All we need worry about is that firstly it's very big for what we're trying to do and secondly that it's looping so those ops we can see are going to be executed multiple times.

Let's try an alternative approach, using the translation operator to translate all the "a" characters to "a" characters (so, do nothing) and return how many characters it 'changed'

<pre><code>bash$ perl -MO=Concise -E &#x27;$c = $ARGV[0] =~ tr/a/a/; say $c&#x27; aardvark
b  &lt;@&gt; leave[1 ref] vKP/REFC -&gt;(end)
1     &lt;0&gt; enter -&gt;2
2     &lt;;&gt; nextstate(main 42 -e:1) v:%,{ -&gt;3
6     &lt;2&gt; sassign vKS/2 -&gt;7
-        &lt;1&gt; null sKS/2 -&gt;5
-           &lt;1&gt; ex-aelem sK/2 -&gt;4
-              &lt;1&gt; ex-rv2av sKR/1 -&gt;-
3                 &lt;#&gt; aelemfast[*ARGV] s -&gt;4
-              &lt;0&gt; ex-const s -&gt;-
4           &lt;&quot;&gt; trans sS/IDENT -&gt;5
-        &lt;1&gt; ex-rv2sv sKRM*/1 -&gt;6
5           &lt;#&gt; gvsv[*c] s -&gt;6
7     &lt;;&gt; nextstate(main 42 -e:1) v:%,{ -&gt;8
a     &lt;@&gt; say vK -&gt;b
8        &lt;0&gt; pushmark s -&gt;9
-        &lt;1&gt; ex-rv2sv sK/1 -&gt;a
9           &lt;#&gt; gvsv[*c] s -&gt;a</code></pre>

Ah! much less ops!  And no loops!  This is because the call to <code>tr</code> is a single op, meaning this whole thing is much faster.  Of course, don't take my word for it - run a benchmark

<code><pre>#!/usr/bin/perl

use Benchmark qw(cmpthese);

cmpthese(10_000_000, {
 'index' =&gt; sub { my $c; my $pos; $c++ while $pos = index($ARGV[0], "a", $pos) + 1 },
 'tr'    =&gt; sub { my $c; $c = $ARGV[0] =~ tr/a/a/ },
});

bash$ ./benchmark.pl aardvark
           Rate index    tr
index 2439024/s    --  -39%
tr    4016064/s   65%    --</code></pre>

<h2>And finally</h2>

This is just a smattering of modules that can help poke around inside the internal of Perl - practically the national sport of the Programming Republic of Perl.  The CPAN contains a very large number of modules that can do all kinds of clever things - try looking on the CPAN for "B::" and "Devel::" modules.
]]></content:encoded>
		<excerpt:encoded><![CDATA[Perl provides a high level of abstraction between you and the computer allowing you to write very expressive high level code quickly that does a lot.  Sometimes however, when things don't go to plan or you want performance improvements it's important find out what's really going on at the lower levels and find out what perl's doing "under the hood."]]></excerpt:encoded>
		<wp:post_id>163</wp:post_id>
		<wp:post_date>2009-12-02 21:14:05</wp:post_date>
		<wp:post_date_gmt>2009-12-02 21:14:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>under-the-hood</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Ghost of Christmas Perl Past: 2001</title>
		<link>https://twoshortplanks.wordpress.com/?p=171</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=171</guid>
		<description></description>
		<content:encoded><![CDATA[These days the lead up to Christmas is a very busy time for me at work;  I couldn't imagine having time to write the advent calendar entries I used to write for the Perl Advent calendar anymore.  I used to stay up to the wee hours in the morning fiddling my examples.  Now I stay up to the wee hours in the morning monitoring server loads each Christmas, which is why I'm glad to have handed over the mantle to others several years ago.

Of course, this is Perl.  There's More Than One Way To Do It, and this year there's now more than one Perl 5 calendar:

<ul>
 <li><a href="http://advent.rjbs.manxome.org/">The RJBS Advent Calendar</a> - my perfect favourite, featuring tutorials how to solve simple problems with a module from CPAN.  I think this is the closest to the original idea I was going for.
 <li><a href="http://www.perladvent.org/2009/">The Perl Advent Calendar</a></li> - The 'official' Perl advent calendar, featuring my old domain name.
 <li><a href="http://www.catalystframework.org/calendar/2009">The Catalyst Advent calendar</a> - featuring a new articles on the web framework each day</a>
</ul>

But what of the modules of yesteryear that I wrote so much about?  Do we still use them?  Are they still worthwhile?

This is the first post in a series of where I look back at the Perl modules I recommended back when I was doing the Perl advent calendar and see if what I recommended was any good.

<h2>2001</h2>

<dl>
<dt><a href="http://www.perladvent.org/2001/1st/">Mail::Audit</a></dt>
<dd>This module was replaced by a suite of modules in the Email:: namespace as part of the Perl Email Project</dd>
<dt><a href="http://www.perladvent.org/2001/2nd/">Mail::ListDetector</a></dt>
<dd>Not really replaced, but we've seen the simple email list fall our of popularity with the rise of the web forum and social networking sites.  Most email list software that survives these days is pretty good at using the standard header so complex tools like this aren't used as much</dd>
Tie
</dl>

<h2>2002</h2>
<h2>2003</h2>
<h2>2004</h2>
<h2>2005</h2>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>171</wp:post_id>
		<wp:post_date>2009-12-07 23:57:04</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>And this year, time for something completely different</title>
		<link>https://twoshortplanks.wordpress.com/2010/06/19/summer2010/</link>
		<pubDate>Sat, 19 Jun 2010 08:31:25 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=173</guid>
		<description></description>
		<content:encoded><![CDATA[So this week I got back from a week in Pisa.  "Hang on", you no doubt say, "this week?  Aren't you meant to be going to Pisa for YAPC shortly?"

Well yes, and sadly no.  I won't be (shock, horror) attending this year's YAPC::Europe.

Up until this point I've been to every YAPC::Europe ever.  For ten years in a row&#185;.  When I first went I was merely pimply faced youth not out of university.  Now?  I'm a pimply faced 100000 year old&#178; that's done everything from the webmonkey to CTO role, with several sojourns into things like R&amp;D and System Architecture on the way.  It's been a _long_ time, and I've enjoyed it every year.

So why aren't I going this year?  It's not because I've stopped doing Perl (though right now I'm more on the pointy hair side of the equation than the actual typing funny symbols into the editor side of the game) nor because YAPC::Europe isn't worth attending anymore (it's great) nor is it because my company isn't willing to send me&#179;.

It's because I've got other things going on.  My second daughter, all things going to plan, will be arriving on the 25th of August, which is too close for comfort for trips to places that require a combination of EasyJet and non-exploding Iceland to get me back again.

Now, there's an argument to be made that I could safely go to a conference ending on the 6th August which is nearly three weeks before the 25th.  I counter that with the story of my colleague at the first OSCON Europe.  He and I were over in Brussels in order to man a booth in the exhibition hall there.  At some point during the evening he received a call from his wife, who was several weeks before her own due date, saying The Time Was Now.  He did make it back in time in the end, but having looked into his eyes and saw the panic there, I'm *not* going to put myself in that situation.

So what am I going to do about this?  Well, the first step has already been done - the family took the trip back to Pisa we'd been looking forward to since the announcement of the venue in Portugal last year a few months early.

What am I going to do about the Perl?  The only thing I can do: I'm going to put myself back into Ironman (this post being the first of a new series.)

Oh, and if *someone* doesn't at least bring me a t-shirt from Pisa, I'll cry myself to sleep for a week ;-)

<hr />

&#185; Fencepost problem.  I've attended the ten YAPC::Europe conferences that occur annually, which have occurred over a period of nine years starting nearly ten years ago.

&#178; In base 2.

&#179; YAPC::Europe is cheap and wonderful training and I recommend it to all employers.  Last year the only reason I didn't let someone go is we couldn't have them out of the office at the same time as other people already agreed - so we sent them to YAPC::NA instead.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>173</wp:post_id>
		<wp:post_date>2010-06-19 08:31:25</wp:post_date>
		<wp:post_date_gmt>2010-06-19 08:31:25</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>summer2010</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[173]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Measuring what counts</title>
		<link>https://twoshortplanks.wordpress.com/2010/06/26/measuring/</link>
		<pubDate>Sat, 26 Jun 2010 08:53:26 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=187</guid>
		<description></description>
		<content:encoded><![CDATA[So, how long does it take your webserver to generate pages?

This seemingly simple question is actually a lot more complicated than it might sound, and there's several ways to answer it, depending, I guess, on what question you're actually asking, and the reason you're asking it.

The simplest way to answer this is to fire up your web browser¹ and look that the pretty graphs showing how long it took to actually load some pages that you have determined as 'typical'.  Using a real web brower to do the timings is the most accurate representation of what a user actually sees because it properly accounts for loading all the other bits of the page, all of which might be very slow and block the actual rendering of the page and actually be the most significant delay the user sees².

The problem with this approach is that it's not a very consistent method.  Each time you do it you're going to get slightly different results back as various caches are charged and emptied and depending on what else the server is doing at the time.

One way to answer this is to use a tool like Selenium to do the same request with your browser several times and average the result.  Another, more basic, approach is to run a tool like ab (apache bench) or Perl's own LWP to generate a lot of requests for the main HTML file.  Either of these techniques is a lot better than the one off measurement, but still gives you different results at different times of the day, days of the week, or time in the year (for example, the servers might be more loaded during weekday nights than at three am on a sunday morning.)

Worse still, the servers might be influenced by what you're doing.  You're not following typical user behaviour (you're creating a bunch of extra requests for a subset of pages) and maybe you're now loading the servers in a different way to the normal distribution of traffic and skewing your results.

One of the things I've started doing is looking at the performance of websites as a whole rather than the performance of the bits of the site I'm manually measuring.  This is a totally different approach: Instead of creating requests and monitoring how long it takes for them to return in the client, I'm logging on the server details all about requests actual user activity creates and then summarising that.

The advantage in this approach is that it's directly measuring the thing that you actually care about: The time it takes to get a response to the user in the actual conditions that they're making these requests.  When you do this you'll often be surprised about what's actually slowing down the site - sometimes what seems like a very quick page when called in isolation can turn out to be a big resource hog if it's called a large number of times by your users.

One of the things you'll notice when recording details of your site is that it's really easy to get mixed up about two things

  1. Working out how long the user has to wait for given pages so that you can gauge if user experience is acceptable for those page requests

  2. Working out what pages are taking up the most resources so that pages that you can work out what's slowing down your site.

This is really easy because as soon as your site starts bottlenecking on something (memory, CPU, database activity...) everything will start to seem slow, and it can be hard to work out what the thing that's doing the delaying and the thing that's being delayed is.

In order to work this out you need to go beyond the wallclock seconds that you're recording to work out how slow your user experience is and move onto recording how much resource each request is taking up.

There are various techniques for this, each more complicated and precise that the one before, but starting at a gross level will allow you work out which bit you should be concentrating on.  Measuring memory used with mod_perl can be as simple as using Apache::SizeLimit:

  my ($start_size, $start_shared) = $Apache2::SizeLimit::HOW_BIG_IS_IT-&gt;();
  ...
  my ($end_size, $end_shared) = $Apache2::SizeLimit::HOW_BIG_IS_IT-&gt;();
  print {$log_fh} "That request grew us by @{[ $end_size - $size_size ]}",
                  "(@{[ $end_shared - $start_shared ]}) shared\n";

Measuring CPU can be as simple as recoding the number of ticks used:

  use POSIX ();
  my ($start_r, $start_u, $start_s) = POSIX::times();
  ...
  my ($end_r, $end_u, $end_s) = POSIX::times();
  print {$log_fh} "Took @{[ $end_u $start_u ]} user ticks and ",
                  "@{[ end_s - $start_u ]} system ticks\n"

Measuring your database is a little more tricky.  I'd suggest simply monitoring the wallclock seconds each database request takes (accurately, with Time::HiRes) and using this as a starting point on which requests are slow, but this won't alone tell you why the slowdowns are (you'll need to do something like perodically caputuring the output of "SHOW FULL PROCESSLIST" or its ilk in order to detect what's locking on what.)

Once you've got these gross levels recorded in your you can dive in in more detail in your staging environment where you can add vastly more instrumentation on the pages that are slowing down your site in order to work out exactly why those pages are using so much resources.

Happy hunting!

<hr>

¹ And because this is your web browser, you're using something modern like a WebKit based brower or Firefox with Firebug, or even Opera or the I.E. 9 beta, right?

² If you haven't read <a href="http://www.amazon.co.uk/High-Performance-Web-Sites-Essential/dp/0596529309">High Performance Websites</a> and the explanation of why this is, you should stop reading this blog post now and go overnight a copy.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>187</wp:post_id>
		<wp:post_date>2010-06-26 08:53:26</wp:post_date>
		<wp:post_date_gmt>2010-06-26 08:53:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>measuring</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>124</wp:comment_id>
			<wp:comment_author><![CDATA[Shuck &amp; Awe #7: Hunting for Perl | The Pythian Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://www.pythian.com/news/13913/shuck-awe-7-hunting-for-perl/</wp:comment_author_url>
			<wp:comment_author_IP>174.143.243.63</wp:comment_author_IP>
			<wp:comment_date>2010-06-29 20:43:30</wp:comment_date>
			<wp:comment_date_gmt>2010-06-29 20:43:30</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] Fowler discusses the art of measuring the performance of web applications and gives a few pointers that I, for one, will be seriously taking into consideration (not to [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1277850200]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-06-29 20:43:30]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Accelerating your Editor with Acme::MetaSyntactic </title>
		<link>https://twoshortplanks.wordpress.com/2010/07/03/holy_acceleration/</link>
		<pubDate>Sat, 03 Jul 2010 08:23:11 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=194</guid>
		<description></description>
		<content:encoded><![CDATA[The Acme namespace on CPAN is a collection of supposedly useless junk that often has no other purpose than to amuse or otherwise entertain the author and Perl aficionados.  This said, not all of it's useless, with one particular module Acme::MetaSyntactic being much more useful than you might first think.

Acme::MetaSyntactic is a module responsible for spewing out on demand random interesting names for things.  While this isn't something that you might want to do yourself, it's great for extending your editor.

Six years ago at YACP::NA::Florida Damian Conway gave a talk about how he'd wired up vi to greatly speed up his Perl development.  While I haven't invested as much time as Damian has, with the help of Acme::MetaSyntatic I've been able to do some rudimentary code generation techniques that save me a lot of time without much outlay.

I'm currently using the TextMate editor (Your Millage May Vary, and I've no bones to pick with anyone else who uses another editor.)  One of the simplest accelerators TextMate offers is "Snippets" - little bits of text inserted when you hit a key combination, or when you type a given string and hit tab.  Not just limited to simple text, these snippets can can also insert the result of running shell scripts, and thus allow a quick and rudimentary way to extend the editor's functionality.

<h2>The Poor Man's Debugger</h2>

One of the most basic snippets I have is to type "acme[TAB]".  This triggers the following snippet:

<pre><code>  print STDERR "`meta batman` `meta batman`\n";</code></pre>

In TextMate the backticks are one of the ways that snippets can call shell scripts, and in this case executes the "meta" command that ships with Acme::MetaSyntactic to give me a sound effect from the batman theme.  Thus typing:

<pre><code>  acme[TAB]
  acme[TAB]
  acme[TAB]</code></pre>

Would give me something like:

<pre><code>  print STDERR "wham_eth thunk\n";
  print STDERR "powie sock\n";
  print STDERR "whack uggh\n";</code></pre>

This is a very quick way to get a unique human readable print statement, and is a lot less tedious then having to keep writing things like:

<pre><code>  print STDERR "Got to here\n";</code></pre>

And

<pre><code>  print STDERR "Also got to here\n";</code></pre>

And so on.

<h2>'One Off' script variables</h2>

One of the great things about Acme::MetaSyntatic names is that they're always valid Perl variable names, so they're great for creating one off scripts.  I have multiple snippets that insert code that executes something and assigns it to a uniquely named variables.

Let me give you  a real example. I have a remote service I have to access quite often and rather than using the interactive console I prefer to instead write "one off" scripts (which I can then check into version control just incase I need them again several months hence.)

Of course, with a handy set of snippets, the time it takes to write the boilerplate of code can be eliminated.  For example I type:

<pre><code>  call[TAB]</code></pre>

And it spits out this:

<pre><code>  my $sergeant_colon = $remote-&gt;call(
    method =&gt; "ReticulateSplines",
    id     =&gt; $id,
    param  =&gt; {
      
    },
  );</code></pre>

And then I type:

<pre><code>  call[TAB]</code></pre>

And this time it spits out:

<pre><code>  my $windle_poons = $remote-&gt;call(
    method =&gt; "ReticulateSplines",
    id     =&gt; $id,
    param  =&gt; {
      
    },
  );</code></pre>

So each result that I get back from the remote server is assigned to it's own variable name.  Again, this was just as simple as creating a snippet that looks like:

<pre><code>  my \$`meta discworld` = \$bc-&gt;call(
    method =&gt; "${1:ReticulateSplines}",
    id     =&gt; \$id,
    param  =&gt; { 
      $2
    },
  );</code></pre>

(The $1 and $2 let TextMate know where to put the cursor when I execute this snippet and when I subsequently hit tab.)

<h2>And More...</h2>

Of course Acme::MetaSyntatic isn't just limited to Perl.  I have macros that do JavaScript and HTML:

<pre><code>  console.log("holy_taxation holy_shows_up");
  &lt;div id="Barney_Gumble"&gt;&lt;/div&gt;</code></pre>

You get the idea.  I'm sure you can think of a million places where you can save yourself thirty seconds each time by some clever basic code generation.
]]></content:encoded>
		<excerpt:encoded><![CDATA[The Acme namespace on CPAN is a collection of supposedly useless junk that often has no other purpose than to amuse or otherwise entertain the author and Perl aficionados.  This said, not all of it's useless, with one particular module Acme::MetaSyntactic being much more useful than you might first think.]]></excerpt:encoded>
		<wp:post_id>194</wp:post_id>
		<wp:post_date>2010-07-03 08:23:11</wp:post_date>
		<wp:post_date_gmt>2010-07-03 08:23:11</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>holy_acceleration</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>125</wp:comment_id>
			<wp:comment_author><![CDATA[Pedro Melo]]></wp:comment_author>
			<wp:comment_author_email>melo@simplicidade.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.simplicidade.org</wp:comment_author_url>
			<wp:comment_author_IP>85.245.197.154</wp:comment_author_IP>
			<wp:comment_date>2010-07-03 10:18:54</wp:comment_date>
			<wp:comment_date_gmt>2010-07-03 10:18:54</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That's awesome :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278152334]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-03 10:18:54]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>126</wp:comment_id>
			<wp:comment_author><![CDATA[Chas. Owens]]></wp:comment_author>
			<wp:comment_author_email>chas.owens@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://wonkden.net</wp:comment_author_url>
			<wp:comment_author_IP>71.62.58.83</wp:comment_author_IP>
			<wp:comment_date>2010-07-03 13:21:53</wp:comment_date>
			<wp:comment_date_gmt>2010-07-03 13:21:53</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You can avoid the second external call by saying

<code>print STDERR "`meta -ws batman 2`\n";</code>

And is there a reason you don't use <code>warn</code>?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278163313]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-03 13:21:53]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>127</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.193.221.218</wp:comment_author_IP>
			<wp:comment_date>2010-07-04 07:25:59</wp:comment_date>
			<wp:comment_date_gmt>2010-07-04 07:25:59</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[<blockquote>
You can avoid the second external call by saying

<code>print STDERR "`meta -ws batman 2`\n";</code>
</blockquote>

Good point. This really comes from the fact that I've evolved this code from <code>"`meta batman` `meta robin`\n"</code> before settling on two kabloies in a row.

<blockquote>And is there a reason you don't use <code>warn</code>?</blockquote>

Consistency. I have other code that says things like

<code>print {$logfh} "`meta batman` `meta batman`\n";</code>

To put similar markers in other log files.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>126</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278228359]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-04 07:25:59]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>A Sub by Any Other Name</title>
		<link>https://twoshortplanks.wordpress.com/2010/07/10/methodkeyword/</link>
		<pubDate>Sat, 10 Jul 2010 07:56:08 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=199</guid>
		<description></description>
		<content:encoded><![CDATA[Since time immortal (or, at least, the release of Perl 5 over ten years ago) the standard way of declaring a method in Perl has to been to de clare a subroutine and manually extract the invocant and arguments from the special @_ variable.  In the last year or so however, this has been gradually been changing, with new modules from the CPAN providing alternative syntax.

The <a href="http://search.cpan.org/dist/Devel-Declare/lib/Devel/Declare.pm">Devel::Declare</a> module has been the underpinnings of this work, a new module that allows module authors to hook Perl's lexer to do different things with the code as it's being parsed in and thus transform entirely new syntax into bytecode.

Previous attempts to alter method calling had involved what are known as <i>source filters</i> - that is to say a hook to intercept the source code when it's read from disk and modify it before it was parsed.  The problem with this technique is that writing a program to alter Perl code is a very hard thing to do and (thanks to things like prototypes) is dependant on what code you've already compiled in this session.  This resulted in a alterations that had reasonable potential for quite nasty bugs as incorrect and unsafe modifications could be made.

Devel::Declare, working in conjunction with the perl parser as it does, does not suffer from the same issues and allows new code to be able to be dynamically inserted that, once compiled, runs every bit as fast as if that code had been there in the first place.

<h2>A Starting Point</h2>

By way of an example we're going to be looking at a very basic method call that takes a couple of arguments and prints out some calculation on them.

Here's the example in traditional "sub" based Perl 5 syntax:

<pre><code>  package Reticulator;

  sub reticulate_splines {
    my $self = shift;
    my ($number, $how_much) = @_;

    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier, "\n";
    return;
  }</code></pre>

This version of the code really doesn't have enough error checking, but I'll expand on this later in the examples.

<h2>Method::Signatures::Simple</h2>

The first, and most basic module I'm going to write about today is <a href="http://search.cpan.org/dist/Method-Signatures-Simple/lib/Method/Signatures/Simple.pm">Method::Signatures::Simple</a>.  In a nutshell it just allows us to re-write the above code as:

<pre><code>  package Reticulator;
  use Method::Signatures::Simple;
  
  method reticulate_splines($number, $how_much) {
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

As you can see <code>$self</code> is automatically extracted from <code>@_</code> along with any other variables we've placed in the brackets after the method name.

You can ask the B::Deparse module to re-generate the equivalent code that perl thought it saw after Module::Signatures::Simple and Devel::Declare had their wicked way with it:

<pre><code>  {
    package Reticulator;
    my $self = shift @_;
    my($number, $how_much) = @_;
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

Ignoring the package cruft that B::Deparse always inserts, the code is identical to the version and runs just as fast.

<h2>Method::Signatures</h2>

One of the problems with Method::Signatures::Simple is while the code it effectively creates is no slower than the original traditional Perl, it's no better either! It's still just as buggy as the code we quickly wrote by hand, doing no input validation at all.  For example, what if we forget to pass any arguments:

<pre><code>  $reticulator-&gt;reticulate_splines;
  Use of uninitialized value $number in concatenation (.) or string at example.pl line 28.
  Use of uninitialized value $how_much in multiplication (*) at example.pl line 28.
  Reticulating  splines by 0</code></pre>

Ugh! What we need is some form of error checking.  While we could add this with code in the body of our method, if we switch to using the less-simple module <a href="http://search.cpan.org/dist/Method-Signatures/lib/Method/Signatures.pm">Method::Signatures</a> we get this for 'free':

<pre><code>  use Method::Signatures;

  method reticulate_splines($number, $how_much) {
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

Now the $number and $how_much are required arguments, and not passing them gives me a proper exception:

<pre><code>  $reticulator-&gt;reticulate_splines;
  Reticulator::reticulate_splines() missing required argument $number at example2.pl line 51.</code></pre>

And if we run the subroutine through B::Deparse we can see the equivalent code Module::Signature is creating for us:

<pre><code>  {
    package Reticulator;
    my $self = shift @_;
    Method::Signatures::required_arg('$number') unless @_ &gt; 0;
    my $number = $_[0];
    Method::Signatures::required_arg('$how_much') unless @_ &gt; 1;
    my $how_much = $_[1];
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

This code is, of course, doing slightly more than the original code.  If we benchmark it we see it's slightly slower but not much - those extra unless statements are really cheap ops:

Specifying those arguments aren't required with question marks so they are considered optional again like so...

<pre><code>  package Reticulator;
  use Method::Signatures;

  method reticulate_splines($number?, $how_much?) {
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

Causes those if statments to be removed from the equivalent code to what Method::Signature::Simple generates:

<pre><code>  {
    package Reticulator;
    my $self = shift @_;
    my $number = $_[0];
    my $how_much = $_[1];
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

This is about the same speed (slightly faster or slightly slower, depending on the
exact version of perl you're running, since it uses scalar rather than list assignment) as the original example.

<h2>Named Parameters</h2>

One of the other things that Method::Signatures gives us over the simplistic
Method::Signatures::Simple is the use of <i>named parameters</i>.  That is to say
we can write this:

<pre><code>  package Reticulator;
  use Method::Signatures;

  method reticulate_splines(:$number, :$how_much) {
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

And then call it like this:

<pre><code>  $reticulator-&gt;reticulate_splines( number =&gt; 10, how_much =&gt; 5 );</code></pre>

B::Deparse tells us this compiles into the same thing as if we'd written:

<pre><code>  {
    package Reticulator;
    my $self = shift @_;
    my(%args) = @_[0 .. $#_];
    my $number = delete $args{'number'};
    my $how_much = delete $args{'how_much'};
    Method::Signatures::named_param_check(\%args);
    print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
    return;
  }</code></pre>

The extra readability and error checking comes at a significant cost - we've suddenly
got another subroutine subroutine call being made (this slows things down significantly.)

<h2>MooseX::Declare</h2>

There's still things we can do to produce incorrect output with the level of validation that Method::Signatures is giving us.  For example, we can call the method with strings rather than the numbers we're meant to be dealing with and get garbage out:

<pre><code>  $reticulator-&gt;reticulate_splines( number =&gt; "all", how_much =&gt; "lots" );
  Argument "lots" isn't numeric in multiplication (*) at example3.pl line 29.
  Reticulating all splines by 0</code></pre>

To add type checking to our arguments, we need to move onto using another module <a href="http://search.cpan.org/dist/MooseX-Declare/lib/MooseX/Declare.pm">MooseX::Declare</a> that, amongst other syntactic sugar improvements, brings the power of the Moose framework and its type hand to bear on the arguments list.

<pre><code>  use MooseX::Declare;
  
  class Reticulator {
    method reticulate_splines(Int :$number!, Int :$how_much!) {
      print "Reticulating $number splines by " . $how_much * $self-&gt;multiplier . "\n";
      return;
    }
  }</code></pre>

There are several changes in the above example compared to those above it.  The most obvious is the class keyword - this replaces the package keyword and other boilerplate like "use Moose", "use strict", "use warnings", and "use namespace::clean".

The next thing we've done is to fix the error that we allowed in the previous example: We've added "Int" type constraints (using Moose's type system) to ensure that the numbers we pass in really are integers.  Finally we've added the trailing "!" to the variable names that mean "and make this manditory".

This now explodes with a plethora of debug info if we pass it garbage:

<pre><code>  $obj-&gt;reticulate_splines_with_print(number =&gt; "all", how_much =&gt; "lots");
  Validation failed for 'Tuple[Tuple[Object],Dict[number,Int,how_much,Int]]' with value
  [ [ Reticulator=HASH(0x100cfc6b0) ], { how_much: "lots", number: "all" } ],
  Internal Validation Error is: 
     [+] Validation failed for 'Dict[number,Int,how_much,Int]' with value
       { how_much: "lots", number: "all" }
     [+] Validation failed for 'Int' with value all at
        /Library/Perl/5.10.0/MooseX/Method/Signatures/Meta/Method.pm line 429</code></pre>

The belts and braces however come at a significant cost over the raw subroutine call we started with however.  The reasons for this can only be hinted at by the equivalent code that B::Deparse shows us for MooseX::Declare.  A lot of the validation is handled by completely separate method calls not
even listed here:

<pre><code>  {
    package MooseX::Method::Signatures::Meta::Method;
    use warnings;
    use strict 'refs';
    @_ = ${$self;}-&gt;validate(\@_);
    $actual_body ||= ${$self;}-&gt;actual_body;
    goto \
  }</code></pre>

MooseX::Declare gives us a lot more functionality than just shown in the above example though - you can define extra on the inline validation routines, default values, and even coercion routines for turning one data type into the data type you needed (e.g. stringifying a DateTime object.)  If you use this functionality, the slowdowns are often worth it.

<h2>Conclusion</h2>

You can see from the above examples there's a range of options that allow you to write much more expressive code than using the old and cumbersome "sub" keyword.  It's possible to use these techniques so that there's no run time costs, and it's possible to use these techniques to do a whole host complex input validation.  It's not possible however, just like if you'd written the code by hand, to get both at the same time.

<a href="http://en.wikipedia.org/wiki/There_ain't_no_such_thing_as_a_free_lunch">TANSTAAFL</a>, but at least there's a choice on the menu now.
]]></content:encoded>
		<excerpt:encoded><![CDATA[Since time immortal (or, at least, the release of Perl 5 over ten years ago) the standard way of declaring a method in Perl has to been to de clare a subroutine and manually extract the invocant and arguments from the special @_ variable.  In the last year or so however, this has been gradually been changing, with new modules from the CPAN providing alternative syntax.]]></excerpt:encoded>
		<wp:post_id>199</wp:post_id>
		<wp:post_date>2010-07-10 07:56:08</wp:post_date>
		<wp:post_date_gmt>2010-07-10 07:56:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>methodkeyword</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>144</wp:comment_id>
			<wp:comment_author><![CDATA[Phillip Smith]]></wp:comment_author>
			<wp:comment_author_email>phillip@communitybandwidth.ca</wp:comment_author_email>
			<wp:comment_author_url>http://www.communitybandwidth.ca</wp:comment_author_url>
			<wp:comment_author_IP>173.33.202.218</wp:comment_author_IP>
			<wp:comment_date>2010-07-12 04:04:47</wp:comment_date>
			<wp:comment_date_gmt>2010-07-12 04:04:47</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great article. More like this, please!  :-)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1278907491]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-12 04:04:47]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>140</wp:comment_id>
			<wp:comment_author><![CDATA[Moritz]]></wp:comment_author>
			<wp:comment_author_email>moritz@faui2k3.org</wp:comment_author_email>
			<wp:comment_author_url>http://perlgeek.de/</wp:comment_author_url>
			<wp:comment_author_IP>87.151.241.223</wp:comment_author_IP>
			<wp:comment_date>2010-07-10 09:10:08</wp:comment_date>
			<wp:comment_date_gmt>2010-07-10 09:10:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Please note that Devel::Declare based approaches are still source filters, albeit usually much smaller in scope - and they suffer from the same general problems as source filters.

If Perlmonks wasn't down at the moment, I'd point you to <a href="http://www.perlmonks.org/?node_id=832796" rel="nofollow">this discussion</a> about it - let's hope it is resurrected soon.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1279350455]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-10 09:10:08]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>141</wp:comment_id>
			<wp:comment_author><![CDATA[fREW Schmidt]]></wp:comment_author>
			<wp:comment_author_email>frioux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.afoolishmanifesto.com</wp:comment_author_url>
			<wp:comment_author_IP>71.252.154.89</wp:comment_author_IP>
			<wp:comment_date>2010-07-10 15:24:08</wp:comment_date>
			<wp:comment_date_gmt>2010-07-10 15:24:08</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Excellent blog post!  I didn't realize that MSS didn't actually incur a runtime slowdown.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1279350445]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-10 15:24:08]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>A Method of Coming Clean</title>
		<link>https://twoshortplanks.wordpress.com/2010/07/17/clea/</link>
		<pubDate>Sat, 17 Jul 2010 07:06:57 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=208</guid>
		<description></description>
		<content:encoded><![CDATA[Since Perl has no inbuilt way of declaring if a subroutine is a function or a method, it's perfectly possible to mistakenly override a superclass method with an errant function import or accidentally call a function as a method call from outside the class it was declared in, violating encapsulation.  This is particularly problematic with generically named utility functions (or "language extensions") that are imported into your module's namespace from other modules.  In this blog entry I'm going to talk about what can be done to prevent this, and introduce you to the namespace::clean module that can automate this process.

<h2>An Example of the Problem</h2>

As way of example, let's write a simple class that looks up details about a user from their Facebook profile:

<pre><code>  package FacebookUser;
  use Moose;

  use LWP::Simple qw(get);
  use JSON::XS qw(decode_json);
  
  has api_access_token =&gt; ( isa =&gt; 'Str', is =&gt; 'ro', required =&gt; 1 );
  has username         =&gt; ( isa =&gt; 'Str', is =&gt; 'ro', required =&gt; 1 );
  has data             =&gt; ( isa =&gt; 'HashRef', is =&gt; 'ro', lazy_build =&gt; 1 );
  
  sub _build_data {
    my $self = shift;
    my $url = "https://graph.facebook.com/@{[ $self-&gt;username ]}?access_token=@{[ $self-&gt;api_access_token ]}";
    return decode_json(get($url));
  }
  
  sub get_firstname { return $_[0]-&gt;data-&gt;{first_name} }
  sub get_lastname  { return $_[0]-&gt;data-&gt;{first_name} }
  sub get_gender    { return $_[0]-&gt;data-&gt;{gender} }
  sub get_hometown  { return $_[0]-&gt;data-&gt;{hometown}{name} }</code></pre>

This is designed to be called like so:

<pre><code>  my $user = FacebookUser-&gt;new(
    api_access_token =&gt; $access_token,
    username =&gt; "2shortplanks",
  );
  say "Hello ".$user-&gt;get_firstname;</code></pre>

But what happens if someone calls it like so:

<pre><code>  my $user = FacebookUser-&gt;new(
    access_token =&gt; $access_token,
    username =&gt; "2shortplanks",
  );
  say "Hello ".$user-&gt;get('firstname');</code></pre>

Instead of a complaint about calling a non-existant <code>get</code> method we instead get the very cryptic error message:

<pre><code>  Can't use a FacebookUser object as a URI at /Library/Perl/5.10.0/HTTP/Request/Common.pm line 103</code></pre>

Why's this?  Because Perl tried to call the <code>get</code> function that we imported into our module from LWP::Simple as a method call, passing the invocant as the first argument instead of a URL. 

<h2>The obscured parent method problem</h2>

Bad error messages when we write stupid code are one thing.  Left over functions totally breaking our code in ways we don't expect is another.

Let's trying writing the same module using the Class::Accessor object system instead of using Moose.

<pre><code>  package FacebookUser;
  use base qw(Class::Accessor);

  # use Class::Accessor to create the api_access_token and username accessor methods
  __PACKAGE__-&gt;mk_accessors(qw(api_access_token username));

  use LWP::Simple qw(get);
  use JSON::XS qw(decode_json);

  sub data {
    my $self = shift;
    return $self-&gt;{data} ||= $self-&gt;_build_data;
  }

  sub _build_data {
    my $self = shift;
    my $url = "https://graph.facebook.com/@{[ $self-&gt;username ]}?access_token=@{[ $self-&gt;api_access_token ]}";
    return decode_json(get($url));
  }

  sub get_firstname { return $_[0]-&gt;data-&gt;{first_name} }
  sub get_lastname  { return $_[0]-&gt;data-&gt;{first_name} }
  sub get_gender    { return $_[0]-&gt;data-&gt;{gender} }
  sub get_hometown  { return $_[0]-&gt;data-&gt;{hometown}{name} }</code></pre>

This is designed to be called called like so:

<pre><code>  my $user = FacebookUser-&gt;new({
    access_token =&gt; $access_token,
    username =&gt; "2shortplanks",
  });
  say "Hello ".$user-&gt;get_firstname;</code></pre>

To our surprise, this doesn't work at all:

<pre><code>  Can't use a FacebookUser object as a URI at /Library/Perl/5.10.0/HTTP/Request/Common.pm line 103</code></pre>

That's the same error we got when we called <code>$user-&gt;get('firstname')</code> in our Moose example by mistake, but this time we're sure we're calling <code>$user-&gt;get_firstname</code>, so what gives?  How is the  <code>get</code> subroutine being called accidentally?  Let's run our example again with Carp::Always so we get a full stack trace out:

<pre><code>  bash$ perl -MCarp::Always example.pl 
  Can't use a FacebookUser object as a URI at /Library/Perl/5.10.0/HTTP/Request.pm line 70
  	HTTP::Request::uri('HTTP::Request=HASH(0x10091c5f8)', 'FacebookUser=HASH(0x10091c1f0)') called at /Library/Perl/5.10.0/HTTP/Request.pm line 16
  	HTTP::Request::new('HTTP::Request', 'GET', 'FacebookUser=HASH(0x10091c1f0)') called at /Library/Perl/5.10.0/HTTP/Request/Common.pm line 103
  	HTTP::Request::Common::_simple_req() called at /Library/Perl/5.10.0/HTTP/Request/Common.pm line 20
  	HTTP::Request::Common::GET('FacebookUser=HASH(0x10091c1f0)') called at /Library/Perl/5.10.0/LWP/UserAgent.pm line 386
  	LWP::UserAgent::get('LWP::UserAgent=HASH(0x10083c840)', 'FacebookUser=HASH(0x10091c1f0)') called at /Library/Perl/5.10.0/LWP/Simple.pm line 36
  	LWP::Simple::get('FacebookUser=HASH(0x10091c1f0)', 'username') called at /System/Library/Perl/Extras/5.10.0/Class/Accessor.pm line 393
  	Class::Accessor::__ANON__('FacebookUser=HASH(0x10091c1f0)') called at FacebookUser.pm line 18
  	FacebookUser::_build_data('FacebookUser=HASH(0x10091c1f0)') called at FacebookUser.pm line 13
  	FacebookUser::data('FacebookUser=HASH(0x10091c1f0)') called at FacebookUser.pm line 22
  	FacebookUser::get_firstname('FacebookUser=HASH(0x10091c1f0)') called at example.pl line 15</code></pre>
  
What's happened is that the <code>username</code> method that Class::Accessor created in our package is trying to call the <code>get</code> method in FacebookUser's Class::Accessor superclass but because we've imported a <code>get</code> function into FacebookUser that's being accidentally called as a method instead.  Ooops!

<h2>Solving this: Deleting the subroutine when done</h2>a

This problem can be solved in either code example by adding the following line to FacebookUser.pm to delete the <code>get</code> subroutine:

<pre><code>  delete $FacebookUser::{get};</code></pre>

Now a trying to call the get function as a method won't work, and we'll get a proper error message:

<pre><code>  say "Hello ".$user-&gt;get('firstname');
  Can't locate object method "get" via package "FacebookUser" at example.pl line 15</code></pre>

And with these modifications in both cases our <code>get_firstname</code> method call works as expected:

<pre><code>  say "Hello ".$user-&gt;get_firstname;
  Hello Mark</code></pre>

Those of you paying attention might be wondering how this possibly can still (if you'll pardon the pun) function.  After all, the the C<code>_build_data</code> method uses the <code>get</code> function to get the data from the facebook servers - and we just deleted the <code>get</code> function!

The answer to this conundrum relies on the fact that Perl is not an interpreted language, but a compiled one (one that is recompiled each time the program is started and has no executable or bytecode that is saved to disk.)  As such Perl has multiple phases of execution, with "compile time" (when the code is turned into bytecode) and "execution time" (when the code is actually running) happening at different times.  It's at the time the text it turned into bytecode that perl works out what function is what, and at compile time (after the symbol for the function has been deleted) that method calls occur and fail to find the errant <code>get</code>.

The same thing that means the following bit of code still works even though the <code>panic()</code> statement comes before the declaration of the function.

<pre><code>  panic();
  sub panic() { say "Don't panic Mr Mannering!"; return }</code></pre>

<h2>Doing this automatically</h2>

I'll be the first to admit that this syntax:

<pre><code>  delete $FacebookUser::{get};</code></pre>

Totally sucks.  It's ugly and completely unintelligible unless you happen to have learnt what it does beforehand.  Worse still, you need to remember to do it for each and every function you declare or import in your object and you might not even know all the functions that are imported if you rely on the default import list.  In other words, it involves a lot of bookkeeping and hence chances for mistakes.  Why don't we get the computer to automate this for us?

This is where the namespace::clean module from CPAN comes into use.  It's use is simple:

<pre><code>  use namespace::clean;</code></pre>

This deletes all function from your namespace that were declared or imported above the line that namespace::clean was <code>use</code>-ed on.  So, in our example we might like to do it after the lines where we've imported everything but before we start declaring methods and accessors:

<pre><code>  package FacebookUser;
  use base qw(Class::Accessor);

  use LWP::Simple qw(get);
  use JSON::XS qw(decode_json);

  use namespace::clean;

  # use Class::Accessor to create the api_access_token and username
  # accessor methods
  __PACKAGE__-&gt;mk_accessors(qw(api_access_token username));

  ...</code></pre>

Or with Moose:

<pre><code>  package FacebookUser;
  use Moose;

  use LWP::Simple qw(get);
  use JSON::XS qw(decode_json);
  
  use namespace::clean -except =&gt; 'meta';
  
  ...</code></pre>

In the later example we've told namespace::clean to keep the <code>meta</code> subroutine that <code>use Moose</code> imported for us - it's an important part of our object's framework.

<h2>Conclusion</h2>

The confusion between functions and methods in Perl is one that can cause a fair number of headaches for those not paying very close attention, and often requires us to have too much knowledge of the inner workings of our parent classes.  We can handle this problem manually, or the namespace::clean module on CPAN can help alleviate this pain.]]></content:encoded>
		<excerpt:encoded><![CDATA[Since Perl has no inbuilt way of declaring if a subroutine is a function or a method, it's perfectly possible to mistakenly override a superclass method with an errant function import or accidentally call a function as a method call from outside the class it was declared in, violating encapsulation.  This is particularly problematic with generically named utility functions (or "language extensions") that are imported into your module's namespace from other modules.  In this blog entry I'm going to talk about what can be done to prevent this, and introduce you to the namespace::clean module that can automate this process.]]></excerpt:encoded>
		<wp:post_id>208</wp:post_id>
		<wp:post_date>2010-07-17 07:06:57</wp:post_date>
		<wp:post_date_gmt>2010-07-17 07:06:57</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>clea</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>174</wp:comment_id>
			<wp:comment_author><![CDATA[fREW Schmidt]]></wp:comment_author>
			<wp:comment_author_email>frioux@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.afoolishmanifesto.com</wp:comment_author_url>
			<wp:comment_author_IP>71.252.154.89</wp:comment_author_IP>
			<wp:comment_date>2010-07-28 01:34:51</wp:comment_date>
			<wp:comment_date_gmt>2010-07-28 01:34:51</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Reason not to use namespace::autoclean: you aren't already using Moose.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1280280891]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-28 01:34:51]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>215</wp:comment_id>
			<wp:comment_author><![CDATA[claudio]]></wp:comment_author>
			<wp:comment_author_email>nxadm@apt-get.be</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>83.134.87.201</wp:comment_author_IP>
			<wp:comment_date>2011-01-01 21:32:28</wp:comment_date>
			<wp:comment_date_gmt>2011-01-01 21:32:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great. My first Perl lesson of 2011 ;) (I manage to notice this post 6 months late...).

C.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1536623</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1294043527]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294043528.2729";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1293917548.7161";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:5:"nxadm";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-01-01 21:32:28]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>149</wp:comment_id>
			<wp:comment_author><![CDATA[Caleb Cushing ( xenoterracide )]]></wp:comment_author>
			<wp:comment_author_email>xenoterracide@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://xenoterracide.blogspot.com</wp:comment_author_url>
			<wp:comment_author_IP>70.105.93.244</wp:comment_author_IP>
			<wp:comment_date>2010-07-17 09:13:24</wp:comment_date>
			<wp:comment_date_gmt>2010-07-17 09:13:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Awesome, I've been wondering what the purpose of this was where I've seen it. But why not use namespace::autoclean?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1279405552]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-17 09:13:24]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>155</wp:comment_id>
			<wp:comment_author><![CDATA[phaylon]]></wp:comment_author>
			<wp:comment_author_email>rs@474.at</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>93.232.167.158</wp:comment_author_IP>
			<wp:comment_date>2010-07-17 19:47:43</wp:comment_date>
			<wp:comment_date_gmt>2010-07-17 19:47:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You might want to add a note that when you're using Moose, you might as well use namespace::autoclean, which can in most cases auto-detect what to remove and what to leave in.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1279405521]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-17 19:47:43]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>153</wp:comment_id>
			<wp:comment_author><![CDATA[Kent Fredric]]></wp:comment_author>
			<wp:comment_author_email>kentfredric@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://blog.fox.geek.nz</wp:comment_author_url>
			<wp:comment_author_IP>203.97.126.225</wp:comment_author_IP>
			<wp:comment_date>2010-07-17 15:38:27</wp:comment_date>
			<wp:comment_date_gmt>2010-07-17 15:38:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You /could/ always just 'use namespace::autoclean;'

It has various benefits:

1. Doesn't matter where you put it relative to prior 'use' statements.

2. Leaves 'meta' in by default.

3. JustWorks with NoThinking.

4. Deep down it uses namespace::clean anyway.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1279405549]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2010-07-17 15:38:27]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Having a Brew</title>
		<link>https://twoshortplanks.wordpress.com/2011/01/01/perlbrew/</link>
		<pubDate>Sat, 01 Jan 2011 17:46:26 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=216</guid>
		<description></description>
		<content:encoded><![CDATA[Back in <a href="http://blog.twoshortplanks.com/2009/08/12/testing-perl-5-10-1-rc-1/">August in 2009</a> I wrote a post on how to install a release candidate of Perl.  Installing a custom perl in your home directory has since got a lot easier with perlbrew, and in this blog post I'll show the five commands needed to get a new perl onto your system.

<h2>A new perl in five commands</h2>

<p>First I need to setup perlbrew.
This takes three commands (the latter two will be different on your system, but don&#039;t worry, in each case the previous command tells you what to do when you run it.)</p>

<pre>   curl -L http://xrl.us/perlbrewinstall | bash
   /Users/mark/perl5/perlbrew/bin/perlbrew init
   echo &#062;&#062;~/.bashrc &#034;source /Users/mark/perl5/perlbrew/etc/bashrc&#034;</pre>

<p>Now to install and switch to the latest development version of perl I only need type:</p>

<pre>   perlbrew install perl-5.13.8
   perlbrew switch perl-5.13.8</pre>

<p>And to install and switch to the latest stable perl I only need to type:</p>

<pre>   perlbrew install perl-5.12.2
   perlbrew switch perl-5.12.2</pre>

<h2>Again, in excruciating detail</h2>

<p>If you&#039;re anything like me, you&#039;ve seen this kind of quickfire instructions on the web before and it leaves you with questions. Wouldn&#039;t it be nice if someone posted a complete dump of exactly what was going on when these commands are run? Yes, it would be...</p>

<p>Let&#039;s start from the top again. First, download and install perlbrew with the one liner:</p>

<pre>  travis-4:~ mark$ curl -L http://xrl.us/perlbrewinstall | bash</pre>

<p>Off it goes:</p>

<pre>    % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                   Dload  Upload   Total   Spent    Left  Speed
  102   306  102   306    0     0    236      0  0:00:01  0:00:01 --:--:--  2756

  ## Download the latest perlbrew

  ## Installing
  The perlbrew is installed as:

      /Users/mark/perl5/perlbrew/bin/perlbrew

  You may trash the downloaded /private/tmp/perlbrew from now on.

  Next, if this is the first time you install perlbrew, run:

      /Users/mark/perl5/perlbrew/bin/perlbrew init

  And follow the instruction on screen.

  ## Done. (automatically removes downloaded /tmp/perlbrew)</pre>

<p>We&#039;d better follow its instructions, eh?</p>

<pre>  travis-4:~ mark$ /Users/mark/perl5/perlbrew/bin/perlbrew init</pre>

<p>This prints out some more stuff, including an instruction to modify our path:</p>

<pre>  Perlbrew environment initiated, required directories are created under

      /Users/mark/perl5/perlbrew

  Well-done! Congratulations! Please add the following line to the end
  of your ~/.bashrc

      source /Users/mark/perl5/perlbrew/etc/bashrc

  After that, exit this shell, start a new one, and install some fresh
  perls:

      perlbrew install perl-5.12.1
      perlbrew install perl-5.10.1

  For further instructions, simply run:

      perlbrew

  The default help messages will popup and tell you what to do!

  Enjoy perlbrew at $HOME!!</pre>

<p>Okay, let&#039;s modify our path to contain the instructions then:</p>

<pre>  travis-4:~ mark$ echo &#062;&#062;~/.bashrc &#034;source /Users/mark/perl5/perlbrew/etc/bashrc&#034;</pre>

<p>Now we need to restart bash. The easiest way to do that is to close the current terminal and open a new one (and stops us getting confused.) After this, installing a new Perl is a doddle, with just a single command.</p>

<pre>  travis-4:~ mark$ perlbrew install perl-5.13.8</pre>

<p>And it does all the hard work for us:</p>

<pre>  Attempting to load conf from /Users/mark/perl5/perlbrew/Conf.pm
  Fetching perl-5.13.8 as /Users/mark/perl5/perlbrew/dists/perl-5.13.8.tar.gz
  Installing perl-5.13.8 into /Users/mark/perl5/perlbrew/perls/perl-5.13.8
  This could take a while. You can run the following command on another shell to track the status:

    tail -f /Users/mark/perl5/perlbrew/build.log

  (cd /Users/mark/perl5/perlbrew/build; tar xzf /Users/mark/perl5/perlbrew/dists/perl-5.13.8.tar.gz;cd /Users/mark/perl5/perlbrew/build/perl-5.13.8;rm -f config.sh Policy.sh;sh Configure -de &#039;-Dprefix=/Users/mark/perl5/perlbrew/perls/perl-5.13.8&#039; &#039;-Dusedevel&#039;;make;make test &#038;&#038; make install) &#062;&#062; &#039;/Users/mark/perl5/perlbrew/build.log&#039; 2&#062;&#038;1 
  Installed perl-5.13.8 as perl-5.13.8 successfully. Run the following command to switch to it.

    perlbrew switch perl-5.13.8</pre>

<p>So, as it says, we can switch which perl we&#039;re using just by using the &#034;perlbrew switch&#034; command:</p>

<pre>  travis-4:~ mark$ perl -v

  This is perl, v5.10.0 built for darwin-thread-multi-2level
  (with 2 registered patches, see perl -V for more detail)

  Copyright 1987-2007, Larry Wall

  Perl may be copied only under the terms of either the Artistic License or the
  GNU General Public License, which may be found in the Perl 5 source kit.

  Complete documentation for Perl, including FAQ lists, should be found on
  this system using &#034;man perl&#034; or &#034;perldoc perl&#034;.  If you have access to the
  Internet, point your browser at http://www.perl.org/, the Perl Home Page.

  travis-4:~ mark$ perlbrew switch perl-5.13.8
  travis-4:~ mark$ perl -v

  This is perl 5, version 13, subversion 8 (v5.13.8) built for darwin-2level

  Copyright 1987-2010, Larry Wall

  Perl may be copied only under the terms of either the Artistic License or the
  GNU General Public License, which may be found in the Perl 5 source kit.

  Complete documentation for Perl, including FAQ lists, should be found on
  this system using &#034;man perl&#034; or &#034;perldoc perl&#034;.  If you have access to the
  Internet, point your browser at http://www.perl.org/, the Perl Home Page.</pre>

<p>We can switch back to the system perl with the &#034;perlbrew off&#034; command:</p>

<pre>  travis-4:~ mark$ perlbrew off
  travis-4:~ mark$ perl -v

  This is perl, v5.10.0 built for darwin-thread-multi-2level
  (with 2 registered patches, see perl -V for more detail)

  Copyright 1987-2007, Larry Wall

  Perl may be copied only under the terms of either the Artistic License or the
  GNU General Public License, which may be found in the Perl 5 source kit.

  Complete documentation for Perl, including FAQ lists, should be found on
  this system using &#034;man perl&#034; or &#034;perldoc perl&#034;.  If you have access to the
  Internet, point your browser at http://www.perl.org/, the Perl Home Page.</pre>

<p>And that&#039;s about it. Very simple!</p>

]]></content:encoded>
		<excerpt:encoded><![CDATA[Back in <a href="http://blog.twoshortplanks.com/2009/08/12/testing-perl-5-10-1-rc-1/">August in 2009</a> I wrote a post on how to install a release candidate of Perl.  Installing a custom perl in your home directory has since got a lot easier with perlbrew, and in this blog post I'll show the five commands needed to get a new perl onto your system.]]></excerpt:encoded>
		<wp:post_id>216</wp:post_id>
		<wp:post_date>2011-01-01 17:46:26</wp:post_date>
		<wp:post_date_gmt>2011-01-01 17:46:26</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>perlbrew</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_94db03882a1e407f92f1137440cca2c8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_3a3699bd3c7e804e5474e3e9e76a42d6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bcddc10ccd9374b43bc1ccd9da552f7d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7947a9c3068839b765f8a5c7955358b9</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7ad31deb048987b81553346ab785158a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c09810692d1f00b4a3c34590ef3325b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_547b72c4982fafd25e638ed3268a8aee</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The PSGI/Mac OS X Dance</title>
		<link>https://twoshortplanks.wordpress.com/2011/01/07/psgimacos/</link>
		<pubDate>Fri, 07 Jan 2011 13:16:40 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=226</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post I'll show you how to get a PSGI web application to start up and listen on a port when you boot your Mac OS X machine.  To do this, I'll be quickly covering the plackup command line utility and then delving into the basics of OS X's launchd plist configuration files.

<h2>Our example PSGI application</h2>

The first step is to create a PSGI compatible application.  For the purpose of this blog post, let's just use the example application from the Dancer framework's documentation:

<pre>#!/usr/bin/perl

use strict;
use warnings;

use Dancer;

get '/hello/:name' =&gt; sub {
   return "Why, hello there " . params-&gt;{name};
};

dance;</pre>

We should probably check from the command line that this works as we expect before we go any further.

<pre>bash$ perl hellow.pl 
&gt;&gt; Dancer server 5758 listening on http://0.0.0.0:3000
== Entering the development dance floor ...</pre>

And then in another terminal:

<pre>bash$ lwp-request http://127.0.0.1:3000/hello/world
Why, hello there world</pre>

Of course, we could have just as easily used a Mojolicious or Catalyst application here!  But that's not the point....in just a few lines of code we've got a PSGI compatible web application written and ready to host.

<h2>Running this with a PSGI webserver and plackup</h2>

The PSGI standard is essentially a compatibility layer between Perl web framework and Perl webservers;  Without changing a line of code you can switch one webserver to another, and likewise our webservers can be written to support any web framework without needing to add further code for each framework.

In this example I'm going to use a server called Twiggy as my PGSI compliant webserver, which is a module that can be installed from the CPAN in the normal manner.  I've chosen it because it's fast and has a low memory footprint (the latter being quite important if I don't want to use up too much of my desktop's RAM.)  The only drawback with Twiggy is that my application can't use too much CPU or block on IO in a non-any-event compatible way without holding up the next request.  For me this doesn't matter to me because I'm the only one going to be using my machine!  Of course, it's a simple configuration variable change to switch to another PSGI compatible server like Starman that handles preforking for us.

To start our Dancer application with Twiggy we just need to use the <code>plackup</code> command:

<pre>bash$ plackup -s Twiggy -p 4077 -a dancer.pl 
Twiggy: Accepting connections at http://0.0.0.0:4077/</pre>

And then again, in another terminal:

<pre>bash$ lwp-request http://127.0.0.1:4077/hello/world
Why, hello there world</pre>

<h2>Configuring plackup to run on boot on a Mac</h2>

Mac OS X uses a process called <code>launchd</code> to manage services, replacing the more traditional init.d system you'd find on a typical linux box.

To define a new service we need to create a <em>plist</em> file (a correctly formatted xml file.)  The standard place for plists for deamons launched on boot is <code>/System/Library/LaunchDaemons</code>;  Mac OS X will load all the plist files in this directory when the machine starts up.

Each of these files need a unique name, one that will be guaranteed not clash with any other service that Apple or third parties will create in the future.  To ensure this they use the same "reverse-domain-name" scheme that Java uses for its class names: You start the file name with your domain name in reverse.  Today I'm going to create a file called <code>com.twoshortplanks.hellow.plist</code>, which I know is unique because I control the twoshortplanks.com domain name:

<pre>&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;
&lt;!DOCTYPE plist PUBLIC &quot;-//Apple//DTD PLIST 1.0//EN&quot; &quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&quot;&gt;
&lt;plist version=&quot;1.0&quot;&gt;
&lt;dict&gt;
        &lt;key&gt;Disabled&lt;/key&gt;
        &lt;false/&gt;
        &lt;key&gt;Label&lt;/key&gt;
        &lt;string&gt;com.twoshortplanks.hellow&lt;/string&gt;
        &lt;key&gt;ProgramArguments&lt;/key&gt;
        &lt;array&gt;
                &lt;string&gt;/usr/local/bin/plackup&lt;/string&gt;
                &lt;string&gt;-a&lt;/string&gt;
                &lt;string&gt;Twiggy&lt;/string&gt;
                &lt;string&gt;-p&lt;/string&gt;
                &lt;string&gt;4077&lt;/string&gt;
                &lt;string&gt;-a&lt;/string&gt;
                &lt;string&gt;/usr/local/hellow/hellow.pl&lt;/string&gt;
        &lt;/array&gt;
        &lt;key&gt;OnDemand&lt;/key&gt;
        &lt;false/&gt;
&lt;/dict&gt;
&lt;/plist&gt;</pre>

So, this is fairly straight forward, with the plist containing alternating keys and data structures.  Since we want the server to start up straight away on boot both the <code>Disabled</code> and <code>OnDemand</code> keys need to be set to false.  <code>Label</code> needs to be set to the same name we used in the filename.  Finally the slightly confusingly named <code>ProgramArguments</code> needs to be set to contain <strong>both</strong> the name of the executable and its arguments.  This is exactly as we would have passed it to the shell, but with each part that was separated by spaces in its own <code>&lt;string&gt;</code> tag.  You'll note that we've also used absolute paths here because, obviously, when this is run by launchd it won't have either our current PATH or current working directory.  (It's also worth noting at this point, just incase you're using this example to write something to run a daemon other than plackup, that the command should run in the <em>foreground</em> and not fork itself off into a daemon.  We're not passing the options to plackup to do this, so that's all good.)

The first thing we should probably do after writing the plist check we got the plist syntax right and there are no typos (especially as launchd gives the world's most unhelpful error messages.)  The system-supplied plutil utility comes with a lint mode that can help here:

<pre>bash$ plutil -lint com.twoshortplanks.hellow.plist
com.twoshortplanks.hellow.plist: OK</pre>

Once we've done that we can force Mac OS X to load the daemon settings right away (without having to reboot the computer):

<pre>bash$ sudo launchctl load /System/Library/LaunchDaemons/com.twoshortplanks.hellow.plist</pre>

And now we can check it's loaded:

<pre>bash$ sudo launchctl list | grep hellow
2074    -    com.twoshortplanks.hellow</pre>

And we can use it as a webserver!

<pre>bash$ lwp-request http://127.0.0.1:4077/hello/world
Why, hello there world</pre>

Great! It's running!  Now what?  Well, assuming we're not going to be using plackup's <code>--reload</code> option (which is a little too complicated to go into now) we need to know how to restart the server whenever we make changes.  The simpliest thing is to unload and reload it again:

<pre>bash$ sudo launchctl unload /System/Library/LaunchDaemons/com.twoshortplanks.hellow.plist</pre>
<pre>bash$ sudo launchctl load /System/Library/LaunchDaemons/com.twoshortplanks.hellow.plist</pre>

<h2>Conclusion</h2>

With PGSI it's possible to have a low impact custom webserver running on your local Mac without much work at all.]]></content:encoded>
		<excerpt:encoded><![CDATA[In this blog post I'll show you how to get a PSGI web application to start up and listen on a port when you boot your Mac OS X machine.  To do this, I'll be quickly covering the plackup command line utility and then delving into the basics of OS X's launchd plist configuration files.]]></excerpt:encoded>
		<wp:post_id>226</wp:post_id>
		<wp:post_date>2011-01-07 13:16:40</wp:post_date>
		<wp:post_date_gmt>2011-01-07 13:16:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>psgimacos</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>222</wp:comment_id>
			<wp:comment_author><![CDATA[Pedro Melo]]></wp:comment_author>
			<wp:comment_author_email>melo@simplicidade.org</wp:comment_author_email>
			<wp:comment_author_url>http://www.simplicidade.org/</wp:comment_author_url>
			<wp:comment_author_IP>2.82.230.102</wp:comment_author_IP>
			<wp:comment_date>2011-01-07 15:56:00</wp:comment_date>
			<wp:comment_date_gmt>2011-01-07 15:56:00</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Assuming that you configured your launchd plist to restart the app if it exits, you can add a special URL that will just call exit(2).

Instant reload, just a GET away.

I use this for some developer environments with great success. My Catalyst action looks like this:


sub exit : Local {
  my ($self, $c) = @_;

  return $c-&gt;res-&gt;redirect('/') unless $c-&gt;debug;
  print STDERR "Exiting server, per user request to /exit\n";
  exit(5);
}

I use 5 as signal for the wrapper script (in this case) that this is a expected exit, not an abnormal one.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1294415760]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1294415760.4637";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-01-07 15:56:00]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Indirect Method Calls Must die();</title>
		<link>https://twoshortplanks.wordpress.com/2011/01/14/indirect-method-calls-must-die/</link>
		<pubDate>Fri, 14 Jan 2011 18:53:48 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=239</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post I'll talk about the problems that I have with Perl's indirect method call syntax, both stylistically and pragmatically, and what you can do to prohibit its use.

<h2>Pop Quiz, Hotshot</h2>

What does the following Perl code do?

<pre>save $myobject;</pre>

Is it:

<ul>
  <li>A <em>function call</em> to the <code>save</code> function, passing <code>$myobject</code> as the argument, i.e. the same as
<pre>save($myobject)</pre></li>
  <li>An <em>indirect method call</em>, calling the <code>save</code> method on <code>$myobject</code>, i.e. the same as
<pre>$myobject-&gt;save()</pre></li>
</ul>

The answer is complicated.  It depends entirely if a function called <code>save</code> is in scope (either declared above or imported from another module with a use statement) when Perl is compiling the code, in which case it'll be the former rather than the latter.

Does anyone else find this confusing?  I know I sure do.

<h2>Just say no</h2>

At work we have a simple rule:  You're not allowed to write code that uses indirect method calls.  If you want to make a method call, our house coding style demands you write it explicitly using the normal direct method call.  That way if you see the above code you <em>know</em> that it's a function call.

The problem is that it's still entirely possible to use the indirect method call completely accidentally when you intended it to be a function call.  Imagine that you've written the code and forgotten to <code>use ObjectSaver qw(save);</code> at the top of your module and import the <code>save()</code> function.  Perl will blindly go ahead an compile your code as an indirect method call on <code>$myobject</code>!

The real issue with this is that this won't result in an error straight away - the problem will only come to light when the code is actually executed and the non-existent <code>save()</code> method is called (or worse, <code>$myobject</code> really might have a <code>save()</code> method that you didn't mean to call..)  If the code you're writing is one of those hard-to-reach and therefore hard-to-test codepaths (e.g. obscure error handling) there's a chance you could ship broken code to live without noticing it.

<h2>A Solution: The no indirect pragma</h2>

The solution is to use <a href="http://search.cpan.org/dist/indirect/lib/indirect.pm">the indirect pragma from the CPAN</a>.  This pragma allows you to get perl to throw an exception whenever it encounters something it would normally compile into an indirect method call straight away.

Getting it to do its thing is simple:

<pre>no indirect ':fatal';</pre>

And that's it.  Now:

<pre>bash$ perl
use strict;
use warnings;
no indirect ':fatal';

my $myobject = bless {}, "SomeClass";
save $myobject;
Indirect call of method "save" on object "$myobject" at - line 6.
bash$</pre>

Hooray!]]></content:encoded>
		<excerpt:encoded><![CDATA[In this blog post I'll talk about the problems that I have with Perl's indirect method call syntax, both stylistically and pragmatically, and what you can do to prohibit its use.]]></excerpt:encoded>
		<wp:post_id>239</wp:post_id>
		<wp:post_date>2011-01-14 18:53:48</wp:post_date>
		<wp:post_date_gmt>2011-01-14 18:53:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>indirect-method-calls-must-die</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_db46d350089b6a84728723e89135222e</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_77842756692c4fca9ae1e723c7fe31f8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f1ae6bc341dfc502b2d74a9ad703837d</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_1ce9b8c1bc56ed8aeced76c7c113c475</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5250ce7f1245f2e3cbe7015fb1cc5e92</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_72e8d0347fb8ae474c34e892516512a8</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f374ef6b2ea3103a092991aba5bc1926</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_79dee91cf74ada1ce8ddf6cd423da2a6</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_634896f7965e2db9c40b0c933d15b46a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9c21a5a77196902366fc8317431de3db</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Support your Local Library</title>
		<link>https://twoshortplanks.wordpress.com/2011/01/22/findbin/</link>
		<pubDate>Sat, 22 Jan 2011 08:58:22 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=247</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post I talk about the first step of modularising code from simple scripts. I'm going to cover extracting routines from the scripts into a shared module in the local file system and using FindBin to locate and load that module from within the scripts.

<h2>Iterative Development</h2>

We've all written small one off scripts that have grown over time to become more than what they originally were intended to be, with new features and functionality being grafted on as time goes by.  The code gets more and more complex and it's hard to maintain so much code in a simple script.  Often around the same time we realise that we need some of the functionality of this script in another script.  We could cut and paste, but this will end up in a maintenance nightmare with the same code being repeated in any number of scripts.

The obvious solution to both issues is to modularise:  To move this code into a separate module and include that module at the start of our various scripts.

Now, lots of Perl programmers will recommend converting your code straight into a distribution (i.e. packaging your code up with a Makefile.PL, tests, etc.)  However: This is a big step and involves a lot of work, both upfront and whenever you need to change the code (every time you make a change to a distribution you have to reinstall it.)  There's an intermediate step we can take first: We can move the code into a local module in same directory.  This is a lot easier, and any changes we make to the code is 'live'. It's a lot closer to the development we have right now, just in more than one file.

<h2>A worked example</h2>

So, let's start with a simple script:

<pre>#!/usr/bin/p
use strict;
use warnings;
use DBI;

my $dbh = DBI-&gt;connect(
  "DBI:mysql:database=live;host=livedb.twoshortplanks.com",
  "admin",
  "opensaysme",
  { RaiseError =&gt; 1 }
);

...</pre>

We'd like to avoid encoding our database username and password at the start of each admin script we write, so we'd like to turn this into code to be loaded from a module.  Let's start by turning the code we want to extract into a function

<pre>#!/usr/bin/perl

use strict;
use warnings;
use DBI;

sub connect_to_live_db {
  return DBI-&gt;connect(
    "DBI:mysql:database=live;host=livedb.twoshortplanks.com",
    "admin",
    "opensaysme",
    { RaiseError =&gt; 1 }
  );
}

my $dbh = connect_to_live_db();

...</pre>

Now, let's move this code into a module called TwoShortPlanksUtils which we store in a file "TwoShortPlanksUtil.pm" in the same directory as our admin scripts.  We make the code avaible to any module using our module by  using Exporter to export the function back into scripts that ask for it in the usual fashion.

<pre>package TwoShortPlanksUtils;

use strict;
use warnings;

use base qw(Exporter);
our @EXPORT_OK;

sub connect_to_live_db {
  return DBI-&gt;connect(
    "DBI:mysql:database=live;host=livedb.twoshortplanks.com",
    "admin",
    "opensaysme",
    { RaiseError =&gt; 1 }
  );
}
push @EXPORT_OK,"connect_to_live_db";

1;</pre>

Now let's use it in our script, just like we would as if we'd created a full distribution and installed it.

<pre>#!/usr/bin/perl

use strict;
use warnings;

use TwoShortPlanksUtil qw(connect_to_live_db);
my $dbh = connect_to_live_db();</pre>

Hooray.  When we test if the script everything works...as long as we run it from the correct directory that is.  In order for this to work the directory TwoShortPlanksUtil.pm is in must be in <code>@INC</code>, the list of places Perl will look for modules to load.  This normally contains the current working directory, so if you execute your script from the command line from the directory that contains it it works.  However, if your script lives in your ~/bin directory (or for that matter anywhere else in your <code>$PATH</code>) and you expect to be able to execute it from an arbitrary directory then this won't work at all.

What we need to do is modify our script's <code>@INC</code> to always contain the directory the script is located in.  The magic incarnation to insert into our script is:

<pre>use FindBin;
use lib $FindBin::Bin;</pre>

When you load the FindBin module it examines the <code>$0</code> variable (which contains the current executing script path) and the current working directory and works out the path to the directory containing the script and stores it in the <code>$FindBin::Bin</code> variable, which it exports.  By passing this to the <code>lib</code> pragma we include that directory in <code>@INC</code>.

The boilerplate at the start of our code now looks like:

<pre>#!/usr/bin/perl

use strict;
use warnings;

use FindBin;
use lib $FindBin::Bin;

use TwoShortPlanksUtil qw(connect_to_live_db);
my $dbh = connect_to_live_db();</pre>

And this now works no matter where we execute our script from!]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>247</wp:post_id>
		<wp:post_date>2011-01-22 08:58:22</wp:post_date>
		<wp:post_date_gmt>2011-01-22 08:58:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>findbin</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>A Rose By Any Other Name</title>
		<link>https://twoshortplanks.wordpress.com/2011/01/30/hostify/</link>
		<pubDate>Sun, 30 Jan 2011 06:36:34 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=251</guid>
		<description></description>
		<content:encoded><![CDATA[In this blog post I'm going to talk about writing a Perl script to automatically change entries in my local /etc/hosts file, and I'll digress into brief discussions on Net::DNS, how to edit files in place using Tie::File, and the sneaky <code>-s</code> switch for dumb command line argument parsing.

<h2>The Problem I'm Trying to Solve</h2>

I'll just come out and say it:  I don't like using the default DNS servers assigned to my laptop by DHCP servers.  In the case of my home network I get the buggy DNS server from my ISP that doesn't work as often as I'd like.  In the case of my work network I often get hostnames resolved to internal IP addresses for servers where (because of my particular job) I really want the public ones.  To avoid the issue completely I hard code my DNS to always point at Google's free DNS service on <code>8.8.8.8</code>.  There's just one problem with this:

<pre>bash$ ssh sandbox1.dev.example.priv
ssh: Could not resolve hostname sandbox1.dev.example.prvi: nodename nor servname provided, or not known</pre>

Ooops! Entries for my development servers only exists on our local work DNS server and if I'm not using it I can't find any of them!

Luckily my Mac (and other unix like boxes) allows me to override DNS servers using the <code>/etc/hosts</code> file (Windows has something similar too.)  In its simplest form this file contains one override per line, an IP address followed by one or more hostnames it overrides.  For example:

   10.0.0.1 sandbox1.dev.example.priv
   10.0.0.2 sandbox2.dev.example.priv
   10.0.1.1 db.dev.example.priv

And so on.  My kludgy soliton is for each development server that I want to use to put a line in <code>/etc/hosts</code> so I don't have to remember it's IP address (and more importantly, so I can use the addresses in my browser and still have it map to the right virtual host on the webserver.)  However, doing this by hand gets old <em>real</em> quick.  Running <code>dig</code> against the company DNS server's IP address, copying and pasting the resolved IP address into the hosts file using a text editor is something that takes the better part of a minute, is prone to mistakes, and completely interrupts my train of thought.  What I want is a simple command to automate the whole process of adding or updating an entry like this:

<pre>bash$ hostify sandbox.dev.example.com</pre>

And maybe I could have it update all the entries that it knows about so they don't get out of date whenever I type:

<pre>bash$ hostify -r</pre>

Right! Time to write some Perl.

<h2>Using Net::DNS to do DNS lookups</h2>

You'd think that dealing with the complexities of DNS would be the hard bit, but looking up domain names with Perl is actually really trivial.  We can almost copy the example out of the perldoc for <a href="http://search.cpan.org/dist/Net-DNS">Net::DNS</a>:

<pre>
my $res = Net::DNS::Resolver-&gt;new(
  nameservers =&gt; [qw(10.5.0.1)],
);

my $query = $res-&gt;search($hostname);

if ($query) {
  foreach my $rr ($query-&gt;answer) {
    next unless $rr-&gt;type eq "A";
    say "Found an A record: ".$rr-&gt;address;
  }
}
</pre>

And that's about all there is to it.  Now for the hard bit...

<h2>Using Tie::File to edit a file in place</h2>

We either need to add an entry to our existing <code>/etc/hosts</code> file or update one or more entries in the middle of the file.  However, if we were to use the standard <code>open</code> function that Perl provides we're going to quickly run into a problem:  The open (and sysopen) syntax is optomised for either appending data onto the end of the file, or in a pinch overwriting byte for byte in the middle of the file.  What it won't do is automatically handle the case where we want to replace something in the middle of the file with more or fewer bytes.  We end up having to manually read in and echo out the tail end of the file which results in us having to write a lot of complex "bookkeeping" code we'd rather not concern ourselves with.

One of the easiest ways in Perl to edit a file in place without worry about these niggly details is to instead use a core module called <a href="http://search.cpan.org/dist/Tie-File">Tie::File</a>.  This module uses a magic feature in Perl called <em>tieing</em> where some functionality is <em>tied</em> to a Perl data structure - any attempts to read from or modify the tied data structure cause Perl code to be executed to do something clever instead of modifying a dumb chunk of memory.  In the case of Tie::File each element in the array that it ties maps to a line in the file on disk - reading from the array reads in lines from the file, and writing to the array writes out to disk.

So, for example, to <em>tie</em> our array to the hosts file, we just need to use the special <code>tie</code> syntax:

<pre>tie my @file, 'Tie::File', "/etc/hosts"
  or die "Can't open /etc/hosts: $!";</pre>

Now altering a line in the middle of our file is simple:

<pre># alter the 21st line in the file
$file[20] = "10.0.69.1 filestore.example.priv";</pre>

Tie::File seamlessly handles all the complicated bits about moving the stuff after the line we've just altered.  Perfect!

<h2>Rudimentary argument passing with <code>-s</code></h2>

My script needs to be able to only accept one simple command line option to tell it to also update all hostnames it's previously inserted.  Because I'm lazy, I didn't even use a module to do this but rather used the simple <code>-s</code> command line option to tell perl to shove anything it sees on the command line starting with a dash into a similarly named variable in the main namespace:

<pre>#!/usr/bin/env perl -s
if ($r) { print "Someone called us with -r\n" }</pre>

Of course, with strictures and warnings on I have to write something a little more complex:

<pre>#!/usr/bin/env perl -s
use 5.12.0;
use warnings;
if ($::r &amp;&amp; $::r) { say "Someone called us with -r" }</pre>

I need to use <code>$::r</code> not <code>$r</code> because the former, being a fully qualified variable, doesn't need predeclaration when running under <code>use strict</code> (which is implicitly turned on when I asked to <code>use 5.12.0</code>.)   I also need to use <code>$::r &amp;&amp; $::r</code> not <code>$::r</code> because otherwise warnings would notice that the variable was only being used once in the entire run of the code and emit a warning (this is one of the rare cases where this isn't a bug - the variable really does get its value without ever being set by Perl code.)

<h2>The Complete Script</h2>

And here's the complete finished script.

<pre>#!/usr/bin/env perl -s

use 5.12.0;
use warnings;

use Net::DNS;
use Tie::File;

# look at the file
tie my @file, 'Tie::File', "/etc/hosts"
  or die "Can't open /etc/hosts: $!";

# did someone want to update all the cached entires?
if ($::r &amp;&amp; $::r) {
  my $found = 0;
  foreach (@file) {
    # skip down until the comment in my /etc/hosts that
    # states that "cached entries are below this point"
    next unless $found ||= m/cached entries/; 

    # then replace each host entry
    s{\A\d+\.\d+\.\d+\.\d+\s+(?&lt;host&gt;.*)\z}{
       dns_lookup($+{host}) . " $+{host}";
     }e;
  }
  exit unless @ARGV;
}

my $host = shift // die "No hostname supplied\n";
my $ip = dns_lookup( $host );

# look for an existing entry and replace it
foreach (@file) {
  exit if s/\A\d+\.\d+\.\d+\.\d+\s+\Q$host\E\z/$ip $host/;
}

# not found?  Add it to the end
push @file, "$ip $host";

########################################################################

sub dns_lookup {
  my $hostname = shift;

  my $res = Net::DNS::Resolver-&gt;new(
    nameservers =&gt; [qw(10.5.0.1)],
  );

  my $query = $res-&gt;search($hostname);
  
  if ($query) {
    foreach my $rr ($query-&gt;answer) {
      next unless $rr-&gt;type eq "A";
      return $rr-&gt;address;
    }
    die "No A record for $hostname";
  }

  die "query for $hostname failed: ", $res-&gt;errorstring;
}</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[In this blog post I'm going to talk about writing a Perl script to automatically change entries in my local /etc/hosts file, and I'll digress into brief discussions on Net::DNS, how to edit files in place using Tie::File, and the sneaky <code>-s</code> switch for dumb command line argument parsing.
]]></excerpt:encoded>
		<wp:post_id>251</wp:post_id>
		<wp:post_date>2011-01-30 06:36:34</wp:post_date>
		<wp:post_date_gmt>2011-01-30 06:36:34</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>hostify</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[251]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>246</wp:comment_id>
			<wp:comment_author><![CDATA[Andrew Rodland]]></wp:comment_author>
			<wp:comment_author_email>andrew@cleverdomain.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>98.226.200.27</wp:comment_author_IP>
			<wp:comment_date>2011-01-30 08:38:22</wp:comment_date>
			<wp:comment_date_gmt>2011-01-30 08:38:22</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I like Perl as much as the next guy, but there's actually a much better solution for this: dnsmasq! All you need is a config with some lines that look like

    server=/example.priv/work.dns.ip.here
    server=8.8.8.8

and then instead of overriding your DNS server to 8.8.8.8, you override it to 127.0.0.1 (or perhaps your router IP, if you run dnsmasq on your router). It's simple, it's flexible, it adds DNS caching, it's pretty much wonderful in every way. I use it as part of my VPN setup. If my VPN goes up or down, I simply restart my dnsmasq with a config file that does or doesn't include entries to contact my work DNS server for private names there :)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296376703.5146";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307350238]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307350238.7505";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-01-30 08:38:22]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>249</wp:comment_id>
			<wp:comment_author><![CDATA[Matthew Musgrove]]></wp:comment_author>
			<wp:comment_author_email>mr.muskrat@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>75.17.253.213</wp:comment_author_IP>
			<wp:comment_date>2011-02-01 17:15:40</wp:comment_date>
			<wp:comment_date_gmt>2011-02-01 17:15:40</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I don't want to downplay what you've done here because I do something similar on closed networks.

I do want to let you know that you can chain DNS servers. So you don't have to replace your corporate DNS with Google DNS; you can use them both (unless your OS round-robins the requests). 

Just make use that Google DNS is first in the list and you'll get public IPs from Google and private IPs from the corporate DNS.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1296580540.9835";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307350137]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307350137.3931";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307350662.7485";s:7:"message";s:42:"2shortplanks reported this comment as spam";s:5:"event";s:11:"report-spam";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_user</wp:meta_key>
				<wp:meta_value><![CDATA[2shortplanks]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1307375142.765";s:7:"message";s:46:"2shortplanks reported this comment as not spam";s:5:"event";s:10:"report-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-02-01 17:15:40]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>290</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 08:50:15</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 08:50:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That only works if public DNS wouldn't override the private DNS which ours does (i.e. top-secret-project-admin-server.mycompany.com isn't externally visible, but would resolve by *.mycompany.com to the public website)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>249</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307350216]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307350217.8223";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 08:50:15]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>291</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 08:56:45</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 08:56:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting, something I should look at.  My solution evolved from manually entering things in hosts from DNS and wanting to automate it.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>246</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307350606]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307350606.9044";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 08:56:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Unexceptional Exceptions in Perl 5.14</title>
		<link>https://twoshortplanks.wordpress.com/2011/06/06/unexceptional-exceptions-in-perl-5-14/</link>
		<pubDate>Mon, 06 Jun 2011 08:37:54 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=260</guid>
		<description></description>
		<content:encoded><![CDATA[There's a lot to love about Perl 5.14, but one of the best changes is a subtle one:  Native exception handling is now reliable.

Perl's native exception syntax uses an eval block as the traditional "try" block, and requires checking <code>$@</code> to see if it contains an exception.

<code><pre>  eval {
    ...; # do something that might throw an exception
  };
  
  if ($@) {
    ...; # handle exception here
  }</pre></code>

Just like other languages code in the block is evaluated until an exception is thrown and then control jumps out of the block.  Perl doesn't have a native <code>catch</code> syntax however - it simply puts the exception into <code>$@</code> where you can check it with a standard if statement.

Herein lies the problem in all versions of Perl prior to 5.14.  Prior to 5.14 <code>$@</code> is assigned and then the block is immediately exited;  With 5.14 the block is immediately exited and then <code>$@</code> is assigned.  A subtle, but important difference.

Perl's improvised catch mechanism <em>relies</em> on <code>eval</code> undefining <code>$@</code> if no exception occurred (so the <code>if</code> block won't execute.)  Each time Perl executes an eval therefore it must undefine $@.  Prior to 5.14 this interacts <em>badly</em> with object destructors.

<code><pre>  package SomethingComplex;
  sub new { return bless {}, shift };
  sub DESTROY {
    eval {
      ...; # some cleanup code that might throw an exception
    };
    if ($@) {
      ...; # handle exception in cleanup code
    }
  }
  
  package main;
  
  eval {
    my $thingy = SomethingComplex-&gt;new();
    ...; # do something that might throw an exception
  };
  if ($@) {  
    ...; # will never be executed even on exception
  }</pre></code>

If an exception occurs in the eval block in main then execution will stop and control will immediately jump out of the block.  <code>$thingy</code> will fall out of scope.  When this happens the object's <code>DESTROY</code> block will be executed.  This in turn runs its own <code>eval</code> which will unset <code>$@</code> as it executes.   Assuming another exception doesn't occur during cleanup by the time we reach the <code>if</code> statement in main <code>$@</code> will have been undefined even though an exception happened in the <code>eval</code> block immediately above.  Disaster!

The, simple, quite frankly terrible, workaround is to write this:

<code><pre>  eval {
    ...; # do something that might throw an exception
    1;
  } or do {
    ...; # handle the exception here
  }</pre></code>

We're no longer relying on the <code>$@</code> to tell that an exception has occurred but on the fact that an eval block quill return false on exception handling.  Of course, we can't now reliably look at <code>$@</code> to find out what kind of exception occurred.  There's ways around this, but they're even more complex to code.

A better fix on Perl's prior to 5.14 is to use the Try::Tiny module from the CPAN that handles all of this for us.

<code><pre>  use Try::Tiny;
  try {
    ...; # do something that might cause an exception.
  } catch {
    ...; # handle the exception stored in $_ here
  };</pre></code>

Of course, no matter how tiny Try::Tiny is, there's no getting away from the fact that it's not a module that's bundled with Perl;  I can rely on getting it installed whenever I install software, but not on every machine I might happen to admin and want to make use of the system perl.

Luckily, Perl 5.14 solves this problem entirely for us by executing the block first - therefore executing all destructors that might mess with <code>$@</code> first - and then, once all that's done, populating <code>$@</code> with the exception.

Thanks Perl 5 Porters!]]></content:encoded>
		<excerpt:encoded><![CDATA[There's a lot to love about Perl 5.14, but one of the best changes is a subtle one:  Native exception handling is now reliable.]]></excerpt:encoded>
		<wp:post_id>260</wp:post_id>
		<wp:post_date>2011-06-06 08:37:54</wp:post_date>
		<wp:post_date_gmt>2011-06-06 08:37:54</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>unexceptional-exceptions-in-perl-5-14</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>292</wp:comment_id>
			<wp:comment_author><![CDATA[ilmari]]></wp:comment_author>
			<wp:comment_author_email>ilmari+twoshortplanks@ilmari.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 09:44:24</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 09:44:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Actually, 5.14 sets $@ both before and after unwinding the eval block, so that code running during unwinding can detect (albeit not reliably, ask Zefram about the hairy details) whether there is an exception in flight.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307353464.9885";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307374470]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307374470.3662";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 09:44:24]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>293</wp:comment_id>
			<wp:comment_author><![CDATA[brian d foy]]></wp:comment_author>
			<wp:comment_author_email>brian.d.foy@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.211.123.197</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 13:48:32</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 13:48:32</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The problem with the 'or do {}' approach is that you will throw an exception for some possibly valid but false values, depending on what's in the eval. You could add a '1;' statement at the end of the eval to take care of that, but then you have to jump through various hoops to get the return value of what you're wrapping.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307368112.9029";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307374487]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307374487.6793";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 13:48:32]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>294</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 15:37:43</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 15:37:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Indeed, you'll note the examples I used has the "1:" at the end.  And yes, it does make returning values from the eval very <em>icky</em> - compounded by the fact that you can't use the return keyword in the same way you can in a catch block in most languages to return from the enclosing subroutine (it'll just exit out of the eval block.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>293</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307374663]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307374663.6127";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 15:37:43]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>295</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-06 15:42:15</wp:comment_date>
			<wp:comment_date_gmt>2011-06-06 15:42:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting.  I was looking at the documentation for <code>perldoc -f eval</code> which now says:

<blockquote>Before Perl 5.14, the assignment to $@ occurred before restoration of localised variables, which means that for your code to run on older versions, a temporary is required if you want to mask some but not all errors</blockquote>

This implies that it no longer happens before, but you're saying it does before <em>and</em> after.  I shall indeed chat to Zefram when I next pass by his desk.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>292</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1307374936]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1307374936.2413";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-06 15:42:15]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>307</wp:comment_id>
			<wp:comment_author><![CDATA[zefram@fysh.org]]></wp:comment_author>
			<wp:comment_author_email>zefram@fysh.org</wp:comment_author_email>
			<wp:comment_author_url>http://search.cpan.org/~zefram/</wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2011-06-16 16:23:55</wp:comment_date>
			<wp:comment_date_gmt>2011-06-16 16:23:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[This is Zefram.  Yes, $@ is now being set both before and after unwinding.  I originally changed it to be set (only) after unwinding, to reliably communicate the exception to code immediately after the eval.  Turned out this broke some existing code that was too widespread to be ignored.

The offending code examines $@ *during* unwinding, to find out whether the unwinding is due to an exception.  $@ has never actually been a reliable indicator of that, for the same reason that it was unreliable for code running after eval, but it worked often enough that people were relying on it to decide the fate of database transactions.

It would have been nice to add an API to *reliably* ask what unwinding is going on and why, but time ran out before we got an agreeable proposal for that together.  So in the end the political compromise was to set $@ both before and after: before to signal to cleanup code, just as (un)reliably as before, and after to reliably inform code that needs to handle the exception.  This is quite likely to change in the future.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>295</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1310475522]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1310475522.3844";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1308241435.1743";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-06-16 16:23:55]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>568</wp:comment_id>
			<wp:comment_author><![CDATA[WK]]></wp:comment_author>
			<wp:comment_author_email>wanradt@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/wanradt</wp:comment_author_url>
			<wp:comment_author_IP>87.119.187.235</wp:comment_author_IP>
			<wp:comment_date>2012-11-22 11:54:45</wp:comment_date>
			<wp:comment_date_gmt>2012-11-22 11:54:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Other simple error coming with "or do {}" solution is forgetting semi-colon at the end of statement. As your example kindly expose ;)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>294</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1353585287.517159938812255859375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"wanradt";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490564654]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983596]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983596]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983596.2386989593505859375;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865313.3361198902130126953125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-11-22 11:54:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>London Calling</title>
		<link>https://twoshortplanks.wordpress.com/2011/08/05/london-calling/</link>
		<pubDate>Fri, 05 Aug 2011 08:27:42 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=263</guid>
		<description></description>
		<content:encoded><![CDATA[Now that I don't live in London anymore (I live in Chippenham, which is eighty two miles away) I don't often get to go to the London Perl Monger Socials, but last night with the meeting happening right by Paddington Station it was too good an chance to miss.

The hot topic of conversation was obviously the impending YAPC::Europe conference.  I sadly won't be attending, since I just got back from my trip to YAPC::NA (which I owe a blog post on,) but I was able to give good advise on what talks to go see having already seen the US versions.  There seemed to be a significant amount of problems with clashes in the schedule in Latvia that I can sympathise with.  For example, I was recommending Jesse's talk on 5.16 (which I really enjoyed at YAPC::NA,) but it was pointed out that he's up against Smylers who I think is also an entertaining and informative speaker.

Jesse's talk at YAPC::NA on 5.16 generated quite a bit of conversation around the tables.  Taking a straw poll of the people present I think that they liked the direction that's being proposed and those that could would be attending the talk in Latvia to hear more in person.  People in general liked the idea of making the language (optionally) more consistent, easier to parse and more consistent without losing the ability to run older more sloppy code.  Jesse might have been shocked that in Ashville people clapped rather than booed his suggestion that the indirect object syntax not be allowed under "use 5.16" but at work we enforce "no indirect;" on all our code anyway.  The idea of laying the ground work for possibly re-implementing perl 5 (not Perl, but "perl", the interpreter) by making cleaner syntax was one thing that Jesse said in his talk that people at the social thought was interesting.  Sam Villian pointed out that Git seems to have been re-implemented multiple times and this has been a big advantage for it.

Nicholas Clarke arrived hot and in need of beer after running for the train, being delayed after writing grant proposals.  This kicked off a discussion about the TPF core maintenance grant which morphed into a discussion about the availability of talent to work on Perl 5 core issues (We had both Nicholas and Zefram sitting round the table - that's not a bad chunk of the talent pool in itself.)  In short my opinion is that the more work that's done on the Perl core the more interest we'll attract, and that's a good thing.

Problems with hiring in general were discussed;  I pointed out that at YAPC::NA lots of companies were hiring and offering telecommute positions so they could get the talent they needed.  The outragerous costs charged by not very effective recruiters were mentioned and the real need for high quality technically savvy recruiters (or at least, recruiters with technical experts) was identified as a gap in the market.

For some reason at some point we got into a big discussion about unicode.  Ilmari showed us his awesome library card with "Manns&aring;ker" written as "MannsAyker".  "Manns&aring;ker" had obviously gone through some terrible UTF-8 bytecode into Latin-1 conversion resulting in "Manns&Atilde;&yen;ker" and then someone seems to have re-typed that into it's ASCII equivalent.  It's not like his donor card was much better either!  This morphed in a discussion about failed attempts to get domain name registrars to adopt proper unicode characters (and the various security issues related around that.)  I wonder if the IT industry will be dealing with this in twenty years time?  Probably.

As is fitting for any modern IT meetup these days we talked a bit about the problems of scale.  This progressed into discussion of the problems of disaster recovery preparation; It's very hard to test without impacting customers (it's easier if you've got completely redundant systems and you're willing to invest into DR with a zero downtime switchover but that's rare) and it's actually quite hard to get a grip on what you have and haven't got covered (systems change rapidly and delaying rollouts to make sure full DR cover is in place may result in a large lost opportunity cost.)

Of course, London.pm still (in addition to all the Perl and computing talk) ricochets between geek trivia and the usual trappings of good friends. "Why don't we talk about Buffy and more?", "Well, what about Ponies?", "Hey, All the cool kids on the internet like My Little Pony these days". "Speaking of kids, is your daughter crawling yet?" "She's sitting up and waving", "Oh, while I remember, here's the bib your youngest left at our house last week"

As always, I had fun, and I look forward to attending again another time soon.
]]></content:encoded>
		<excerpt:encoded><![CDATA[Now that I don't live in London anymore (I live in Chippenham, which is eighty two miles away) I don't often get to go to the London Perl Monger Socials, but last night with the meeting happening right by Paddington Station it was too good an chance to miss.
]]></excerpt:encoded>
		<wp:post_id>263</wp:post_id>
		<wp:post_date>2011-08-05 08:27:42</wp:post_date>
		<wp:post_date_gmt>2011-08-05 08:27:42</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>london-calling</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Pimping</title>
		<link>https://twoshortplanks.wordpress.com/?p=267</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=267</guid>
		<description></description>
		<content:encoded><![CDATA["Pimp your Mac with Perl" was a talk I gave this year at YAPC::NA::2011 on improving the way you can use your Mac with Perl.  Think of it as a twenty minute version of Mac OS X tips for Perl hackers who.  The silly title is just to cope with the 

The <a href="http://www.pimpyourmacwithperl.com">companion website</a> has full slides from the talk and show notes.  Once the YAPC videos are posted I'll update both this post and that site to link to the video of me.  I don't remember.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>267</wp:post_id>
		<wp:post_date>2011-08-09 23:43:20</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Dear Member of Parliment</title>
		<link>https://twoshortplanks.wordpress.com/2011/08/16/dearmp/</link>
		<pubDate>Tue, 16 Aug 2011 10:33:32 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=270</guid>
		<description></description>
		<content:encoded><![CDATA[As a Perl programmer, both my livelihood and a large chunk of my social life relies entirely on the internet. How would you react if the head of your government made public statements talking about restricting people internet access to people that they (and their agencies) "know" are doing wrong things...

<blockquote>
...we are working with the Police, the intelligence services and industry to look at whether it would be right to stop people communicating via these websites and services when we know they are plotting violence, disorder and criminality.
</blockquote>
<div align="right"><small><cite>David Cameron, UK Prime Minister</cite></small></div>

In response, I wrote to my MP.  I encourage those of you from the UK to <a href="http://www.writetothem.com">do the same</a>.

<blockquote>
Dear Duncan Hames,

I write to you today to express my concerns regarding statements made by the prime minister with respect to restricting access to "social media".

It should be fairly obvious when the chinese regime are praising our censorship plans that they are ill thought through and should be scrapped.

However obvious I feel that I must still enumerate the ways that this plan is wrong on many levels.

Firstly, your prime minister seems unable to distinguish between the medium and the message.  As we move more and more into the digital age more and more communication will take new forms, these new forms will replace more traditional forms of communication in society.  To seek to control over some forms of commutation is modern equivalent of the
government seeking to control the ability for its citizens to write to newspapers or talk in the street.

Secondly, the idea of the government silencing it's citizens from communicating with one another is chilling.  While I can understand that some speech may be criminal by it's content, woe befall any government who tries to pre-emptively stop such speech, as these very same controls can be used, and abused, to control its citizens.

Thirdly, the prime minister is seeking to put restrictions on people that have not been convicted of a crime (he said, I quote, "when we know they are plotting violence, disorder and criminality", but that is a matter for the courts not the "[the government,] the Police, the intelligence services and industry" to decide.)  What safeguards are
being proposed that I, a law abiding citizen, may not also be restricted from communication?

Fourthly, and ironically, your prime minister is suggesting restricting the primary ability for communication with wider society by those individuals who he claims live outside of our society.

Finally, I do not understand your prime minister's desire to push for further attention grabbing legislation when our police force can already wield the RIP Act to gather evidence from these new forms of communication.  While I may not agree with the RIP Act, let our police forces use these powers to full effect before granting them new ones.

As a member of your constituency I ask you to ensure that your prime minister is questioned about such blatant flaws in his proposals in parliment.

Thanking you in advance for your help in this matter

Yours sincerely,

Mark Fowler 
</blockquote>

Those wanting to do more could do a lot worse than set up a regular donation to the <a href="http://www.openrightsgroup.org/">Open Rights Group</a>.]]></content:encoded>
		<excerpt:encoded><![CDATA[As a Perl programmer, both my livelihood and a large chunk of my social life relies entirely on the internet. How would you react if the head of your government made public statements talking about restricting people internet access to people that they (and their agencies) "know" are doing wrong things..]]></excerpt:encoded>
		<wp:post_id>270</wp:post_id>
		<wp:post_date>2011-08-16 10:33:32</wp:post_date>
		<wp:post_date_gmt>2011-08-16 10:33:32</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>dearmp</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Test::DatabaseRow 2</title>
		<link>https://twoshortplanks.wordpress.com/2011/11/18/testdatabaserow2/</link>
		<pubDate>Fri, 18 Nov 2011 21:07:22 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=279</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Last week I released an update for one of my older modules, <a href="http://search.cpan.org/~markf/Test-DatabaseRow">Test::DatabaseRow</a>. In the course of this update I completely rewrote the guts of the module, turning the bloated procedural module into a set of clearly defined Moose-like Perl classes.</p>

<h2 id="whyupdatenow">Why update now?</h2>

<p>Test::DatabaseRow had been failing it&#8217;s tests since Perl 5.13.3 (it was another victim of the changing stringification of regular expressions breaking tests.) We&#8217;re currently planning to upgrade our systems at work from 5.12 to 5.14 in the new year, and (embarrassing) one of the key modules that breaks our 5.14 smoke is Test::DatabaseRow. Oooops.</p>

<p>Since I had my editor open, I decided it might be a good idea to switch to a more modern build system. And, since I was doing that, I thought it might be a good idea to fix one of my long standing todos (testing all rows returned from the database not just the first.)</p>

<p>In other words, once I&#8217;d started, I found it hard to stop, and before I knew it I had a reasonably big task on my hands.</p>

<h2 id="thedecisiontorefactor">The decision to refactor</h2>

<p>When I first wrote Test::DatabaseRow back in 2003, like most testing modules of the time, it sported a simple Exporter based interface. The (mostly correct) wisdom was that simple procedural interfaces make it quicker to write tests. I still think that&#8217;s true, but:</p>

<ul>
<li><p><strong>Procedual programming ends up either with very long functions or excessive argument passing</strong>. The single function interface made the internals of Test::DatbaseRow quite difficult &#8211; to avoid having one giant function call I ended up passing all the arguments a multitude of helper functions and then passing the multiple return values of one function onto the next.</p></li>
<li><p><strong>Many of the calls you write want to share the same defaults</strong> For example, the database handle to use, if we should be verbose in our output, should we do utf&#8211;8 conversion?&#8230; These are handled reasonably well with package level variables as defaults for arguments not passed to the function (which isn&#8217;t such a big deal in a short test script) but the code to support those within the testing class itself isn&#8217;t particularly clean having to cope with defaults evaluation in multiple places.</p></li>
<li><p><strong>Only being able to return once from the function is a problem</strong>. Sometimes you might want to get extra data back after the test has completed. For example, when I wanted to allow you to optionally return the data extracted from the database I had to do it by allowing you to pass in the args to <code>row_ok</code> references to variables to be populated as it executes. Again, while this isn&#8217;t the end of the world from an external interface point of view, the effect it has on the internals (passing data up and down the stack) is horrible.</p></li>
</ul>

<p>For the sake of the internals I wanted things to change. However: I didn&#8217;t want to break the API. I decided to split the module into two halves. An simple external facing module that would provide the procedural interface, and an internal object orientated module that would allow me to produce a cleaner implementation.</p>

<h2 id="nomoosebutsomethingsimilar">No Moose, but something similar</h2>

<p>As I came to create Test::DatabaseRow::Object I found myself really wanting to write this new class with Moose. Now, Moose is a <em>very</em> heavyweight dependency; You don&#8217;t want to have to introduce a dependency on hundreds of modules just because you want to use a simple module to test your code. In fact, Test::DatabaseRow has no non-core dependencies apart from DBI itself, and I wanted to keep it this way with the refactoring. So, no Moose. No Mouse. No Moo. Just me and an editor.</p>

<p>In the end I compromised by deciding to code the module in a Moose &#8220;pull accessor&#8221; style even if I didn&#8217;t have Moose itself to provide the syntax to do this succinctly.</p>

<p>The approach I took was to put most of the logic for Test::DatabaseRow::Object &#8211; anything that potentially changes state of the object &#8211; into lazy loading read only accessors. Doing this allowed me to write my methods in a declarative style, relying entirely on the accessors performing the calculation to populate themselves the first time they&#8217;re accessed. For example. Test::DatabaseRow::Object has a read only accessor called <code>db_results</code> which goes to the database the first time it&#8217;s accessed and executes the SQL that&#8217;s needed to populate it (and the SQL itself comes from <code>sql_and_bind</code> which, unless explicitly stated in the constructor, is populated on first use from the <code>where</code> and <code>table</code> accessors and so on.)</p>

<p>Since I wasn&#8217;t using Moose this produced a lot more code than we&#8217;d normally expect to see, but because I was following a standard Moose conventions it&#8217;s still fairly easy to see what&#8217;s going on (I even went as far to leave a Moose style <code>has</code> accessor declaration in a comment above the blocks of code I had to write to sufficiently convey what I was doing.)</p>

<h2 id="aresultsobject">A results object</h2>

<p>The second big architectural change I made was to stop talking directly to Test::Builder. Instead I changed to returning a results object which was capable of rendering itself out to Test::Builder on demand.</p>

<p>This change made the internals a lot easier to deal with. I was able to break the test up into several functions each returning a success or failure object. As soon I was able to detect failure in any of these functions I could return it to Test::DatabaseRow, but if I got a success - which now hadn&#8217;t been rendered out to Test::Builder yet - I could throw it away and move onto the next potentially failing test while I still had other things to check.</p>

<p>This made implementing my missing feature, the ability to report on all rows returned from the database not just the first one, much easier to implement.</p>

<h2 id="problemsproblemsproblems">Problems, problems, problems</h2>

<p>After all this work, and spending hours improving the test coverage of the module, I still botched the release of 2.00. The old module tested the interface with DBI by checking against a database that was on my old laptop in 2003. Since I no longer had that laptop these tests weren&#8217;t being run (I actually deleted them since they were useless) and hence I didn&#8217;t notice when I&#8217;d broken the interface to DBI in my refactoring.</p>

<p>Ilmari pointed out I was being stupid a few minutes after I&#8217;d uploaded. Within ten minutes I&#8217;d written some DBI tests that test with SQLite (if you have DBD::SQLite installed) and released 2.01.</p>

<p>The biggest surprise was the next day where our overnight Hudson powered smokes failed at work, and the only thing that had changed was Test::DatabaseRow (we re-build our dependencies from the latest from CPAN every night, and it&#8217;d automatically picked up the changes.) Swapping in the old version passed. Putting the new version in failed. Had I missed something else in my testing?</p>

<p>No, I hadn&#8217;t.</p>

<p>After several hours of head scratching I eventually worked out that there was an extra bug in Test::DatabaseRow 1.04 that I&#8217;d not even realised was there, and I&#8217;d fixed it with 2.01. The tests were failing in our smokes but not because I&#8217;d broken the testing infrastructure, but because I&#8217;d <em>fixed it</em> and now I was detecting an actual problem in my Hudson test suite that had previously been unexposed.</p>

<h2 id="whatsnext">What&#8217;s next?</h2>

<p>Oh, I&#8217;m already planning Test::DatabaseRow 2.02. On github I&#8217;ve already closed a feature request that chromatic asked for in 2005. Want another feature? File a bug in RT. I&#8217;ll get to it sooner or later&#8230;</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>Last week I released an update for one of my older modules, <a href="http://search.cpan.org/~markf/Test-DatabaseRow">Test::DatabaseRow</a>. In the course of this update I completely rewrote the guts of the module, turning the bloated procedural module into a set of clearly defined Moose-like Perl classes.</p>]]></excerpt:encoded>
		<wp:post_id>279</wp:post_id>
		<wp:post_date>2011-11-18 21:07:22</wp:post_date>
		<wp:post_date_gmt>2011-11-18 21:07:22</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>testdatabaserow2</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://twoshortplanks.wordpress.com/2011/12/02/justsafarijs/</link>
		<pubDate>Fri, 02 Dec 2011 10:13:31 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=282</guid>
		<description></description>
		<content:encoded><![CDATA[<p>As part of my <a href="http://www.pimpyourmacwithperl.com/">Pimp Your Mac With Perl Talk</a> at the <a href="http://conferences.yapceurope.org/lpw2011/">London Perl Workshop</a> I talked very briefly about one of my newer Perl modules that I haven&#8217;t blogged about before: <a href="http://metacpan.org/module/Mac::Safari::JavaScript">Mac::Safari::JavaScript</a>. This module allows you to execute JavaScript inside your browser from within a Perl program and it <strong>just work</strong>.</p>

<h2 id="thepowerofjust">The Power of Just</h2>

<p>Piers Cawley gave a lightning talk at YAPC::Europe::2001 about <em>just</em> in which he explained the power of interfaces that <em>just</em> do what you need whenever you need them to and hide a bunch of complexity behind themselves.</p>

<p>To run JavaScript in Safari you <strong>just</strong> call <code>safari_js</code> with the JavaScript you want to execute:</p>

<pre><code>use Mac::Safari::JavaScript qw(safari_js);
safari_js('alert(&quot;Hello World&quot;);');
</code></pre>

<p>This JavaScript is then executed in the current tab of the frontmost Safari window. If you want to return a datascructure to Perl from your JavaScript then you <strong>just</strong> do so:</p>

<pre><code>my $page_title = safari_js(&quot;return document.title;&quot;);
</code></pre>

<p>No matter how complex<a href="1" id="fnref:1" title="see footnote" class="footnote">[1]</a>: it is:</p>

<pre><code>my $details = safari_js(&lt;&lt;'ENDOFJAVASCRIPT');
  return {
    title: document.title,
    who: jQuery('#assignedto').next().text(),
  };
ENDOFJAVASCRIPT
</code></pre>

<p>If you want to have variables avalible to you in your JavaScript then you <strong>just</strong> pass them in:</p>

<pre><code>my $sum = safari_js(&quot;return a+b;&quot;,{ a =&gt; 1, b =&gt; 2 });
</code></pre>

<p>No matter how complex<a href="2" id="fnref:2" title="see footnote" class="footnote">[2]</a> they are:</p>

<pre><code>use Config;
safari_js(&quot;alert(config['version']);&quot;,{config =&gt; \%Config})
</code></pre>

<p>And if you throw an exception in JavaScript, then you <strong>just</strong> catch it the normal way:</p>

<pre><code>use Try::Tiny;
try {
  safari_js(&quot;throw 'bang';&quot;);
} catch {
  print &quot;Exception '$_' thrown from within JavaScript&quot;;
};
</code></pre>

<h2 id="peakingunderthehood">Peaking Under the Hood</h2>

<p>So, how, does this all hang together? Well, it turns out that running JavaScript in your browser from AppleScript isn&#8217;t that hard:</p>

<pre><code>tell application &quot;Safari&quot;
  do JavaScript &quot;alert('hello world');&quot; in document 1
end tell
</code></pre>

<p>And running AppleScript from within Perl isn&#8217;t that hard either:</p>

<pre><code>use Mac::AppleScript qw(RunAppleScript);
RunAppleScript($applescript);
</code></pre>

<p>So it&#8217;s a simple problem, right? Just nest the two inside each other. Er, no, it&#8217;s not <em>just</em> that simple.</p>

<p>It turns out that handling the edge cases is actually quite hard. Typical problems that come up that Mac::Safari::JavaScript <strong>just</strong> deals with you for are:</p>

<ul>
<li>How do we encode data structures that we pass to and from JavaScript?</li>
<li>How do we escape the strings we pass to and from AppleScript?</li>
<li>For that matter how do we encode the program itself so it doesn&#8217;t break?</li>
<li>What happens if the user supplies invalid JavaScript?</li>
<li>How do we get exceptions to propogate properly?</li>
<li>With all this thunking between layers, how do we get the line numbers to match up in our exceptions?</li>
</ul>

<p>And that&#8217;s the power of a module that handles the <strong>just</strong> for you. Rather than writing a few lines of code to get the job done, you can now <strong>just</strong> write one <em>and</em> have that one line handle all the weird edge cases for you.</p>

<div class="footnotes">
<hr />
<ol>

<li id="fn:1">
<p>Okay, so there are some limits. Anything that can be represented by JSON can be returned, but anything that can&#8217;t, can&#8217;t. This means you can&#8217;t return circular data structures and you can&#8217;t return DOM elements. But that would be crazy; <strong>Just</strong> don&#8217;t do that. <a href="1" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

<li id="fn:2">
<p>Likewise we can only pass into JavaScript something that can be represented as JSON. No circular data strucutres. No weird Perl not-really-data things such as objects, filehandles, code refences, etc. <a href="2" title="return to article" class="reversefootnote">&#160;&#8617;</a></p>
</li>

</ol>
</div>]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>As part of my <a href="http://www.pimpyourmacwithperl.com/">Pimp Your Mac With Perl Talk</a> at the <a href="http://conferences.yapceurope.org/lpw2011/">London Perl Workshop</a> I talked very briefly about one of my newer Perl modules that I haven&#8217;t blogged about before: <a href="http://metacpan.org/module/Mac::Safari::JavaScript">Mac::Safari::JavaScript</a>. This module allows you to execute JavaScript inside your browser from within a Perl program and it <strong>just work</strong>.</p>]]></excerpt:encoded>
		<wp:post_id>282</wp:post_id>
		<wp:post_date>2011-12-02 10:13:31</wp:post_date>
		<wp:post_date_gmt>2011-12-02 10:13:31</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>justsafarijs</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Once a week, every week</title>
		<link>https://twoshortplanks.wordpress.com/2011/12/31/once-a-week-every-week/</link>
		<pubDate>Sat, 31 Dec 2011 19:53:44 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=289</guid>
		<description></description>
		<content:encoded><![CDATA[This year my new year’s resolution for 2012 will be to <strong>release a Perl distribution to the CPAN each and every week</strong>. And I think you, as a Perl developer, should do this too.

Why am <em>I</em> doing this? Because I’m trying to force myself into more iterative development. Note that I didn’t say a <em>new</em> distribution. Just a new release - of either an existing or new distribution - a week.

The simple fact of the matter is that <em>false hubris</em> is causing me to not be releasing as often as I should and consequently I’m seeing lots of problems.
<ul>
	<li><strong>Sometimes I’m tempted to do too much in one release</strong>. I’ve got lots of modules that could do with updating, but because I think they need massive amounts of work I don’t ever have the time to make all the changes. I’d be better off just improving them slightly each release and releasing them more often.</li>
	<li><strong>Sometimes I’m being a perfectionist with my first release</strong>. I’ve got a bunch of modules that I’ve got 90% done but because there’s theoretically a few more nice to have features I haven’t written yet, I’ve not shipped them. I should <em>Release early release often</em>. What extra features these modules need will soon become apparent once it has more real world users than just me, and hey, in the open source world <em>someone else might write them for me</em>.</li>
	<li><strong>Sometimes I don’t value my code enough</strong> and I don’t think the “simple” thing I spent a day or so coding would be useful for anyone else or it’s beneath me to release something so simple to the CPAN. This of course is nonsense - a day I can save someone else coding is a day they’ve saved, no matter how obvious or simple the code.</li>
</ul>
This all can pretty much be solved by forcing myself to release more often. So, here’s the challenge:
<h2 id="therules">The Rules</h2>
Short version: <em>Upload each week, every week.</em>

Longer version:
<ul>
	<li>Every week, as defined as the midnight between Saturday night / Sunday morning UTC to the midnight between the following Saturday night / Sunday morning UTC, I must release a new distribution to the CPAN. (Note that this gives me no extra or less allowance during daylight savings or time zone changes.)</li>
	<li>For the purpose of disambiguation timings will be counted by PAUSE upload dates</li>
	<li>Should an official PAUSE outage occur and I can, hand on my heart, claim that that stopped me uploading, I will give myself a grace period of forty eight hours after either the end of the outage or the end of the previous week (whichever is longer) to complete the upload. In this situation this upload will count for the previous week and an upload will still have to be made for the week that upload took place in.</li>
	<li>Scoring for the year will be done by <a href="http://lifehacker.com/281626/jerry--productivity-secret">Seinfeld chain length</a>, that is to say by counting the largest run of uninterrupted weeks, with ties decided by total number of weeks with uploads.</li>
</ul>
<h2 id="youcanplaytoo">You Can Play Too</h2>
Of course, it would be great for the Perl world if every CPAN developer took up this challenge. More importantly, it’d be great for me because it’d give me someone to compete against and to make sure that I keep this self-set challenge up. So how about it? Fancy playing?]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>289</wp:post_id>
		<wp:post_date>2011-12-31 19:53:44</wp:post_date>
		<wp:post_date_gmt>2011-12-31 19:53:44</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>once-a-week-every-week</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>353</wp:comment_id>
			<wp:comment_author><![CDATA[Philippe Bruhat (BooK)]]></wp:comment_author>
			<wp:comment_author_email>book@cpan.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.14.133.213</wp:comment_author_IP>
			<wp:comment_date>2012-01-02 09:52:46</wp:comment_date>
			<wp:comment_date_gmt>2012-01-02 09:52:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So obviously the first release will be a tool to measure the chain length for any PAUSE ID, and the week after we'll have a web site and a leaderboard. :-)

Mmm, maybe someone could hack that in metacpan? (Too bad it wouldn't count for the challenge...)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1325509415]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325509415.6413";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325497966.4328";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-02 09:52:46]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>357</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.192.23.165</wp:comment_author_IP>
			<wp:comment_date>2012-01-07 19:30:56</wp:comment_date>
			<wp:comment_date_gmt>2012-01-07 19:30:56</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Maybe not the first module, but soon...yes.  In particular, having a module that can take a collection of DateTime objects and calculate the maximum chain length would actually be useful.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>353</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1325964656]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325964656.4989";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-07 19:30:56]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>358</wp:comment_id>
			<wp:comment_author><![CDATA[Philippe Bruhat (BooK)]]></wp:comment_author>
			<wp:comment_author_email>book@cpan.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>86.66.243.202</wp:comment_author_IP>
			<wp:comment_date>2012-01-07 23:41:05</wp:comment_date>
			<wp:comment_date_gmt>2012-01-07 23:41:05</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Indeed.

And then you'll have to compete not only with authors of 2012, but also authors since the beginning of CPAN.

I have a chain that is almost two years long in 2005-2006... ;-)

Anyway, only 20 minutes left to push my first module of 2012 to CPAN. Gotta hurry!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>357</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1325979665]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325979666.0218";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-07 23:41:05]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>350</wp:comment_id>
			<wp:comment_author><![CDATA[Ricardo Signes]]></wp:comment_author>
			<wp:comment_author_email>rjbs@cpan.org</wp:comment_author_email>
			<wp:comment_author_url>http://rjbs.manxome.org/</wp:comment_author_url>
			<wp:comment_author_IP>64.121.172.235</wp:comment_author_IP>
			<wp:comment_date>2011-12-31 23:09:15</wp:comment_date>
			<wp:comment_date_gmt>2011-12-31 23:09:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Sounds like a plan!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1325377116]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325377117.2024";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1325372955.4274";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2011-12-31 23:09:15]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>442</wp:comment_id>
			<wp:comment_author><![CDATA[cjm]]></wp:comment_author>
			<wp:comment_author_email>perl@cjmweb.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.cjmweb.net</wp:comment_author_url>
			<wp:comment_author_IP>76.184.145.14</wp:comment_author_IP>
			<wp:comment_date>2012-03-14 16:16:55</wp:comment_date>
			<wp:comment_date_gmt>2012-03-14 16:16:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Looks like you missed that you can click on the headers to see the complete lists.  As I write this, you're tied for 17th on the Longest Chains chart (http://onceaweek.cjmweb.net/longest#idMARKF).  You'll make it back onto the Chains Still under Construction chart if you get a release out in the next 4 days.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>441</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331741815]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331741815.7521";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-14 16:16:55]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>437</wp:comment_id>
			<wp:comment_author><![CDATA[cjm]]></wp:comment_author>
			<wp:comment_author_email>perl@cjmweb.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.cjmweb.net</wp:comment_author_url>
			<wp:comment_author_IP>76.184.145.14</wp:comment_author_IP>
			<wp:comment_date>2012-03-12 00:28:37</wp:comment_date>
			<wp:comment_date_gmt>2012-03-12 00:28:37</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Ladies &amp; Gentlemen, I give you DateTimeX::Seinfeld (https://metacpan.org/module/DateTimeX::Seinfeld).]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>357</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331543830.6685";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331543830]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:13:"1331512117.72";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-12 00:28:37]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>440</wp:comment_id>
			<wp:comment_author><![CDATA[cjm]]></wp:comment_author>
			<wp:comment_author_email>perl@cjmweb.net</wp:comment_author_email>
			<wp:comment_author_url>http://www.cjmweb.net</wp:comment_author_url>
			<wp:comment_author_IP>76.184.145.14</wp:comment_author_IP>
			<wp:comment_date>2012-03-13 21:47:55</wp:comment_date>
			<wp:comment_date_gmt>2012-03-13 21:47:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[And the website is up!  I'm too cheap to spring for a domain name for this, so it's at http://onceaweek.cjmweb.net/

It's pretty obvious I'm no graphic designer.  If you've got design skills, fork it on GitHub and improve it.

Mark, looks like you skipped a week already.  Tsk tsk.  (Or did I miss something when fetching the release data?)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>353</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331675276]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331675277.4427";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-13 21:47:55]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>441</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP></wp:comment_author_IP>
			<wp:comment_date>2012-03-14 14:11:26</wp:comment_date>
			<wp:comment_date_gmt>2012-03-14 14:11:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yep, missed my birthday week.   Ooops. ]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>440</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331734287]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331734287.3336";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-14 14:11:26]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>596</wp:comment_id>
			<wp:comment_author><![CDATA[Zoffix Znet]]></wp:comment_author>
			<wp:comment_author_email>facebook@zoffix.com</wp:comment_author_email>
			<wp:comment_author_url>https://www.facebook.com/zoffix</wp:comment_author_url>
			<wp:comment_author_IP>67.226.172.41</wp:comment_author_IP>
			<wp:comment_date>2014-01-09 18:06:45</wp:comment_date>
			<wp:comment_date_gmt>2014-01-09 18:06:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm up for this game :) Sign me up :)]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1389290805.34045505523681640625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[facebook]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://graph.facebook.com/1610512867/picture?type=large&_md5=94443ea41c1edaac95661b02783481f4]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[1610512867]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[19278325109]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1389290805]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865314.5805189609527587890625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-09 18:06:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Simple Todo List Processing in Perl</title>
		<link>https://twoshortplanks.wordpress.com/2012/01/07/291/</link>
		<pubDate>Sat, 07 Jan 2012 19:13:10 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">https://twoshortplanks.wordpress.com/?p=291</guid>
		<description></description>
		<content:encoded><![CDATA[<p>While I normally use OmniFocus as a GTD tool to manage my todo lists, sometimes I want to collaborate on a todo list with someone else and I don’t want them to have to use a complicated and expensive tool. I’ve often found in this situation a simple shared text file is the way to go.  A file on the office fileserver, or in a shared Dropbox folder, in a obvious format that any can understand with a glance.</p>

<p>Here’s what one looks like:</p>

<pre><code>[X] (extract) Complete coding.
[X] (extract) Get Zefram to code review my code.  
[X] (yapc) Write talk submission for YAPC::NA
[X] (yapc) submit talk proposal with ACT
[ ] (extract) Write Array::Extract::Example document.  
[ ] (extract) Check in and push to github
[ ] (extract) Upload to CPAN. 
[ ] (extract) Publish a blog post about it
</code></pre>

<p>In the above example two tasks each from the the <code>extract</code> project and the <code>yapc</code> project have been marked as completed.  Periodically I want to move these “done” items to a separate archive list - the done file - so they don’t clutter up my list.  That’s something I’m going to want to automate with Perl.</p>

<p>The way I’ve chosen to write that script is to use  Tie::File, where each element of the array corresponds to a line of the file.</p>

<h2>Alternatives to Grepping</h2>

<p>At first glance removing all the lines from our array that are ticked might seem like a simple use of grep:</p>

<pre><code>tie my @todo, "Tie::File", $filename or die $!;
@todo = grep { !/\A\[[^ ]]/ } @todo;
</code></pre>

<p>But that’s throwing away everything that we want to move to the done file. An alternative might be to write a grep with side effects:</p>

<pre><code>tie my @todo, "Tie::File", $filename or die $!;
open my $done_fh, "&gt;;&gt;;", $done_filename or die $!;
@todo = grep {
  !/\A\[[^ ]]/ || do {
    say { $done_fh } $_;
  0 } 
} @todo;
</code></pre>

<p>But that’s ugly.  The code gets much uglier still if you want a banner preceding the first new entry into the done file saying when the actions were moved there.</p>

<p>What I ended up doing was writing a new module called <a href="http://metacpan.org/module/Array::Extract">Array::Extract</a> which exports a function <code>extract</code> that does exactly what you might expect:</p>

<pre><code>my @done = extract { /\A\[[^ ]]/ } @todo;
</code></pre>

<p><code>@todo</code> is modified to remove anything that the block returns true for and those elements are placed in <code>@done</code>.</p>

<pre><code>open my $done_fh, "&gt;;&gt;;", $done_filename or die $!;
my @done = extract { /\A\[[^ ]]/ } @todo;
print { $done_fh } map { "$_\n" }
  "","Items archived @{[ DateTime-&gt;;now ]}:","",@done;
</code></pre>

<h2>Needs more actions</h2>

<p>Of course, if all I wanted to do was remove the actions that had been completed I probably wouldn’t have reached for Tie::File, but for my next trick I’m going to need to insert some extra content at the top of the file once I’m done processing it.</p>

<p>I want to keep track of projects that have had all their remaining actions marked as done and moved to the done file.  For example, I’ve ticked off all the action in the <code>yapc</code> so I need more actions (write slides, book flight, etc, etc.)  I need a list of these “actionless” projects at the top of my todo list so when I glance at it I know there’s some tasks missing.</p>

<p>Essentially after I run my script I want my todo file to look something like this:</p>

<pre><code>yapc needs more actions

[ ] (extract) Write Array::Extract::Example document
[ ] (extract) Check in and push to github
[ ] (extract) Upload to CPAN
[ ] (extract) Publish a blog post about it
</code></pre>

<p>Here’s the final script that handles that case too:</p>

<pre><code>#!/usr/bin/env perl.  

use 5.012;
use warnings;

use Path::Class;
use Tie::File;
use Array::Extract qw(extract);
use List::MoreUtils qw(uniq last_index);
use DateTime;

########################################################################

my $TODO = file($ENV{HOME}, "Dropbox", "SharedFolder", "TODO.txt");
my $DONE = $TODO-&gt;;dir-&gt;;file("DONE.txt");

########################################################################

# work out what projects are in this array, maintaining order
sub projects(@) {
  return uniq grep { defined $_ } map { /^\[.] \(([^)]+)/; $1 } @_;
}

########################################################################

# tie to the todo list file
tie my @todo, "Tie::File", $TODO-&gt;;stringify or die $!;

# work out what projects are in the file before we remove anything
my @projects = projects @todo;

# remove those items that are done.  
my @done = extract { /\A\[[^ ]]/x } @todo;
exit unless @done;

# append what has been done to another file
print { $DONE-&gt;;open("&gt;;&gt;;") or die $! } map { "$_\n" }
  "",
  "Items archived @{[ DateTime-&gt;;now ]}:",
  "",
  @done;

# work out which projects no longer exist
my %remaining_project = map { $_ =&gt;; 1 } projects @todo;
@projects = grep { !$remaining_project{ $_ } } @projects;

# insert this at the section at the top of the file. 
splice @todo,0,0,map { "$_ needs more actions" } @projects;

# seperate the "needs more actions" out with a newline
my $break = last_index { /needs more actions\z/ } @todo;
splice @todo, $break+1, 0, "" if defined $break &amp;&amp; $todo[$break+1] ne "";
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>291</wp:post_id>
		<wp:post_date>2012-01-07 19:13:10</wp:post_date>
		<wp:post_date_gmt>2012-01-07 19:13:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>291</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="post_format" nicename="post-format-standard"><![CDATA[Standard]]></category>
		<wp:comment>
			<wp:comment_id>370</wp:comment_id>
			<wp:comment_author><![CDATA[Gabor Szabo]]></wp:comment_author>
			<wp:comment_author_email>szabgab@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.facebook.com/szab529gab</wp:comment_author_url>
			<wp:comment_author_IP>192.117.127.193</wp:comment_author_IP>
			<wp:comment_date>2012-01-16 07:42:31</wp:comment_date>
			<wp:comment_date_gmt>2012-01-16 07:42:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am far from being a "clean code experte" so I just wonder if instead of the extract() function, wouldn't it be cleaner code if there was a filter 

my ($pass, $fail) = filter { ... } @source;

that would move the success elements in one array ref and the failure elements in another array ref?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326699751.8796";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[facebook]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://graph.facebook.com/648023910/picture?type=large&_md5=eadcb9e7194d05d5f4adb8296f68be66]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[648023910]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326724184]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326724185.4905";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-16 07:42:31]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>371</wp:comment_id>
			<wp:comment_author><![CDATA[Mark Stosberg]]></wp:comment_author>
			<wp:comment_author_email>mark@stosberg.com</wp:comment_author_email>
			<wp:comment_author_url>http://mark.stosberg.com/</wp:comment_author_url>
			<wp:comment_author_IP>12.161.105.138</wp:comment_author_IP>
			<wp:comment_date>2012-01-16 14:28:12</wp:comment_date>
			<wp:comment_date_gmt>2012-01-16 14:28:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I use todo.txt for a text-based TODO handling system: http://todotxt.com/

It has a good number of features, plugins and front-ends which make it pleasant to use]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326724092.7807";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326724196]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326724197.4086";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-16 14:28:12]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>372</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2012-01-16 14:36:16</wp:comment_date>
			<wp:comment_date_gmt>2012-01-16 14:36:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That might be an arguably cleaner interface, but it wouldn't actually do what I wanted in terms of altering the original tied file.

The <code>filter</code> already exists in List::MoreUtils - it's called <code>part</code> and requires the function to return the number of the array it should place the result into.  For example:

<code>my ($fail, $pass) = part { /Lion/ } qw(MufasaLion JosieCat PinkPanther SimbaLion)</code>]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>370</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326724577]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326724577.5922";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-16 14:36:16]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>374</wp:comment_id>
			<wp:comment_author><![CDATA[dotandimet]]></wp:comment_author>
			<wp:comment_author_email>dotan@corky.net</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/dotandimet</wp:comment_author_url>
			<wp:comment_author_IP>212.143.99.102</wp:comment_author_IP>
			<wp:comment_date>2012-01-17 09:53:16</wp:comment_date>
			<wp:comment_date_gmt>2012-01-17 09:53:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[For some reason all the arrows in the code changed into arrow-semicolons.
The source indicates that the greater-than sign got converted to ampersand-gt-semicolon-semicolon.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1326793996.356";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865311.88840389251708984375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-17 09:53:16]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>375</wp:comment_id>
			<wp:comment_author><![CDATA[dotandimet]]></wp:comment_author>
			<wp:comment_author_email>dotan@corky.net</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/dotandimet</wp:comment_author_url>
			<wp:comment_author_IP>212.143.99.102</wp:comment_author_IP>
			<wp:comment_date>2012-01-17 09:55:16</wp:comment_date>
			<wp:comment_date_gmt>2012-01-17 09:55:16</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[...And then I read your next post. Duh.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>374</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1326794116.199";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865312.284123897552490234375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-17 09:55:16]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Once is Enough</title>
		<link>https://twoshortplanks.wordpress.com/2012/01/13/entities/</link>
		<pubDate>Fri, 13 Jan 2012 19:57:40 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=298</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In this blog post I discuss how HTML entities work, how to encode them with Perl, and how to detect when you&#8217;ve accidentally double encoded your entities with my module Test::DoubleEncodedEntities.</p>

<h2 id="howhtmlentitieswork">How HTML Entities work</h2>

<p>In HTML you can represent any character in simple ASCII by using <em>entities</em>. These come in two forms, either using the decimal codepoint of the character or, for some frequently used characters more readable human <em>named entities</em></p>

<table>
<tr><th>Character</th><th>Unicode codepoint</th><th>Decimal Entity</th><th>Named Enitity</th></tr>
<tr><td>&eacute;</td><td>233</td><td>&#233;<td>&amp;eacute;</td></tr>
<tr><td>&copy;</td><td>169</td><td>&#169;<td>&amp;copy;</td></tr>
<tr><td>&#9731;</td><td>9731</td><td>&#9731;<td><em>none</em></td></tr>
<tr><td>&lt;</td><td>60</td><td>&#060;<td>&amp;lt;</td></tr>
<tr><td>&amp;</td><td>38</td><td>&#038;<td>&amp;amp;</td></tr>
</table>

<p>So instead of writing</p>

<p><code><pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;body&gt;&copy; 2012 Mark Fowler&lt;/body&gt;&lt;/html&gt;</pre></code></p>

<p>You can write</p>

<p><code><pre>&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;body&gt;&amp;copy; 2012 Mark Fowler&lt;/body&gt;&lt;/html&gt;</pre></code></p>

<p>By delivering a document in ASCII and using entities for any codepoints above 127 you can ensure that even the most broken of browsers will render the right characters.</p>

<p>Importantly, when an entity is converted back into a character by the browser the character no longer has any of its special meaning, so you can use encoding to escape sequences that would otherwise be considered markup. For example:</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;html&gt;&lt;body&gt;say &quot;yep&quot;
  if $ready &amp;amp;&amp;amp; $bad &amp;lt; $good;
&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>Correctly renders as</p>

<pre><code>say &quot;yep&quot; if $ready &amp;&amp; $bad &lt; $good;
</code></pre>

<h2 id="encodingentitieswithperl">Encoding Entities with Perl</h2>

<p>The go-to module for encoding and decoding entities is <a href="http://metacpan.org/module/HTML::Entities">HTML::Entities</a>. Its use is simple: You pass the string you want to encode into the <code>encode_entities</code> function and it returns the same string with the entities encoded:</p>

<pre><code>use HTML::Entites qw(encode_entities);

my $string = &quot;\x{a9} Mark Fowler 2012&quot;;
my $encoded = encode_entities($string);
say &quot;&lt;!DOCTYPE html&gt;&quot;
say &quot;&lt;html&gt;&lt;body&gt;$encoded&lt;/body&gt;&lt;/html&gt;&quot;;
</code></pre>

<p>If you no longer need the non-encoded string you can have HTML::Entities modify the string you pass to it by not assigning the output to anything (HTML::Entities is smart enough to notice it&#8217;s being called in <em>void context</em> where its return value is not being used.)</p>

<pre><code>use HTML::Entites qw(encode_entities);

my $string = &quot;\x{a9} Mark Fowler 2012&quot;;
encode_entities($string);
say &quot;&lt;!DOCTYPE html&gt;&quot;
say &quot;&lt;html&gt;&lt;body&gt;$string&lt;/body&gt;&lt;/html&gt;&quot;;
</code></pre>

<h2 id="thedoubleencodingproblem">The Double Encoding Problem</h2>

<p>The trouble with encoding HTML entities is that if you do it a second time then you end up with nonsensical looking text. For example </p>

<pre><code>use HTML::Entites qw(encode_entities);

my $string = &quot;\x{a9} Mark Fowler 2012&quot;;
encode_entities($string);
encode_entities($string);
say &quot;&lt;!DOCTYPE html&gt;&quot;
say &quot;&lt;html&gt;&lt;body&gt;$string&lt;/body&gt;&lt;/html&gt;&quot;;
</code></pre>

<p>Outputs</p>

<pre><code>&lt;!DOCTYPE html&gt;
&lt;hmtl&gt;&lt;body&gt;&amp;amp;copy; Mark Fowler 2012&lt;/body&gt;&lt;/html&gt;
</code></pre>

<p>Which when rendered by the browser displays</p>

<pre><code>&amp;copy; Mark Fowler 2012
</code></pre>

<p>As the <code>&amp;amp;</code> has turned into <code>&amp;</code> but <strong>isn&#8217;t</strong> then combind with the <code>copy;</code> to turn it into the copyright symbol &copy;.</p>

<p>Each subsequent encoding turns the <code>&amp;</code> at the start of the entity into <code>&amp;amp;</code>, including those at the start of any previously created <code>&amp;amp;</code>. Do this ten or so times and you end up with:</p>

<pre><code>&amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;amp;copy; Mark Fowler 2012
</code></pre>

<p>The obvious solution is to make sure you encode the entities only once! But that&#8217;s not as easy as it might seem. If you&#8217;re building your output up from multiple processes it&#8217;s quite easy to mistakenly encode twice; Worse, if you&#8217;re using data that you don&#8217;t control (for example, extracted from a web page, downloaded from a feed, imported from a user) you might find that some or more of it had unexpectedly already been encoded.</p>

<h2 id="testingfortheproblem">Testing for the Problem</h2>

<p>I recently re-released my module <a href="http://metacpan.org/module/Test::DoubleEncodedEntities">Test::DoubleEncodedEntities</a> that can be used to write automated tests for double encoding.</p>

<pre><code>use Test::More tests =&gt; 1;
use Test::DoubleEncodedEntities;
ok_dee($string, &quot;check for double encoded entities&quot;);
</code></pre>

<p>It works <em>heuristically</em> by looking for strings that could possibly be double encoded entities. Obviously there&#8217;s lots of HTML documents out there where it&#8217;s perfectly legitimate to have double encoded entities: any of them talking about entity encoding, such as this blog post itself, will naturally do do. However, the vast majority - where you control the input - will not have these format of strings and we can test for them.</p>

<p>For example:</p>

<pre><code>use Test::More tests =&gt; 6;
use Test::DoubleEncodedEntities;

ok_dee(&quot;&amp;copy; Mark Fowler 2012&quot;,     &quot;should pass&quot;);
ok_dee(&quot;&amp;amp;copy; Mark Fowler 2012&quot;, &quot;should fail&quot;);
ok_dee(&quot;&#038;copy; Mark Fowler 2012&quot;, &quot;should fail&quot;);
ok_dee(&quot;&#169; Mark Fowler 2012&quot;,     &quot;should pass&quot;);
ok_dee(&quot;&amp;amp;#169; Mark Fowler 2012&quot;, &quot;should fail&quot;);
ok_dee(&quot;&#038;#169; Mark Fowler 2012&quot;, &quot;should fail&quot;);
</code></pre>

<p>Produces the output:</p>

<pre><code>1..6
ok 1 - should pass
not ok 2 - should fail
#   Failed test 'should fail'
#   at test.pl line 5.
# Found 1 &quot;&amp;amp;copy;&quot;
not ok 3 - should fail
#   Failed test 'should fail'
#   at test.pl line 6.
# Found 1 &quot;&#038;copy;&quot;
ok 4 - should pass
not ok 5 - should fail
#   Failed test 'should fail'
#   at test.pl line 8.
# Found 1 &quot;&amp;amp;#169;&quot;
not ok 6 - should fail
#   Failed test 'should fail'
#   at test.pl line 9.
# Found 1 &quot;&#038;#169;&quot;
# Looks like you failed 4 tests of 6.
</code></pre>

<p>Correctly detecting the double encoded entities in the <code>should fail</code> tests</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[<p>In this blog post I discuss how HTML entities work, how to encode them with Perl, and how to detect when you&#8217;ve accidentally double encoded your entities with my module Test::DoubleEncodedEntities.</p>]]></excerpt:encoded>
		<wp:post_id>298</wp:post_id>
		<wp:post_date>2012-01-13 19:57:40</wp:post_date>
		<wp:post_date_gmt>2012-01-13 19:57:40</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>entities</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d7a571d6813230dc59efc649077e1862</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_29a6f310a1c6db3f9b3e72f5b634dd4b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_feb2e5b9d7c6541e84cf72f64dc1fb02</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_65d4e72c66912e93870cde40742f5929</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_bd694e3c2ac7bbd2070abd5a3fe4ff8a</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b754cebf4f7aae855bdf6ed3c8996140</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_58608c2208a94158290cf92dc30b2051</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_d05eece04008896d828013c7d0154686</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>361</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.192.23.165</wp:comment_author_IP>
			<wp:comment_date>2012-01-14 00:15:34</wp:comment_date>
			<wp:comment_date_gmt>2012-01-14 00:15:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Some of the text in the example at the end of this post is garbled;  This is because wordpress seems to not be allowing me to put in the double encoded entities I need to complete the example.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326500135]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1326500136.334";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-14 00:15:34]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>362</wp:comment_id>
			<wp:comment_author><![CDATA[realdavorg]]></wp:comment_author>
			<wp:comment_author_email>dave@dave.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/realdavorg</wp:comment_author_url>
			<wp:comment_author_IP>93.97.195.229</wp:comment_author_IP>
			<wp:comment_date>2012-01-14 22:06:10</wp:comment_date>
			<wp:comment_date_gmt>2012-01-14 22:06:10</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[And, of course, some times you specifically want double-encoded entities - so that you can show the entities in HTML output, as in the table near the top of this post. But it looks like either you or Wordpress are being too clever here, as I'm seeing the third column as the same as the first column.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326624531]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326578770.4522";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1326624531.345";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-14 22:06:10]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>363</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>94.192.23.165</wp:comment_author_IP>
			<wp:comment_date>2012-01-15 10:50:28</wp:comment_date>
			<wp:comment_date_gmt>2012-01-15 10:50:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Wordpress.com is being way too clever here. I'm tempted to move away to a self hosted solution here!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>362</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326624628.9448";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326624628]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-15 10:50:28]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>364</wp:comment_id>
			<wp:comment_author><![CDATA[realdavorg]]></wp:comment_author>
			<wp:comment_author_email>dave@dave.org.uk</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/realdavorg</wp:comment_author_url>
			<wp:comment_author_IP>93.97.195.229</wp:comment_author_IP>
			<wp:comment_date>2012-01-15 10:55:46</wp:comment_date>
			<wp:comment_date_gmt>2012-01-15 10:55:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Bizarre how it's being too clever for the numeric entities but exactly the right level of clever for the named entities.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>363</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326624946]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326624946.1854";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-15 10:55:46]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>367</wp:comment_id>
			<wp:comment_author><![CDATA[Anonymous]]></wp:comment_author>
			<wp:comment_author_email>anonymous@example.invalid</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>80.109.124.74</wp:comment_author_IP>
			<wp:comment_date>2012-01-16 04:46:28</wp:comment_date>
			<wp:comment_date_gmt>2012-01-16 04:46:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[You teach a tool, but neglected to tell the circumstances when it should not be used and when it should. W3C [tutorial-char-enc] recommends: "Save your pages as UTF-8, whenever you can. … Avoid using character escapes, except for invisible or ambiguous characters." The details are in [qa-escapes].

http://www.w3.org/International/tutorials/tutorial-char-enc/Overview.en#quicksummary
http://www.w3.org/International/questions/qa-escapes.en]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326689188.6065";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326733809]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326733809.4103";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-16 04:46:28]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>373</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2012-01-16 17:17:34</wp:comment_date>
			<wp:comment_date_gmt>2012-01-16 17:17:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hello Anonymous whoever you are!

I'm a UTF-8 junkie;  I've done enough i18n programming to know that you should probably always be using UTF-8 unless you've got a very good reason not to (e.g. you need a fixed width binary representation or you're using a lot of very high bit characters, in which case UTF-32 or its ilk might be better.)

This said, I do prefer to output characters in the ASCII range (even if I am generating UTF-8) and use HTML entities.  Until you've suddenly had part of your CMS re-written to embed text in emails for inclusion into webmail clients you've not known the pain of using character encodings.  Another point worth noting is that the output character encoding often influences the character encoding the browser will submit form data back in and care needs to be taken there.  In short...there's no short answer to this.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>367</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1326734254]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1326734255.2338";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-16 17:17:34]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>380</wp:comment_id>
			<wp:comment_author><![CDATA[Frac&#8217;ing your HTML &laquo; As Thick As Two Short Planks &#8211; Mark Fowler&#039;s Blog]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://twoshortplanks.wordpress.com/2012/01/20/frac/</wp:comment_author_url>
			<wp:comment_author_IP>69.170.134.162</wp:comment_author_IP>
			<wp:comment_date>2012-01-20 09:33:07</wp:comment_date>
			<wp:comment_date_gmt>2012-01-20 09:33:07</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[...] my previous blog entry I talked about encoding weird characters into HTML entities. In this entry I&#8217;m [...]]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327051987.7494";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331465371]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1331465372.027";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-20 09:33:07]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Frac&#039;ing your HTML</title>
		<link>https://twoshortplanks.wordpress.com/2012/01/20/frac/</link>
		<pubDate>Fri, 20 Jan 2012 09:28:08 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=305</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In my <a href="http://blog.twoshortplanks.com/2012/01/13/entities/">previous</a> blog entry I talked about encoding weird characters into HTML entities. In this entry I&#8217;m going to talk about converting some patterns of ASCII - dumb ways of writing fractions - and turning them into HTML entities or Unicode characters.</p>

<h2 id="heygoodlookingwhatscooking">Hey Good Looking, What&#8217;s Cooking?</h2>

<p>Imagine a simple recipe:</p>

<pre><code>&lt;ul&gt;
   &lt;li&gt;1/2 cup of sugar&lt;/li&gt;
   &lt;li&gt;1/2 cup of spice&lt;/li&gt;
   &lt;li&gt;1/4 cup of all things nice&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>While this is nice, <em>we can do better</em>. There&#8217;s nice Unicode
characters for &#188;, &#189; and corresponding HTML entities that we can use to have the browser render them for us. What we need is some way to change all our mucky ASCII into these entities. Faced with this problem on his <a href="http://astray.com/recipes">recipes</a> site European Perl Hacker Léon Brocard wrote a module called <a href="http://metacpan.org/module/HTML::Fraction">HTML::Fraction</a> that could tweak strings of HTML.</p>

<pre><code>use HTML::Fraction;
my $frac = HTML::Fraction-&gt;new();
my $output = $frac-&gt;tweak($string_of_html);
</code></pre>

<p>This module creates output like:</p>

<pre><code>&lt;ul&gt;
   &lt;li&gt;&amp;frac12; cup of sugar&lt;/li&gt;
   &lt;li&gt;&amp;frac12; cup of spice&lt;/li&gt;
   &lt;li&gt;&amp;frac14; cup of all things nice&lt;/li&gt;
&lt;/ul&gt;
</code></pre>

<p>Which renders nicely as:</p>

<ul>
   <li>&#189; cup of sugar</li>
   <li>&#189; cup of spice</li>
   <li>&#188; cup of all things nice</li>
</ul>

<p>HTML::Fraction can even cope with decimal representation in your string. For example:</p>

<p><ul>
 <li>0.5 slugs</li>
 <li>0.67 snails</li>
 <li>0.14 puppy dogs tails</li>
 </ul></p>

<p>Processed with HTML::Fraction renders like so:</p>

<ul><li>&#188; slugs</li><li>&#8532; snails</li><li>&#8528; puppy dogs tails</li></ul>

<h2 id="unicodecharactersinstead">Unicode Characters Instead</h2>

<p>Of course, we don&#8217;t <em>always</em> want to render out HTML. Sometimes we just want a plain old string back. Faced with this issue myself, I wrote a quick subclass called <a href="http://metacpan.org/module/String::Fraction">String::Fraction</a>:</p>

<pre><code>use String::Fraction;
my $frac = String::Fraction-&gt;new();
my $output = $frac-&gt;tweak($string);
</code></pre>

<p>The entire source code of this module is short enough that I can show you it here.</p>

<pre><code>package String::Fraction;
use base qw(HTML::Fraction);

use strict;
use warnings;

our $VERSION = &quot;0.30&quot;;

# Our superclass sometimes uses named entities
my %name2char = (
  '1/4'  =&gt; &quot;\x{00BC}&quot;,
  '1/2'  =&gt; &quot;\x{00BD}&quot;,
  '3/4'  =&gt; &quot;\x{00BE}&quot;,
);

sub _name2char {
  my $self = shift;
  my $str = shift;

  # see if we can work from the Unicode character
  # from the entity returned by our superclass
  my $entity = $self-&gt;SUPER::_name2char($str);
  if ($entity =~ /\A &amp;\#(\d+); \z/x) {
    return chr($1);
  }

  # superclass doesn't return a decimal entity?
  # use our own lookup table
  return $name2char{ $str }
}
</code></pre>

<p>We simply override one method <code>_name2char</code> so that instead of returning a HTML entity we
return corresponding Unicode character.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>305</wp:post_id>
		<wp:post_date>2012-01-20 09:28:08</wp:post_date>
		<wp:post_date_gmt>2012-01-20 09:28:08</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>frac</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>383</wp:comment_id>
			<wp:comment_author><![CDATA[fuzzixfuzzix]]></wp:comment_author>
			<wp:comment_author_email>fuzzix@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/fuzzix</wp:comment_author_url>
			<wp:comment_author_IP>89.100.19.40</wp:comment_author_IP>
			<wp:comment_date>2012-01-20 18:10:15</wp:comment_date>
			<wp:comment_date_gmt>2012-01-20 18:10:15</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Neat.

I assume 0.5 slugs becoming ¼ slugs is a typo :)]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327083016.2016";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865312.525764942169189453125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-20 18:10:15]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>384</wp:comment_id>
			<wp:comment_author><![CDATA[fuzzix]]></wp:comment_author>
			<wp:comment_author_email>fuzzix@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/fuzzix</wp:comment_author_url>
			<wp:comment_author_IP>89.100.19.40</wp:comment_author_IP>
			<wp:comment_date>2012-01-20 18:11:14</wp:comment_date>
			<wp:comment_date_gmt>2012-01-20 18:11:14</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Neat.

I assume 0.5 slugs becoming ¼ slugs is a typo :)

(Don't know why that other comment went in as fuzzixfuzzix)]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327083074.8893";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331465360]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331465360.9487";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-20 18:11:14]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>393</wp:comment_id>
			<wp:comment_author><![CDATA[walt Wheeler]]></wp:comment_author>
			<wp:comment_author_email>wheelerw@fairpoint.net</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.209.24.29</wp:comment_author_IP>
			<wp:comment_date>2012-01-27 16:50:36</wp:comment_date>
			<wp:comment_date_gmt>2012-01-27 16:50:36</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Interesting: 

    0.5 slugs              #  half a slug here
    0.67 snails
    ...
Processed with HTML::Fraction renders like so:
    ¼ slugs              # where did the other quarter slug go?
    ⅔ snails
    ...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1327683037.6266";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1331465358]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1331465359.0125";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-01-27 16:50:36]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Coming To America</title>
		<link>https://twoshortplanks.wordpress.com/2012/03/10/changes/</link>
		<pubDate>Sat, 10 Mar 2012 13:33:05 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=315</guid>
		<description></description>
		<content:encoded><![CDATA[Big changes are afoot

Not many people know this yet, but Erena, myself and the girls are in the process of emigrating. Yesterday I completed purchase of our new house in New Lebanon, New York, in the United States of America. Yes, this means that I'm going to be attending London.pm meetings even less than I did when I moved to Chippenham.

One of the consequences of my move is a change of jobs. At the end of April I'll be leaving the wonderful Photobox and starting to do some work for the equally wonderful OmniTI.

Photobox is a great place to work, with a world class Perl team. In the last four years I've worked for them I haven't complemented them enough. What other place can I work next to regular conference speakers? Core committers? People with more CPAN modules than I can shake a stick at? Perl Pumpkins themselves! To be blunt, if I was to stay in the UK I'd can't imagine I'd want to work anywhere else.

It's been an interesting four years, seeing the company grow and grow and dealing with the scalaing problems - both in terms of the number of customers and the challenges of growing the team - and I've really enjoyed it. But new adventure beckons, and I needn't sing the praises of OmniTI to tell everyone here what great company they are and I'm going to be honoured to work with them.

So, once I've completed the gauntlet of my Green Card application (which is scheduled to take many months yet) it'll be off with a hop, skip and a jump over the pond for a new life. Can't wait.]]></content:encoded>
		<excerpt:encoded><![CDATA[Big changes are afoot

Not many people know this yet, but Erena, myself and the girls are in the process of emigrating. Yesterday I completed purchase of our new house in New Lebanon, New York, in the United States of America]]></excerpt:encoded>
		<wp:post_id>315</wp:post_id>
		<wp:post_date>2012-03-10 13:33:05</wp:post_date>
		<wp:post_date_gmt>2012-03-10 13:33:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>changes</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_b07717c3f51f36a5102325fd1e1e09ab</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>444</wp:comment_id>
			<wp:comment_author><![CDATA[arodland]]></wp:comment_author>
			<wp:comment_author_email>andrew@cleverdomain.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>108.5.152.237</wp:comment_author_IP>
			<wp:comment_date>2012-03-17 17:39:46</wp:comment_date>
			<wp:comment_date_gmt>2012-03-17 17:39:46</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just a few miles away and you could have been living in Chatham.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>6456703</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:14:"1332005987.587";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"arodland";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1332025651]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332025651.8182";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-17 17:39:46]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>445</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.67.5.187</wp:comment_author_IP>
			<wp:comment_date>2012-03-17 23:11:02</wp:comment_date>
			<wp:comment_date_gmt>2012-03-17 23:11:02</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Seven years ago Erena did live in Chatham, before she moved to the UK]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>444</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332025863.9962";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1332025863]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-17 23:11:02]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>510</wp:comment_id>
			<wp:comment_author><![CDATA[antonio lorusso (@antoniolorusso)]]></wp:comment_author>
			<wp:comment_author_email>antoniolorusso@twitter.example.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/antoniolorusso</wp:comment_author_url>
			<wp:comment_author_IP>2.99.59.227</wp:comment_author_IP>
			<wp:comment_date>2012-04-27 13:04:31</wp:comment_date>
			<wp:comment_date_gmt>2012-04-27 13:04:31</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[good luck Mark!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1335780818]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335780819.3528";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[28162725]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[twitter]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://a0.twimg.com/profile_images/593502936/Photo_2_normal.jpg]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1335531872.1725";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-04-27 13:04:31]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Oh Function Call, Oh Function Call, Wherefore Art Thou Function Call</title>
		<link>https://twoshortplanks.wordpress.com/2012/03/27/wherefunction/</link>
		<pubDate>Tue, 27 Mar 2012 16:05:20 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=318</guid>
		<description></description>
		<content:encoded><![CDATA[<p>Ever wondered where all places a function is called in Perl? Turns out that during my jetlagged ridden first day back at work, I wrote a module that can do just that called <a href="https://metacpan.org/release/Devel-CompiledCalls">Devel::CompiledCalls</a>.</p>

<p>Use of the module is easy. You just load it from the command line:</p>

<pre><code>shell$ perl -c -MDevel::CompiledCalls=Data::Dumper::Dumper myscript.pl
</code></pre>

<p>And BAM, it prints out just what you wanted to know:</p>

<pre><code>Data::Dumper::Dumper call at line 100 of MyModule.pm
Data::Dumper::Dumper call at line 4 of myscript.pl
myscript.pl syntax OK
</code></pre>

<p>While traditionally it&#8217;s been easy to write code using modules like <a href="https://metacpan.org/release/Hook-LexWrap">Hook::LexWrap</a> that prints out whenever a function is executed and at that point where that function is called from, what we really want is to print out at the time the call to the function is compiled by the Perl compiler. This is important because you might have a call to the function in some code that is only executed very infrequently (e.g. leap year handling) which would not be simply identified by hooking function execution at run time.</p>

<p>In the past developers have relied too much on tools like search and replace in our editors to locate the function calls. Given that Perl is hard to parse, and given that many of the calls might be squirreled away in installed modules that your editor doesn&#8217;t typically have open, this isn&#8217;t the best approach.</p>

<p>What Devel::CompiledCalls does is hook the compilation of the code (techically, we hook the CHECK phase of the code, but the effect is the same) with Zefram&#8217;s <a href="https://metacpan.org/release/B-CallChecker">B::CallChecker</a>. This allows the callback to fire as soon as the code is read in by Perl.</p>

<p>All in all, I&#8217;m pretty happy with the module and it&#8217;s a new tool in my bag of tricks for getting to grips with big, unwieldy codebases.</p>
]]></content:encoded>
		<excerpt:encoded><![CDATA[Ever wondered where all places a function is called in Perl? Turns out that during my jetlagged ridden first day back at work, I wrote a module that can do just that called <a href="https://metacpan.org/release/Devel-CompiledCalls">Devel::CompiledCalls</a>.</p>
]]></excerpt:encoded>
		<wp:post_id>318</wp:post_id>
		<wp:post_date>2012-03-27 16:05:20</wp:post_date>
		<wp:post_date_gmt>2012-03-27 16:05:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wherefunction</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>453</wp:comment_id>
			<wp:comment_author><![CDATA[tempire]]></wp:comment_author>
			<wp:comment_author_email>glen@empireenterprises.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>71.197.96.163</wp:comment_author_IP>
			<wp:comment_date>2012-03-28 05:28:44</wp:comment_date>
			<wp:comment_date_gmt>2012-03-28 05:28:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Neat.  I'm guessing it doesn't work with blessed object method calls?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332912525.2355";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:8:"tempire1";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1332918412]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1332918412.1929";s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-03-28 05:28:44]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>502</wp:comment_id>
			<wp:comment_author><![CDATA[aaron]]></wp:comment_author>
			<wp:comment_author_email>aaronwontbudge@yahoo.co.uk</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>82.24.106.176</wp:comment_author_IP>
			<wp:comment_date>2012-04-15 14:57:24</wp:comment_date>
			<wp:comment_date_gmt>2012-04-15 14:57:24</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The phrase actually began as "Thick as two SHORE planks", as in the planks used to stop boats hitting the dock. I love to hear people describing the thickness of short planks...like they are thicker than long planks!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";s:15:"1334501844.4972";s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865312.760818004608154296875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-04-15 14:57:24]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>5.18 Hash Key Ordering Changes In A Nutshell</title>
		<link>https://twoshortplanks.wordpress.com/2013/05/20/5-18-hash-keys/</link>
		<pubDate>Mon, 20 May 2013 16:46:48 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=321</guid>
		<description></description>
		<content:encoded><![CDATA[<pre><code>$ perlbrew switch perl-5.16.3
$ perl -E '%h=map {$_=&gt;1} (1..10); say join ",",keys %h for 1..3'
6,3,7,9,2,8,1,4,10,5
6,3,7,9,2,8,1,4,10,5
6,3,7,9,2,8,1,4,10,5
$ perl -E '%h=map {$_=&gt;1} (1..10); say join ",",keys %h for 1..3'
6,3,7,9,2,8,1,4,10,5
6,3,7,9,2,8,1,4,10,5
6,3,7,9,2,8,1,4,10,5
$ perlbrew switch perl-5.18.0
$ perl -E '%h=map {$_=&gt;1} (1..10); say join ",",keys %h for 1..3'
10,2,8,3,6,9,5,4,1,7
10,2,8,3,6,9,5,4,1,7
10,2,8,3,6,9,5,4,1,7
$ perl -E '%h=map {$_=&gt;1} (1..10); say join ",",keys %h for 1..3'
4,6,9,1,10,3,2,7,8,5
4,6,9,1,10,3,2,7,8,5
4,6,9,1,10,3,2,7,8,5
</code></pre>

Now each execution has its own hash key ordering (but hash key ordering is the same for the duration of the execution until you insert a new key.)

perl-5.18 increases the chance that keys will be reordered when inserts happen:
<pre><code>
$ perlbrew switch perl-5.16.3
$ perl -E 'for (1..20) { $h{$_}=1; say join ",",keys %h }'
1
1,2
1,3,2
4,1,3,2
4,1,3,2,5
6,4,1,3,2,5
6,4,1,3,7,2,5
6,3,7,2,8,1,4,5
6,3,7,9,2,8,1,4,5
6,3,7,9,2,8,1,4,10,5
6,11,3,7,9,2,8,1,4,10,5
6,11,3,7,9,12,2,8,1,4,10,5
6,11,3,7,9,12,2,8,1,4,13,10,5
6,11,3,7,9,12,2,14,8,1,4,13,10,5
6,11,3,7,9,12,2,15,14,8,1,4,13,10,5
11,7,2,1,16,13,6,3,9,12,14,15,8,4,10,5
11,7,17,2,1,16,13,6,3,9,12,14,15,8,4,10,5
11,7,17,2,1,18,16,13,6,3,9,12,14,15,8,4,10,5
11,7,17,2,1,18,16,13,6,3,9,12,14,15,8,4,19,10,5
11,7,17,2,1,18,16,13,6,3,9,12,20,14,15,8,4,19,10,5
$ perlbrew switch perl-5.18.0
$ perl -E 'for (1..20) { $h{$_}=1; say join ",",keys %h }'
1
2,1
1,2,3
2,4,1,3
4,1,2,5,3
2,4,1,5,3,6
4,1,2,6,5,7,3
7,8,1,3,5,6,2,4
4,2,6,3,5,8,1,9,7
9,7,8,1,6,3,5,10,4,2
9,7,11,8,1,6,5,10,3,4,2
11,8,1,7,9,2,12,4,5,10,3,6
4,13,12,2,6,3,5,10,8,1,11,9,7
11,14,8,1,7,9,2,12,4,13,5,10,3,6
4,13,12,15,2,6,3,5,10,14,8,1,11,9,7
9,16,7,8,14,3,13,12,15,2,1,11,6,5,10,4
5,10,17,6,4,11,1,3,2,12,15,13,16,7,9,8,14
4,17,6,5,10,1,11,13,12,15,2,18,3,8,14,9,16,7
17,6,5,10,4,1,11,19,3,13,12,15,2,18,9,16,7,8,14
11,1,4,5,10,17,6,8,14,16,7,9,2,18,20,12,15,13,3,19</code></pre>

This can be controlled with the <a href="https://metacpan.org/module/RJBS/perl-5.18.0/pod/perldelta.pod#PERL_PERTURB_KEYS-environment-variable-added">PERL_PERTURB_KEYS</a> environment variable

<pre><code>
$ perlbrew switch perl-5.18.0
$ PERL_PERTURB_KEYS=0 perl -E'for (1..20) { $h{$_}=1; say join ",",keys %h }'
1
2,1
3,2,1
3,2,1,4
5,3,2,1,4
5,6,3,2,1,4
5,6,3,2,1,4,7
5,2,3,6,8,1,4,7
5,2,3,6,8,9,1,4,7
5,2,3,6,10,8,9,1,4,7
5,2,3,6,10,11,8,9,1,4,7
5,2,3,6,10,11,12,8,9,1,4,7
5,2,3,6,10,13,11,12,8,9,1,4,7
5,2,3,6,10,13,11,14,12,8,9,1,4,7
5,2,3,6,10,13,11,14,12,8,15,9,1,4,7
3,14,12,16,8,15,9,4,7,5,6,2,10,11,13,1
17,3,14,12,16,8,15,9,4,7,5,6,2,10,11,13,1
18,17,3,14,12,16,8,15,9,4,7,5,6,2,10,11,13,1
18,17,3,19,14,12,16,8,15,9,4,7,5,6,2,10,11,13,1
18,17,3,19,14,12,16,8,15,9,4,7,5,6,2,10,11,13,20,1
</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>321</wp:post_id>
		<wp:post_date>2013-05-20 16:46:48</wp:post_date>
		<wp:post_date_gmt>2013-05-20 16:46:48</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>5-18-hash-keys</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_dddce98ec16497fbac5ea48ca8bb8cfb</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_df02052a198ceb9613e75c6940f97716</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_8e26016fce590a6484cc4ddd690f0876</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_2f894518349e1d63d1e69dee03173319</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_f3f705dc8f6cb1264008f4c672546eba</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>571</wp:comment_id>
			<wp:comment_author><![CDATA[陈云星 (@ChinaYXing)]]></wp:comment_author>
			<wp:comment_author_email>ChinaYXing@twitter.example.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/ChinaYXing</wp:comment_author_url>
			<wp:comment_author_IP>183.156.125.100</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 15:30:45</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 15:30:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I run 5.17, it act like 5.18 , does the feature has added in 5.17 ?]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369755046.262177944183349609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[twitter]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://a0.twimg.com/profile_images/2970712851/c00396d1fa51cbd283f47419d0ca96df_normal.jpeg]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[1008934442]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1369755128]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369755128.4323608875274658203125;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2013-05-28 15:30:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>572</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>216.227.60.230</wp:comment_author_IP>
			<wp:comment_date>2013-05-28 15:37:21</wp:comment_date>
			<wp:comment_date_gmt>2013-05-28 15:37:21</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Perl uses a even-is-stable and odd-is-development version numbering system.  This means that 5.17 is the number for the development versions of 5.18.

You shouldn't be running 5.17 any more.  You should upgrade either to 5.18 (the stable version of 5.17) or move onto bleed-perl or 5.19.X when it's released if and only if you need to track unstable changes to Perl.  You really shouldn't use odd numbered perls in production.

In answer to the question if 5.17 has the hash key changes in it or not - I'm not sure, I guess it depends on what version of 5.17 you're running and when the changes were introduced.  You can always run the examples I have in the post on your version of Perl and see what it does.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>571</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1369755442]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1369755442.3060638904571533203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2013-05-28 15:37:21]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4064</wp:comment_id>
			<wp:comment_author><![CDATA[凡人修真私服一条龙www.i5gm.comQQ1325876192]]></wp:comment_author>
			<wp:comment_author_email>khtshslfybd@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.i5gm.com/</wp:comment_author_url>
			<wp:comment_author_IP>175.153.40.155</wp:comment_author_IP>
			<wp:comment_date>2016-03-26 13:00:38</wp:comment_date>
			<wp:comment_date_gmt>2016-03-26 13:00:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[IDC服务器以及空间租用**私服服务端出售开区一条龙
传奇广告代理(详细介绍)-http://www.n7ss.com/index15.htm
官方网站:http://www.n7ss.com
客服咨询QQ1292124634(企鹅扣扣)
Email:1292124634@qq.com
www.n7ss.com商业服务端版本下载地址(已修复不能下载问题):
http://www.n7ss.com/soft/index.html
传奇世界私服开服一条龙服务-http://www.n7ss.com
魔域开区sf一条龙开区服务-http://www.n7ss.com
魔兽私服开区一条龙服务-http://www.n7ss.com
凡人修真私服一条龙www.i5gm.comQQ1325876192 http://www.i5gm.com/]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1458997239.2701969146728515625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1458997240]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1459001260.55084991455078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title> On Diversity in Tech Communities</title>
		<link>https://twoshortplanks.wordpress.com/2012/09/02/diversity/</link>
		<pubDate>Sun, 02 Sep 2012 01:10:05 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=322</guid>
		<description></description>
		<content:encoded><![CDATA[One of the advantages of working from home is that I can do more interesting&nbsp;things with my lunch break that simply eat lunch. So, every week for three&nbsp;years I took my daughters to a local sing-a-long group.

Now as you can imagine, this group was primarily made up of mothers and their&nbsp;children. The people who run the sessions are women. On the odd occasion&nbsp;another father would turn up, but it was mostly just me and thirty&nbsp;women and their children.

No-one ever implied that I shouldn't be there. No-one ever made jokes about men&nbsp;being useless. People didn't try to have "Cosmo" type conversations with me&nbsp;that would make me blush. No-one even made any comment implying it was un-manly&nbsp;for me to sing along with nursery rhymes like all the other parents did.

All in all you could say it was great. I'd never accuse anyone at any of these&nbsp;events of being sexist.

But then again, every so often the group would sing a song about Bobby Shaftoe.&nbsp;For those of you not familar the lyrics go:
<p style="padding-left:30px;">Bobby Shaftoe went to sea,
Silver buckles on his knee.
He'll come back and marry me,
Pretty Bobby Shaftoe.</p>

I never - in three years - spoke up about how uncomfortable these lyrics are for&nbsp;a straight man to sing. In the end I just stopped singing them.

Did this really bother me that much? Not really, otherwise I would have said&nbsp;something. But it let me experience in the tiniest possible little way what it's&nbsp;like to be suddenly reminded that you're different to everyone else in the&nbsp;group and to find out that you can't join in what everyone else is doing&nbsp;because it's not designed for you.

So, with this in mind I wish that people would understand that when I'm&nbsp;suggesting a code of conduct for a tech community my primary objective is not to&nbsp;suggest a list of things you can and can't do. Nor am I suggesting that people&nbsp;are deliberately being nasty. I'm just trying to encourage everyone to think a&nbsp;little wider about the other people in their community that aren't just like&nbsp;them - because even the best of us sometimes can have a blind spot. You know,&nbsp;it's not always about the big things.

Sometimes I just don't want community member to have to sing songs about their&nbsp;desire to marry a sailorman. And if they do find themselves in a situation&nbsp;where someone is asking them to declare their desire for silver buckled knee&nbsp;wearers that they feel like they can politely point out that they shouldn't have&nbsp;to.

That is all.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>322</wp:post_id>
		<wp:post_date>2012-09-02 01:10:05</wp:post_date>
		<wp:post_date_gmt>2012-09-02 01:10:05</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>diversity</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="perl"><![CDATA[Perl]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_old_slug</wp:meta_key>
			<wp:meta_value><![CDATA[on-diversity-in-tech-communities]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Another Feature Perl 5 Needs in 2012</title>
		<link>https://twoshortplanks.wordpress.com/2012/09/13/another-feature-perl-5-needs-in-2012/</link>
		<pubDate>Thu, 13 Sep 2012 07:27:10 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=328</guid>
		<description></description>
		<content:encoded><![CDATA[<p>In <a href="http://www.modernperlbooks.com/mt/2012/09/features-perl-5-needs-in-2012.html">Features Perl 5 Needs in 2012</a> chromatic asks the question <em>What's on your list?</em>  Well, my list is long.  But the thing at the top is <strong>structured core exceptions</strong>.</p><p>While I don't think Perl 5's exception throwing syntax is completely solved by Try::Tiny (just as it's time for Perl 5 to have it's own MOP it's time for Perl 5 to have its own exception handling syntax to solve <em>that</em> problem in a well-defined way too) that's not the biggest stumbling block to having awesome exception handling in Perl 5.  The main problem is that Perl 5 still throwing plain old strings as exceptions.</p><p>Often I find myself wanting to catch all IO errors, but not runtime stupid-coding errors (My error code is going to handle  a dumb filename, but it's totally not going to know what to do if I've typoed a method name.)  This is <em>hard</em> because my code has to parse the exception string - essentially throw a bunch of regular expressions at it - until it can <em>hopefully</em> figure out what's going on.  And, of couse, I say <em>hopefully</em> because the strings can (and should, as improvements are made) change between versions of perl.</p><p>The correct solution is for Perl to throw structured exceptions.  Where all IO errors are a subclass of the main IO error and all bad method calls are a subclass of the DispatchError error or somesuch.  Then I only have to check that $@ isa IO Error and the whole problem becomes simple.</p><p>Now in theory someone could build a version of Try::Tiny that had all this logic built in - did all this parsing for me - so it would <em>seem</em> like I had structured exceptions for all the inbuilt errors.  And as long as this module was updated for each version of perl this would probably work and maybe just be good enough.  But it's not the correct solution!  It's going to be slow (oh so slow) and brittle and...<em>bad and right</em>.  I want (no, I demand!) a <em>good and right</em> solution.  Enough with the band-aids!</p><p>So structured core exceptions goes to the top of my list.  Which of course means very little since I'm not a core Perl hacker (nor do I play one on TV) and I'm not going to have time or skills to do it myself.  But if the TPF wants to take some of that money I'm paying for core development every month and pay someone to do it, I'd be a very happy Perl programmer. </p>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>328</wp:post_id>
		<wp:post_date>2012-09-13 07:27:10</wp:post_date>
		<wp:post_date_gmt>2012-09-13 07:27:10</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>another-feature-perl-5-needs-in-2012</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:comment>
			<wp:comment_id>549</wp:comment_id>
			<wp:comment_author><![CDATA[Sam Kaufmfan]]></wp:comment_author>
			<wp:comment_author_email>sam@socialflow.com</wp:comment_author_email>
			<wp:comment_author_url>http://socialflow.com</wp:comment_author_url>
			<wp:comment_author_IP>66.108.24.148</wp:comment_author_IP>
			<wp:comment_date>2012-09-21 02:37:06</wp:comment_date>
			<wp:comment_date_gmt>2012-09-21 02:37:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[What happened to Err? it sounded cool from your talk at yapc ( http://www.youtube.com/watch?v=QxINO5LpAZE&amp;feature=plcp ) but it's got a big fat warning on it on CPAN.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1348195027.394527912139892578125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1348222957]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-21 02:37:06]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>532</wp:comment_id>
			<wp:comment_author><![CDATA[dimitar petrov]]></wp:comment_author>
			<wp:comment_author_email>mitakaa@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>178.27.116.127</wp:comment_author_IP>
			<wp:comment_date>2012-09-13 12:46:19</wp:comment_date>
			<wp:comment_date_gmt>2012-09-13 12:46:19</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+1 for structured exceptions in the core]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347540380.26091289520263671875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347540476]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347540476.392899990081787109375;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-13 12:46:19]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>533</wp:comment_id>
			<wp:comment_author><![CDATA[ilmari]]></wp:comment_author>
			<wp:comment_author_email>ilmari+twoshortplanks@ilmari.org</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>195.81.245.98</wp:comment_author_IP>
			<wp:comment_date>2012-09-13 15:38:45</wp:comment_date>
			<wp:comment_date_gmt>2012-09-13 15:38:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[autodie throws structured exception objects, FWIW.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347550725]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347550725.9783780574798583984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-13 15:38:45]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>534</wp:comment_id>
			<wp:comment_author><![CDATA[Ricardo Signes (@rjbs)]]></wp:comment_author>
			<wp:comment_author_email>rjbs@twitter.example.com</wp:comment_author_email>
			<wp:comment_author_url>http://twitter.com/rjbs</wp:comment_author_url>
			<wp:comment_author_IP>64.121.172.235</wp:comment_author_IP>
			<wp:comment_date>2012-09-13 16:30:04</wp:comment_date>
			<wp:comment_date_gmt>2012-09-13 16:30:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'd love to see structured exceptions and have pushed for them in the past and done some preliminary classification of existing exceptions.  The problem with paying someone is... who?  I hope somebody does put in a grant application, though.  I'd love to see it happen.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>hc_post_as</wp:meta_key>
				<wp:meta_value><![CDATA[twitter]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347553805.32468700408935546875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_avatar</wp:meta_key>
				<wp:meta_value><![CDATA[http://a0.twimg.com/profile_images/1691691170/rjbs-jcash-scaled-square_normal.jpg]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>hc_foreign_user_id</wp:meta_key>
				<wp:meta_value><![CDATA[13982282]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347557972]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347557973.0005810260772705078125;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-13 16:30:04]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>535</wp:comment_id>
			<wp:comment_author><![CDATA[Salvador Fandiño]]></wp:comment_author>
			<wp:comment_author_email>sfandino@yahoo.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/salvafg</wp:comment_author_url>
			<wp:comment_author_IP>92.56.141.98</wp:comment_author_IP>
			<wp:comment_date>2012-09-14 12:45:57</wp:comment_date>
			<wp:comment_date_gmt>2012-09-14 12:45:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[+Inf]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347626758.5601680278778076171875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"salvafg";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347658103]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347658103.0985848903656005859375;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-14 12:45:57]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>541</wp:comment_id>
			<wp:comment_author><![CDATA[David E. Wheeler]]></wp:comment_author>
			<wp:comment_author_email>david@justatheory.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/kineticode</wp:comment_author_url>
			<wp:comment_author_IP>74.121.28.6</wp:comment_author_IP>
			<wp:comment_date>2012-09-18 20:01:29</wp:comment_date>
			<wp:comment_date_gmt>2012-09-18 20:01:29</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Yes, this is at the top of my list, too. I've been meaning to blog this, but am pleased that now I don't have to. (Yes, I'm lazy—thanks Mark!).

I think that a new syntax ought to go along with it, too. My primary problem with Try::Tiny is that it uses code refs rather than blocks. This means that when you <code>return</code>, it just returns to the context that invoked <code>try</code>, rather than the bock the <code>try</code> was called from, which is how <code>eval</code> and <code>do</code>, among others, work. It's how <code>try</code> should work, too.

But yeah, structured exceptions are the most important part, no doubt.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347998490.3041059970855712890625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"kineticode";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347998565]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347998565.625029087066650390625;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-18 20:01:29]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>542</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.195.51.3</wp:comment_author_IP>
			<wp:comment_date>2012-09-18 20:05:50</wp:comment_date>
			<wp:comment_date_gmt>2012-09-18 20:05:50</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[So, going completely off topic of structured exceptions and onto Try::Tiny block problems, the solution I use for returning from the scope containing the <code>try</code> and <code>catch</code> 'block' is to use <code>RETURN</code> which is provided by <a href="https://metacpan.org/module/Error::Return" rel="nofollow">Error::Return</a>

<code><pre>
use Try::Tiny;
use Error::Return;
 
sub foo {
    # ...
    try {
        # ...
        # return() here doesn't do what you might think it does
        RETURN 'bar';  # this actually returns from foo()
        # ...
    } catch {
        warn "caught error [$_]\n";
    };
    # ...
}
</pre></code>

Of course, this is a syntax hack, and is something that needs fixing.  But until it is fixed.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>541</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1347998751]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1347998751.448913097381591796875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-18 20:05:50]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>545</wp:comment_id>
			<wp:comment_author><![CDATA[McA]]></wp:comment_author>
			<wp:comment_author_email>andreas.mock@web.de</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>188.174.106.10</wp:comment_author_IP>
			<wp:comment_date>2012-09-19 19:49:55</wp:comment_date>
			<wp:comment_date_gmt>2012-09-19 19:49:55</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[The build-in exceptions are one big reason why I looked at Python years ago. IMHO it's missing dreadfully.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1348084196.1950609683990478515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1348084834]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-19 19:49:55]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>551</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>69.195.54.224</wp:comment_author_IP>
			<wp:comment_date>2012-09-21 10:24:01</wp:comment_date>
			<wp:comment_date_gmt>2012-09-21 10:24:01</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good point.  I've been using it on my own DarkPAN stuff for ages and its essentially fine.  I should re-release without the warning.  Watch this space.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>549</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1348223041]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1348223041.273521900177001953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2012-09-21 10:24:01]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Mavericks and mod_perl</title>
		<link>https://twoshortplanks.wordpress.com/?p=352</link>
		<pubDate>Wed, 23 Apr 2014 18:23:51 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=352</guid>
		<description></description>
		<content:encoded><![CDATA[So, I had an occasion to try and install mod_perl with a Perlbrew created perl (opposed to the system perl as supplied by apple.)

It didn't work;  It failed tests rather terribly:

Syntax error on line 205 of /Users/Mark/.cpanm/work/1398258436.64970/mod_perl-2.0.8/t/conf/httpd.conf:
Cannot load /Users/Mark/.cpanm/work/1398258436.64970/mod_perl-2.0.8/src/modules/perl/mod_perl.so into server:
dlopen(/Users/Mark/.cpanm/work/1398258436.64970/mod_perl-2.0.8/src/modules/perl/mod_perl.so, 10): Symbol not found:
 _modperl_handler_name

Which is a funny way of saying "er, when I tried to load the mod_perl.so I couldn't find the _modperl_handler_name in it".

I did some googling.  I read the pod inside mod_perl.  And then I had an inkling of what is going on.

mod_perl uses a macro MP_INLINE to prefix certain functions so that when mod_perl is compiled they can be turned into inline functions (which are faster, but not linkable) in the situations where mod_perl is, say, compiled into the httpd itself.  For some reason this was happening when mod_perl was being compiled into mod_perl.so, which resulted in the "wtf" error above.

So, I took a hatchet to the mod_perl source code.  And ripped out these lines from <code>src/modules/perl/modperl_common_util.h</code>
<code>
#ifdef MP_DEBUG
#define MP_INLINE
#else
#define MP_INLINE APR_INLINE
#endif
</code>

And replaced them with a simple:
<code>
#define MP_INLINE
</code>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>352</wp:post_id>
		<wp:post_date>2014-04-23 18:23:51</wp:post_date>
		<wp:post_date_gmt>2014-04-23 18:23:51</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mavericks and XCode 5 and WWW::Curl</title>
		<link>https://twoshortplanks.wordpress.com/?p=369</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=369</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes you go through a lot of pain trying to get something to work, and you just need to write it down and put it on the internet.  You tell yourself this is useful;  You're doing it so that others can find your words and solve the problem too.  In reality, it's just cathartic.  And who doesn't like a good rant?

## So What Broke? ##

I recently updated my Mac to Mavericks (OS X 10.9).  Overall, I like it...but it broke something I care about. It broke <a href="http://curl.haxx.se/mail/archive-2013-10/0036.html">libcurl's handling of certificates.</a>, and in so doing broke my install of WWW::Curl also (since it's a wrapper around the system libcurl.)  This is remarkably hard to diagnose, because it just seems like the servers have suddenly stopped trusting each other (when in reality libcurl has just started effectively ignoring the options you're sending)

Now, WWW::Curl (and its working certificate handling) is a dependency of some of the code I'm using.  Worse than forcing me to disable certificate security, I actually need to identify myself to the server with my own cert.  Just turning them off and running 

## Installing libcurl ##

I'm not a great fan of installing software from source on my mac after having been bitten by fink and it's kin numerous times in the past.  This said, <a href="http://brew.sh/">homebrew</a> is actually pretty darn nifty, and can be used to install libcurl:

    brew install curl   

Wrrr, clunk, clunk and zap, I have `curl` in `/usr/local/Cellar/gcc47/4.7.3/bin`.  Hooray!

## Installing WWW::Curl ##

Now all we have to do is install WWW::Curl and link it against this libcurl, right?  Well, I did this:

   wget http://cpan.metacpan.org/authors/id/S/SZ/SZBALINT/WWW-Curl-4.15.tar.gz
   gunzip -c WWW-Curl-4.15.tar.gz | tar -xvf -
   cd WWW-Curl-4.15
   export CURL_CONFIG=/usr/local/Cellar/curl/7.33.0/bin/curl-config
   perl Makefile.PL

And things started to go wrong:

    The version is libcurl 7.33.0
    Found curl.h in /usr/local/Cellar/curl/7.33.0/include/curl/curl.h
    In file included from /usr/local/Cellar/curl/7.33.0/include/curl/curl.h:34:
    In file included from /usr/local/Cellar/curl/7.33.0/include/curl/curlbuild.h:152:
    In file included from /usr/include/sys/socket.h:80:
    In file included from /usr/include/Availability.h:148:
    /usr/include/AvailabilityInternal.h:4098:10: error: #else without #if
            #else
             ^
    /usr/include/AvailabilityInternal.h:4158:10: error: unterminated conditional directive
            #if __MAC_OS_X_VERSION_MIN_REQUIRED &gt;= __MAC_10_6
             ^
    /usr/include/AvailabilityInternal.h:4131:10: error: unterminated conditional directive
            #if __MAC_OS_X_VERSION_MIN_REQUIRED &gt;= __MAC_10_5
             ^
    /usr/include/AvailabilityInternal.h:4108:10: error: unterminated conditional directive
            #if __MAC_OS_X_VERSION_MIN_REQUIRED &gt;= __MAC_10_4
             ^
    4 errors generated.
    Building curlopt-constants.c for your libcurl version
    Building Easy.pm constants for your libcurl version
    Building Share.pm constants for your libcurl version
    Checking if your kit is complete...
    Looks good
    Writing Makefile for WWW::Curl
    Writing MYMETA.yml and MYMETA.json

That Ladies and Gentlemen is the sound of Apple's compiler sucking.  You see, not so long ago I upgraded to XCode 5 and <a href="">apparently this no longer ships with gcc</a>.  Uh oh.

### Installing gcc ###

I suspect I could have just re-downloaded XCode 4 and then used `xcode-select`.  But I didn't.  Let me know if that works, okay?  This is what I actually did:

   brew install gcc47

Then I waited a long time (while doing something else productive instead.)  Finally when I was done I had to manually edit the Makefile.PL to use the right preprocessor:

   perl -pi -e 's!cpp"!/usr/local/Cellar/gcc47/4.7.3/bin/cpp"!' Makefile.PL
   perl Makefile.PL

(yeah, it'd be nice if they'd been some sort of option for that.)  Then I altered the makefile for good measure too:

    perl -pi -e 's{CC = cc}{CC = /usr/local/Cellar/gcc47/4.7.3/bin/gcc-4.7}' Makefile

And then I could build it all.

Of course, it still got errors.  But they're <a href="https://rt.cpan.org/Public/Bug/Display.html?id=88348">not new errors</a>.  So I force installed it and now it all 'works'.

I hate computers sometimes.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>369</wp:post_id>
		<wp:post_date>2013-11-22 21:13:14</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>curl</wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Mavericks, XCode 5 and WWW::Curl</title>
		<link>https://twoshortplanks.wordpress.com/2013/11/22/wwwcurl/</link>
		<pubDate>Fri, 22 Nov 2013 21:20:02 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=373</guid>
		<description></description>
		<content:encoded><![CDATA[Sometimes you go through a lot of pain trying to get something to work, and you just need to write it down and put it on the internet.  You tell yourself this is useful;  You're doing it so that others can find your words and solve the problem too.  In reality, it's just cathartic.  And who doesn't like a good rant?

<h2>So What Broke?</h2>

I recently updated my Mac to Mavericks (OS X 10.9).  Overall, I like it...but it broke something I care about. It broke <a href="http://curl.haxx.se/mail/archive-2013-10/0036.html">libcurl's handling of certificates.</a>, and in so doing broke my install of WWW::Curl also (since it's a wrapper around the system libcurl.)  This is remarkably hard to diagnose, because it just seems like the servers have suddenly stopped trusting each other (when in reality libcurl has just started effectively ignoring the options you're passing to it.)

Now, WWW::Curl (and its working certificate handling) is a dependency of some of the code I'm using.  Worse than forcing me to disable certificate security, I actually need to identify myself to the server with my own cert.  Just turning them off and running insecurely <em>won't</em> <em>work</em>.

<h2>Installing libcurl</h2>

I'm not a great fan of installing software from source on my mac after having been bitten by fink and it's kin numerous times in the past.  This said, <a href="http://brew.sh/">homebrew</a> is actually pretty darn nifty, and can be used to install libcurl:

<pre><code>brew install curl   
</code></pre>

Wrrr, clunk, clunk and zap, I have a non broken <code>curl</code> in <code>/usr/local/Cellar/gcc47/4.7.3/bin</code>.  Hooray!  This one actually deems to listen to the command line options you pass it!

<h2>Installing WWW::Curl</h2>

Now all we have to do is install WWW::Curl and link it against this libcurl, right?  Well, I did this:

<pre><code>wget http://cpan.metacpan.org/authors/id/S/SZ/SZBALINT/WWW-Curl-4.15.tar.gz
gunzip -c WWW-Curl-4.15.tar.gz | tar -xvf -
cd WWW-Curl-4.15
export CURL_CONFIG=/usr/local/Cellar/curl/7.33.0/bin/curl-config
perl Makefile.PL
</code></pre>

And things started to go wrong:

<pre><code>The version is libcurl 7.33.0
Found curl.h in /usr/local/Cellar/curl/7.33.0/include/curl/curl.h
In file included from /usr/local/Cellar/curl/7.33.0/include/curl/curl.h:34:
In file included from /usr/local/Cellar/curl/7.33.0/include/curl/curlbuild.h:152:
In file included from /usr/include/sys/socket.h:80:
In file included from /usr/include/Availability.h:148:
/usr/include/AvailabilityInternal.h:4098:10: error: #else without #if
        #else
         ^
/usr/include/AvailabilityInternal.h:4158:10: error: unterminated conditional directive
        #if __MAC_OS_X_VERSION_MIN_REQUIRED &amp;gt;= __MAC_10_6
         ^
/usr/include/AvailabilityInternal.h:4131:10: error: unterminated conditional directive
        #if __MAC_OS_X_VERSION_MIN_REQUIRED &amp;gt;= __MAC_10_5
         ^
/usr/include/AvailabilityInternal.h:4108:10: error: unterminated conditional directive
        #if __MAC_OS_X_VERSION_MIN_REQUIRED &amp;gt;= __MAC_10_4
         ^
4 errors generated.
Building curlopt-constants.c for your libcurl version
Building Easy.pm constants for your libcurl version
Building Share.pm constants for your libcurl version
Checking if your kit is complete...
Looks good
Writing Makefile for WWW::Curl
Writing MYMETA.yml and MYMETA.json
</code></pre>

That Ladies and Gentlemen is the sound of Apple's compiler sucking.  You see, not so long ago I upgraded to XCode 5 and <a href="https://developer.apple.com/library/ios/documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_5_0.html#//apple_ref/doc/uid/TP40012953-SW28">apparently this no longer ships with gcc</a>.  Uh oh.

(I don't show the errors you get when you <code>make</code> and <code>make test</code>, but be assured it's all downhill from here)

<h3>Installing gcc</h3>

I suspect I could have just re-downloaded XCode 4 and then used <code>xcode-select</code>.  But I didn't.  Let me know if that works, okay?  This is what I actually did:

<pre><code>brew install gcc47
</code></pre>

Then I waited a long time (while doing something else productive instead.)  Finally when I was done I had to manually edit the Makefile.PL to use the right preprocessor:

<pre><code>perl -pi -e 's!cpp"!/usr/local/Cellar/gcc47/4.7.3/bin/cpp"!' Makefile.PL
perl Makefile.PL
</code></pre>

(yeah, it'd be nice if they'd been some sort of option for that.)  Then I altered the resulting Makefile for good measure too:

<pre><code>perl -pi -e 's{CC = cc}{CC = /usr/local/Cellar/gcc47/4.7.3/bin/gcc-4.7}' Makefile
</code></pre>

And then I could build it all.

<pre><code>make
make test
</code></pre>

Of course, it still got errors.  But they're <a href="https://rt.cpan.org/Public/Bug/Display.html?id=88348">not new errors</a>.  So I pretend I didn't see them and install anyway.

<pre><code>make install
</code></pre>

I hate computers sometimes.
]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>373</wp:post_id>
		<wp:post_date>2013-11-22 21:20:02</wp:post_date>
		<wp:post_date_gmt>2013-11-22 21:20:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>wwwcurl</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>597</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Sibley]]></wp:comment_author>
			<wp:comment_author_email>www+cpan@zulutango.org</wp:comment_author_email>
			<wp:comment_author_url>http://tsibley.net</wp:comment_author_url>
			<wp:comment_author_IP>128.208.120.120</wp:comment_author_IP>
			<wp:comment_date>2014-01-24 22:50:12</wp:comment_date>
			<wp:comment_date_gmt>2014-01-24 22:50:12</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Using xcode 4.6.3 and xcode-select did indeed eliminate the cpp errors during `make`, but WWW::Curl's Makefile.PL was unable to parse the output leading to missing constants and test failures (and an obviously broken build).  Patches at https://github.com/szbalint/WWW--Curl/pull/7 and a full ticket here: https://rt.cpan.org/Ticket/Display.html?id=92448]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1390603812]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1390603812.82219791412353515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490463076]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983360]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983360]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983360.961163043975830078125;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865314.7815010547637939453125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-24 22:50:12]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>598</wp:comment_id>
			<wp:comment_author><![CDATA[Thomas Sibley]]></wp:comment_author>
			<wp:comment_author_email>www+cpan@zulutango.org</wp:comment_author_email>
			<wp:comment_author_url>http://tsibley.net</wp:comment_author_url>
			<wp:comment_author_IP>128.208.120.120</wp:comment_author_IP>
			<wp:comment_date>2014-01-24 22:51:17</wp:comment_date>
			<wp:comment_date_gmt>2014-01-24 22:51:17</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I forgot to say that your post was the keystone to figuring out that Apple's cpp busted libcurl, and I needed to use Xcode 4.  Thank you!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1390603877]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1390603877.3075640201568603515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490465598]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983367]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983367]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983367.0295050144195556640625;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865314.821671962738037109375;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2014-01-24 22:51:17]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>591</wp:comment_id>
			<wp:comment_author><![CDATA[zork]]></wp:comment_author>
			<wp:comment_author_email>zork@glowbuzz.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>76.169.197.101</wp:comment_author_IP>
			<wp:comment_date>2013-11-24 00:47:38</wp:comment_date>
			<wp:comment_date_gmt>2013-11-24 00:47:38</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I prefer MacPorts to homebrew.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1385254058]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1385254058.28116703033447265625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490553848]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983570]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983570]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983570.6645019054412841796875;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1412865314.149794101715087890625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>_elasticsearch_indexed_on</wp:meta_key>
				<wp:meta_value><![CDATA[2013-11-24 00:47:38]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3490</wp:comment_id>
			<wp:comment_author><![CDATA[ramesharangotRa]]></wp:comment_author>
			<wp:comment_author_email>rameshchandran86@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://gravatar.com/ramesharangot</wp:comment_author_url>
			<wp:comment_author_IP>49.207.188.195</wp:comment_author_IP>
			<wp:comment_date>2015-10-18 08:19:04</wp:comment_date>
			<wp:comment_date_gmt>2015-10-18 08:19:04</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am getting the following error after doing "perl Makefile.PL"

Guessing your linker flags as: -lcurl
Cannot find curl.h - cannot build constants files  - see Makefile.PL at Makefile.pl line 96.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445160274.9770259857177734375;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"ramesharangot";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445156344.117413043975830078125;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"ramesharangot";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1445156344]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[15941580310]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3491</wp:comment_id>
			<wp:comment_author><![CDATA[ramesharangot]]></wp:comment_author>
			<wp:comment_author_email>rameshchandran86@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>49.207.188.195</wp:comment_author_IP>
			<wp:comment_date>2015-10-18 08:19:45</wp:comment_date>
			<wp:comment_date_gmt>2015-10-18 08:19:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I am getting the following error after "perl Makefile.PL"

Guessing your linker flags as: -lcurl
Cannot find curl.h - cannot build constants files  - see Makefile.PL at Makefile.pl line 96.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>39852684</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445156385.9384629726409912109375;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"ramesharangot";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[15941593754]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1445156385]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:3:{s:4:"time";d:1445160275.067501068115234375;s:5:"event";s:9:"check-ham";s:4:"user";s:13:"ramesharangot";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Tell me more, tell me more</title>
		<link>https://twoshortplanks.wordpress.com/2014/07/07/tell-me-more-tell-me-more/</link>
		<pubDate>Mon, 07 Jul 2014 00:34:41 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=387</guid>
		<description></description>
		<content:encoded><![CDATA[A new version of <a href="https://metacpan.org/pod/Test::DatabaseRow">Test::DatabaseRow</a> has just escaped onto the CPAN, with a minor new feature <a href="https://metacpan.org/pod/Test::DatabaseRow#verbose_data">verbose data</a> to make working out what went wrong in the database test even easier when the worst happens


In a nutshell this feature allows you to output in diagnostics all the results the database returned (not just listing the first thing that didn't match, which is the default thing <code>row_ok</code> does in a similar way to Test::More's <code>is_deeply</code> does.)


In other words instead of writing this:

<code>

<pre>    all_row_ok(
       table =&gt; "contacts",
       where =&gt; [ cid =&gt; 123 ],
       tests =&gt; [ name =&gt; "trelane" ],
       <b>store_rows =&gt; \@rows</b>,
       description =&gt; "contact 123's name is trelane"
     ) <B>or diag explain \@rows</b>;</pre>

</code>

You can just write this:

<code>

<pre>    all_row_ok(
       table =&gt; "contacts",
       where =&gt; [ cid =&gt; 123 ],
       tests =&gt; [ name =&gt; "trelane" ],
       <b>verbose_data =&gt; 1</b>,
       description =&gt; "contact 123's name is trelane"
     );</pre>

</code>

Or even just write this:

<code>

<pre>    all_row_ok(
       table =&gt; "contacts",
       where =&gt; [ cid =&gt; 123 ],
       tests =&gt; [ name =&gt; "trelane" ],
       description =&gt; "contact 123's name is trelane"
     );</pre>

</code>

And turn on verbosity from the command line when you run the tests

<code><pre>TEST_DBROW_VERBOSE_DATA=1 perl mytest.pl</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>387</wp:post_id>
		<wp:post_date>2014-07-07 00:34:41</wp:post_date>
		<wp:post_date_gmt>2014-07-07 00:34:41</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>tell-me-more-tell-me-more</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7e6ddecf0da5436f96065f8f2d124444</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_5a89f67bf45681854615252b2ce350d1</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_01b754d34bc8754149ad8735c0984b89</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_399b6c7c72e7fea3d3519227cb1a8bf7</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_7e692f673cf8e1df168598bc3c16f845</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c012726dd61a89f5dd9f0fdeaeab4e5b</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2960</wp:comment_id>
			<wp:comment_author><![CDATA[Wild Strawberry Films]]></wp:comment_author>
			<wp:comment_author_email>apriloden@bigstring.com</wp:comment_author_email>
			<wp:comment_author_url>https://twitter.com/WStrawberryFilm</wp:comment_author_url>
			<wp:comment_author_IP>192.126.167.34</wp:comment_author_IP>
			<wp:comment_date>2015-06-02 03:15:57</wp:comment_date>
			<wp:comment_date_gmt>2015-06-02 03:15:57</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Aw, this was an extremely nice post. Spending some time and actual effort to make a superb article… 
but what can I say… I hesitate a whole lot and don't manage to get anything 
done. about LED Outfitters]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1433214959]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433218764.8712170124053955078125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1433214958.484407901763916015625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2499</wp:comment_id>
			<wp:comment_author><![CDATA[รับถ่าย vdo]]></wp:comment_author>
			<wp:comment_author_email>montetasman@yahoo.de</wp:comment_author_email>
			<wp:comment_author_url>https://th-th.facebook.com/dpromgroup</wp:comment_author_url>
			<wp:comment_author_IP>180.180.117.164</wp:comment_author_IP>
			<wp:comment_date>2015-03-03 02:14:43</wp:comment_date>
			<wp:comment_date_gmt>2015-03-03 02:14:43</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[That is very fascinating, You're an excessively professional 
blogger. I have joined your rss feed and stay up for in search of extra of your excellent post.
Also, I've shared your website in my social networks]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425353095.5838739871978759765625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1425348883]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1425348883.810636997222900390625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2766</wp:comment_id>
			<wp:comment_author><![CDATA[animal-games website]]></wp:comment_author>
			<wp:comment_author_email>kevincanada@yahoo.de</wp:comment_author_email>
			<wp:comment_author_url>http://www.animal-games.biz/</wp:comment_author_url>
			<wp:comment_author_IP>178.249.115.179</wp:comment_author_IP>
			<wp:comment_date>2015-04-23 03:09:45</wp:comment_date>
			<wp:comment_date_gmt>2015-04-23 03:09:45</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Hi! Would you mind if I share your blg with my facebook group?
There's a lot of people that I think would really appreciate your content.
Please let me know. Thanjk you]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1429758586]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429758586.157905101776123046875;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1429763973.684689044952392578125;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>4153</wp:comment_id>
			<wp:comment_author><![CDATA[Perlbuzz news roundup for 2014-07-14 &#8211; perlbuzz.com]]></wp:comment_author>
			<wp:comment_author_email></wp:comment_author_email>
			<wp:comment_author_url>http://perlbuzz.com/2014/07/14/perlbuzz_news_roundup_for_2014-07-14/</wp:comment_author_url>
			<wp:comment_author_IP>107.170.87.8</wp:comment_author_IP>
			<wp:comment_date>2016-05-27 19:26:26</wp:comment_date>
			<wp:comment_date_gmt>2016-05-27 19:26:26</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[[&#8230;] Test::DatabaseRow has new debugging functionality (blog.twoshortplanks.com) [&#8230;]]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type>pingback</wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464377187.388289928436279296875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1464381548.514647006988525390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3858</wp:comment_id>
			<wp:comment_author><![CDATA[Caryn]]></wp:comment_author>
			<wp:comment_author_email>latoshaclemens@peacemail.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.dunianewslive.blogspot.com/</wp:comment_author_url>
			<wp:comment_author_IP>118.144.151.145</wp:comment_author_IP>
			<wp:comment_date>2015-12-31 16:57:03</wp:comment_date>
			<wp:comment_date_gmt>2015-12-31 16:57:03</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[My brother suggested I may like this blog. He used to be entirely right.
This submit actually made my day. You cann't believe simply hoow much time I had spent ffor this information! Thank you!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451581024.4112339019775390625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1451581026]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1451585401.5098121166229248046875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3699</wp:comment_id>
			<wp:comment_author><![CDATA[Akasha Chronik]]></wp:comment_author>
			<wp:comment_author_email>teodorodavisson@bigstring.com</wp:comment_author_email>
			<wp:comment_author_url>http://www.schamanischer-heiler.de</wp:comment_author_url>
			<wp:comment_author_IP>216.185.58.210</wp:comment_author_IP>
			<wp:comment_date>2015-12-02 08:31:27</wp:comment_date>
			<wp:comment_date_gmt>2015-12-02 08:31:27</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Great info. Lucky me I found your site by accident (stumbleupon).
I have bookmarked it for later!]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449045088.5802299976348876953125;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1449045089]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1449049129.575603008270263671875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>3916</wp:comment_id>
			<wp:comment_author><![CDATA[vimax garansi]]></wp:comment_author>
			<wp:comment_author_email>myleseasty@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://vimaxaslioriginal.com</wp:comment_author_url>
			<wp:comment_author_IP>36.73.139.202</wp:comment_author_IP>
			<wp:comment_date>2016-01-06 10:11:52</wp:comment_date>
			<wp:comment_date_gmt>2016-01-06 10:11:52</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Good way of explaining, and nice post to take data 
about my presentation focus, which i am going to present in institution of higher 
education.]]></wp:comment_content>
			<wp:comment_approved>0</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452075112.9912970066070556640625;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1452075116]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:2:{s:4:"time";d:1452079350.4963099956512451171875;s:5:"event";s:9:"check-ham";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Perl Advent Calendar 2014 Stats</title>
		<link>https://twoshortplanks.wordpress.com/2014/12/23/perl-advent-calendar-2014-stats/</link>
		<pubDate>Tue, 23 Dec 2014 13:51:46 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.wordpress.com/?p=394</guid>
		<description></description>
		<content:encoded><![CDATA[<a href="http://www.perladvent.org/2014/">The Perl Advent Calendar</a> is finally done and dusted for another year (apart from the typo corrections - there are always typo corrections.)  Which is lucky, since I committed the last submission just two days before Christmas Eve.

Let’s look at some statistics shall we?

The advent calendar is a team effort:

<ul>
<li><strong>Total articles</strong>: 25 (24 articles + xmas day)</li>
<li><strong>Articles written by people than me</strong>: 13</li>
<li><strong>Total number of authors (including me)</strong>: 13</li>
<li><strong>Number of Pull Requests For Typos (so far)</strong>: 8</li>
</ul>

It’s big:

<ul>
<li><strong>T</strong><strong>otal number of lines</strong>: 5,318</li>
<li><strong>Total number of words: </strong>27,323</li>
<li><strong>Total number of graphics: </strong>7 (including two animated gifs)</li>
<li><strong>Longest article</strong>: <a href="http://www.perladvent.org/2014/2014-12-24.html">Christmas Eve’s Article</a> (an epic 745 lines)</li>
<li><strong>Perl examples</strong>: 159</li>
</ul>

It’s Perl:

<ul>
<li><strong>References to Perl</strong>: 171 </li>
<li><strong>References to Moo/Moose</strong>: 38</li>
<li><strong>References to PHP</strong>: 2 (in the <a href="http://www.perladvent.org/2014/2014-12-21.html">example</a> about finding and deleting all the php code)</li>
</ul>

It’s fun

<ul>
<li><strong>References to Santa</strong>: 38</li>
<li><strong>References to Elves</strong>: 44</li>
</ul>

So, maybe now I’m not writing 2,575 lines (12,310 words) into the advent calendar (and copy editing and adding content to the other articles) I can finally get back on the Perl Ironman bandwagon in time for new year? Jarvis, load my blog editor...]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>394</wp:post_id>
		<wp:post_date>2014-12-23 13:51:46</wp:post_date>
		<wp:post_date_gmt>2014-12-23 13:51:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>perl-advent-calendar-2014-stats</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2058</wp:comment_id>
			<wp:comment_author><![CDATA[neilbowers]]></wp:comment_author>
			<wp:comment_author_email>neil@bowers.com</wp:comment_author_email>
			<wp:comment_author_url>http://</wp:comment_author_url>
			<wp:comment_author_IP>82.8.77.60</wp:comment_author_IP>
			<wp:comment_date>2014-12-25 22:25:34</wp:comment_date>
			<wp:comment_date_gmt>2014-12-25 22:25:34</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Thanks for all your effort on the calendar Mark!]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>1040994</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419546334.603661060333251953125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"neilbowers";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1419546334]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1419550049.7044661045074462890625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:10:"neilbowers";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490422445]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983266]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983266]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983266.6187269687652587890625;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>screencast1.gif</title>
		<link>https://twoshortplanks.wordpress.com/2014/12/29/regexpdebugger/screencast1-gif/</link>
		<pubDate>Tue, 23 Dec 2014 14:08:58 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.files.wordpress.com/2014/12/screencast1.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>397</wp:post_id>
		<wp:post_date>2014-12-23 14:08:58</wp:post_date>
		<wp:post_date_gmt>2014-12-23 14:08:58</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>screencast1-gif</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>398</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twoshortplanks.files.wordpress.com/2014/12/screencast1.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2014/12/screencast1.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:499;s:6:"height";i:255;s:4:"file";s:86:"/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2014/12/screencast1.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Regexp::Debugger</title>
		<link>https://twoshortplanks.wordpress.com/2014/12/29/regexpdebugger/</link>
		<pubDate>Mon, 29 Dec 2014 00:00:20 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.wordpress.com/?p=398</guid>
		<description></description>
		<content:encoded><![CDATA[One of the topics that I had scheduled for the <a href="http://www.perladvent.org/2014/">Perl Advent Calendar</a> this year that didn’t finally make the cut was <a href="http://www.metacpan.org/pod/Regexp::Debugger">Regexp::Debugger</a> (It might make it next year, but let’s all pretend I never made this post if that’s the case.)</p>

I really wanted to write an article on Regexp::Debugger because it has such <strong>wow</strong> <strong>factor</strong>.  You <em>just</em> stick a line in the source code and <strong>bam</strong> instant visual debugger.  Suddenly I was finding out in minutes what was wrong with the regular expression that I’d spent half an hour figuring out writing numerous tests.  Sometimes there’s no substitute for getting in there and seeing what’s going on.

The problem with the article is that that’s pretty much <em>all</em> I could say about the module.  It’s almost too simple to use - there’s just nothing else to comment on.  Go.  Go use it.  You won’t regret it.  Hmm.

The other big problem is that it’s almost impossible to describe in words how to use the debugger.  It’s something that works best in a screencast or something similar and we’re not (yet) set up to include those kinds of things in the Perl Advent Calendar.  The article on <a href="http://www.perladvent.org/2014/2014-12-21.html">ack</a> had a couple of animated gifs, but I’m unsure if the one I prepared for Regexp::Debugger really conveys what’s going on without an audio track.  Still, for posterity, here’s the gif I prepared:

<img style="display:block;margin-left:auto;margin-right:auto;" title="screencast1.gif" src="http://twoshortplanks.files.wordpress.com/2014/12/screencast1.gif" alt="Regexp::Debugger demo gif" width="499" height="255" border="0" />]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>398</wp:post_id>
		<wp:post_date>2014-12-29 00:00:20</wp:post_date>
		<wp:post_date_gmt>2014-12-29 00:00:20</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>closed</wp:ping_status>
		<wp:post_name>regexpdebugger</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2125</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.209.23.81</wp:comment_author_IP>
			<wp:comment_date>2015-01-11 13:34:18</wp:comment_date>
			<wp:comment_date_gmt>2015-01-11 13:34:18</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Regexp::Debugger only debugs regexes in lexical scope, so rather than doing <code>use Regexp::Debugger</code> at the top of your file, you could just use it in the subroutine or block that the regexp is in meaning only that regexp will end up being debugged]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2101</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983258]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983258.1696350574493408203125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490418898]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983258]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2101</wp:comment_id>
			<wp:comment_author><![CDATA[vtfrvl]]></wp:comment_author>
			<wp:comment_author_email>victorfrancovl@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>177.82.159.76</wp:comment_author_IP>
			<wp:comment_date>2015-01-05 01:57:48</wp:comment_date>
			<wp:comment_date_gmt>2015-01-05 01:57:48</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Impressive! However, I wonder how difficult it would be to track down regexes when you have many of them in a single file. I guess it would be easier to do what you did there, use the module only in the regexes you need to debug or copy them to a different file/test.

Nice.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420427178.5584070682525634765625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490382464]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983174]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420423069.095201969146728515625;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983174]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983174.611855030059814453125;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2092</wp:comment_id>
			<wp:comment_author><![CDATA[jkstill]]></wp:comment_author>
			<wp:comment_author_email>jkstill@gmail.com</wp:comment_author_email>
			<wp:comment_author_url>http://jkstill.wordpress.com</wp:comment_author_url>
			<wp:comment_author_IP>50.53.36.205</wp:comment_author_IP>
			<wp:comment_date>2015-01-02 16:21:06</wp:comment_date>
			<wp:comment_date_gmt>2015-01-02 16:21:06</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Just gave this a quick try with a script that uses a quite large regex for email.
Thanks for pointing this out, it is really quite amazing.]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>46355709</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420220801.3121058940887451171875;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"jkstill";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_jobid</wp:meta_key>
				<wp:meta_value><![CDATA[5490421575]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_queued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983264]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983264]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983264.4799149036407470703125;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420215667.1883180141448974609375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:7:"jkstill";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1420215667]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>Internet Famous</title>
		<link>https://twoshortplanks.wordpress.com/2015/01/04/internet-famous/</link>
		<pubDate>Sun, 04 Jan 2015 13:44:02 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=402</guid>
		<description></description>
		<content:encoded><![CDATA[Did I ever tell you guys the story of how I once made the front page of <a href="http://imgur.com">imgur</a> with a Perl script?

As we're all aware, imgur is a imaging sharing network traditionally dedicated to such topics as <a href="http://imgur.com/search?q=cats">funny cat photos</a>, <a href="http://imgur.com/t/memes">internet memes</a> and <a href="http://imgur.com/t/polandball">other recycled content</a> often direct from its sister site reddit.  It's internet fluff in the best possible way, and what I like to browse when I'm eating lunch and I need to disconnect my brain after a morning of coding.  While it's got a minority of hardcore technical members, it's not at all known for it's technical content due to posts being promoted based mostly on up and down votes given by the masses;  As far as I know I'm the only person ever to get to the front page with actual code.

So how did I end up posting code of all things to imgur? Well, like most good Internet stories it started like this:

<img src="http://imgs.xkcd.com/comics/duty_calls.png" alt="" />

One lunchtime I saw a front page post featuring an image claiming that <strong>startling</strong> was the only nine letter word that you could remove one letter at a time and still get a valid word (i.e. <b>starting, <b>staring, string, sting, sing, sin, in, I.</b></b>)  I was pretty sure that wasn't right and there must be others. So I did what any Perl programmer does in this situation.  I wrote a Perl program to prove that wasn't true:

<img src="http://i.imgur.com/fwTYmDC.jpg" alt="" />

And then for giggles, I posted the above image <a href="http://imgur.com/gallery/yDV6s">back to imgur</a>.  Not exactly my best code, but I wrote it in about five minutes flat.  Five hours later it hit the front page and I had done my duty.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>402</wp:post_id>
		<wp:post_date>2015-01-04 13:44:02</wp:post_date>
		<wp:post_date_gmt>2015-01-04 13:44:02</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>internet-famous</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Getting Choosy</title>
		<link>https://twoshortplanks.wordpress.com/2015/01/10/getting-choosy/</link>
		<pubDate>Sat, 10 Jan 2015 14:03:46 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=404</guid>
		<description></description>
		<content:encoded><![CDATA[Today I released a new version of <a href="https://metacpan.org/pod/Mac::Choose">Mac::Choose</a> which wraps the choose command line utility. Basically this lets you, from Perl, pop open a fuzzy match dialog like quicksilver, alfred, et al. This is probably best shown rather than explained:

<pre><code>use Mac::Choose qw(choose);
print choose qw(
      red
      orange
      yellow
      green
      blue
      indigo
      violet
) or die "User canceled selection";</code></pre>

<a href="https://twoshortplanks.files.wordpress.com/2015/01/choose_example_demo.gif"><img class="alignnone size-full wp-image-415" src="https://twoshortplanks.files.wordpress.com/2015/01/choose_example_demo.gif" alt="choose_example_demo" width="660" height="357" /></a>

The exciting thing about this release is that while previous versions required you to go to <a href="https://tinyrobotsoftware.com/choose/">Tiny Robot Software's website</a> to download a copy of <code>choose</code>, this version of Mac::Choose ships with the <code>choose</code> binary and installs a copy alongside the Perl module.

<h2>Using File::ShareDir</h2>

In order to handle the intallation of the binary in a place where my code could once again find it I altered my distribution to use the <a href="https://metacpan.org/pod/File::ShareDir">File::ShareDir</a> infrastructure. Essentially this infrastructure comes in two halves, an installer to install things in the shared dirctory and a module that can give you access to the files again.

In my Module::Intall powered Makefile.PL in order to use <a href="https://metacpan.org/pod/Module::Install::Share">Module::Intall::Share</a> I simply had to add the line:

<pre><code>install_share;</code></pre>

This installs everything in the <code>share</code> directory of my distribution (which just contained one file, the <code>choose</code> binary) when you <code>make install</code>.

The changes to my module were also very simple:

<pre><code>use File::ShareDir qw(dist_file);
our $executable_path = dist_file("Mac-Choose","choose");</code></pre>

<h2>Testing</h2>

After those changes, everything worked flawlessly...apart from the test suite! The problem is that until the module is installed the files aren't in the shared directory, and traditionally we test a module <i>before</i> we install them.

This isn't insurmountable however, we just need to make some changes to our tests to quietly override File::ShareDir's functionality with that from <a href="https://metacpan.org/pod/Test::File::ShareDir">Test::File::ShareDir</a>:

<pre><code>use File::Spec::Functions qw(:ALL);
use FindBin;
use Test::File::ShareDir (
    -root =&gt; catdir($FindBin::Bin, updir),
    -share =&gt; { -dist =&gt; { "Mac-Choose" =&gt; "share" } },
);</code></pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>404</wp:post_id>
		<wp:post_date>2015-01-10 14:03:46</wp:post_date>
		<wp:post_date_gmt>2015-01-10 14:03:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>getting-choosy</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:comment>
			<wp:comment_id>2122</wp:comment_id>
			<wp:comment_author><![CDATA[X-man]]></wp:comment_author>
			<wp:comment_author_email>rudi.eisenhower@gmail.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>212.114.231.94</wp:comment_author_IP>
			<wp:comment_date>2015-01-10 20:27:44</wp:comment_date>
			<wp:comment_date_gmt>2015-01-10 20:27:44</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[Choose seems to be a shameless clone of dmenu. So if you really are ambitious, you could create a distribution called Graphical::Choose, which uses dmenu on unix systems with X and choose on Mac. And surely there is something similar for windows...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>0</wp:comment_parent>
			<wp:comment_user_id>0</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420926014.4060881137847900390625;s:7:"message";s:43:"Akismet re-checked and cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420982950.237780094146728515625;s:7:"message";s:51:"2shortplanks changed the comment status to approved";s:5:"event";s:15:"status-approved";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420982950]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420921664.320969104766845703125;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:0:"";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1420982950]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
		<wp:comment>
			<wp:comment_id>2124</wp:comment_id>
			<wp:comment_author><![CDATA[2shortplanks]]></wp:comment_author>
			<wp:comment_author_email>mark@twoshortplanks.com</wp:comment_author_email>
			<wp:comment_author_url></wp:comment_author_url>
			<wp:comment_author_IP>74.209.23.81</wp:comment_author_IP>
			<wp:comment_date>2015-01-11 13:32:28</wp:comment_date>
			<wp:comment_date_gmt>2015-01-11 13:32:28</wp:comment_date_gmt>
			<wp:comment_content><![CDATA[I'm currently not running a X-Windows system, so I don't have the inclination to develop that;  However, if someone wrote Graphical::Choose that <em>used</em> Mac::Choose, I wouldn't object...]]></wp:comment_content>
			<wp:comment_approved>1</wp:comment_approved>
			<wp:comment_type></wp:comment_type>
			<wp:comment_parent>2122</wp:comment_parent>
			<wp:comment_user_id>9278756</wp:comment_user_id>
			<wp:commentmeta>
				<wp:meta_key>jabber_published</wp:meta_key>
				<wp:meta_value><![CDATA[1420983148]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_result</wp:meta_key>
				<wp:meta_value><![CDATA[false]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>akismet_history</wp:meta_key>
				<wp:meta_value><![CDATA[a:4:{s:4:"time";d:1420983148.940824031829833984375;s:7:"message";s:28:"Akismet cleared this comment";s:5:"event";s:9:"check-ham";s:4:"user";s:12:"2shortplanks";}]]></wp:meta_value>
			</wp:commentmeta>
			<wp:commentmeta>
				<wp:meta_key>email_notification_notqueued</wp:meta_key>
				<wp:meta_value><![CDATA[1420983148]]></wp:meta_value>
			</wp:commentmeta>
		</wp:comment>
	</item>
	<item>
		<title>choose</title>
		<link>https://twoshortplanks.wordpress.com/2015/01/10/getting-choosy/choose/</link>
		<pubDate>Sat, 10 Jan 2015 13:56:35 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.files.wordpress.com/2015/01/choose.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>411</wp:post_id>
		<wp:post_date>2015-01-10 13:56:35</wp:post_date>
		<wp:post_date_gmt>2015-01-10 13:56:35</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>choose</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>404</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twoshortplanks.files.wordpress.com/2015/01/choose.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2015/01/choose.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:866;s:6:"height";i:466;s:4:"file";s:81:"/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2015/01/choose.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>choose_example_demo</title>
		<link>https://twoshortplanks.wordpress.com/2015/01/10/getting-choosy/choose_example_demo/</link>
		<pubDate>Sat, 10 Jan 2015 14:01:46 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://twoshortplanks.files.wordpress.com/2015/01/choose_example_demo.gif</guid>
		<description></description>
		<content:encoded><![CDATA[]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>415</wp:post_id>
		<wp:post_date>2015-01-10 14:01:46</wp:post_date>
		<wp:post_date_gmt>2015-01-10 14:01:46</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>choose_example_demo</wp:post_name>
		<wp:status>inherit</wp:status>
		<wp:post_parent>404</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>attachment</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<wp:attachment_url>https://twoshortplanks.files.wordpress.com/2015/01/choose_example_demo.gif</wp:attachment_url>
		<wp:postmeta>
			<wp:meta_key>_wp_attached_file</wp:meta_key>
			<wp:meta_value><![CDATA[/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2015/01/choose_example_demo.gif]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wp_attachment_metadata</wp:meta_key>
			<wp:meta_value><![CDATA[a:5:{s:5:"width";i:857;s:6:"height";i:464;s:4:"file";s:94:"/home/wpcom/public_html/wp-content/blogs.dir/1bf/8961906/files/2015/01/choose_example_demo.gif";s:5:"sizes";a:0:{}s:10:"image_meta";a:11:{s:8:"aperture";i:0;s:6:"credit";s:0:"";s:6:"camera";s:0:"";s:7:"caption";s:0:"";s:17:"created_timestamp";i:0;s:9:"copyright";s:0:"";s:12:"focal_length";i:0;s:3:"iso";i:0;s:13:"shutter_speed";i:0;s:5:"title";s:0:"";s:11:"orientation";i:0;}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Critical Hit</title>
		<link>https://twoshortplanks.wordpress.com/2015/01/27/critical-hit/</link>
		<pubDate>Tue, 27 Jan 2015 13:45:06 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=420</guid>
		<description></description>
		<content:encoded><![CDATA[Last night I braved <a href="http://en.wikipedia.org/wiki/January_2015_nor%27easter">Winter Storm Juno</a> to venture out to Albany Perl Mongers' technical meeting in East Greenbush.  Our special guest star Jeff Thalhammer had agreed to teleconference in from San Francisco to talk us through <a href="http://metacpan.org/pod/Perl::Critic">Perl::Critic</a>.  This arrangement worked pretty well for us, with Jeff able to chat with the small number of us that had braved the storm and answer our questions. The only flaw with the setup was Jeff wasn't able to try the pokemon cupcakes I'd baked. Bring on cupcake-over-ip technology is what I say.

I've been using Perl::Critic for many years now, and I wasn't sure I would get much out of the technical meeting, but I was very wrong. Jeff was able to give several tips, answer questions, and point out a bunch of improvements that I was unaware of since I first started using Perl::Critic years ago.

<h3>only</h3>

The biggest win for me was learning about using the <a href="https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic#only">only</a> option directly in a <code>.perlcriticrc</code> itself. This allows you to only run the rules specified in the critic file rather than any installed rules and is awesome for continuous integration test suites running off our in-house <code>.perldcriticrc</code> because if a new rule gets installed (due to an update our distribution dependencies) we don't start automatically using it (and failing it) without some sort of review.

<h3>verbose</h3>

The various levels of verbose output that Perl::Critic's <a href="https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic#verbose">verbose</a> options now provides are very helpful. Bumping the output to level 8 (with <code>--verbose=8</code>) helpfully tells you the name of the policy that you're violating, which is useful if you want to disable it with a <code>## no critic (...)</code>, or tweak the <code>.perlcriticrc</code> or simply read the documentation for the module so you can better understand what the policy is complaining about

<h3>profile-proto</h3>

My ancient personal <code>.perlcriticrc</code> file is getting a bit long in the tooth. Not only has my coding style changed over the many years as I've learned more about Perl, but Perl::Critic itself has improved introducing new policies both in the core distribution and on the CPAN itself. This is why I was excited to learn about the <a href="https://metacpan.org/pod/distribution/Perl-Critic/bin/perlcritic#profile-proto">profile-proto</a> which can spit out a fully-documented default <code>.perlcriticrc</code>

<h3>Let's Go Shopping</h3>

Jeff took us on a brief <i>shopping tour</i> of the CPAN to show us some of the cool new policies that are available. Some standouts include:

<ul>
    <li><a href="https://metacpan.org/pod/Perl::Critic::Moose">Perl::Critic::Moose</a> are a bunch of policies for dealing with Moose classes Dave Rolsky just released.</li>
    <li><a href="https://metacpan.org/pod/Perl::Critic::Tics">Perl::Critic::Tics</a> and and <a href="https://metacpan.org/pod/Perl::Critic::Bangs">Perl::Critic::Bangs</a> are a bunch of things that bother Ricardo Signes and Andy Lester that are worth looking at.</li>
</ul>

<h2>Thanks</h2>

Thanks to both Jeff for taking the time to talk to us, and to Patrick Cronin for once again organising the meeting, providing pizza and all the other thankless stuff he does to organise our meetings.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>420</wp:post_id>
		<wp:post_date>2015-01-27 13:45:06</wp:post_date>
		<wp:post_date_gmt>2015-01-27 13:45:06</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>critical-hit</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>The Role of Critique</title>
		<link>https://twoshortplanks.wordpress.com/2015/02/28/the-role-of-critique/</link>
		<pubDate>Sat, 28 Feb 2015 14:16:47 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=427</guid>
		<description></description>
		<content:encoded><![CDATA[Over the last week I've been noodling with a minor improvement to Perl Critic to do with <i>private methods</i> and roles.

Sometimes I write roles that are essentially importers for utility methods - methods that are essentially imported into the class but don't become part of the public interface.

Here's an example of such a role, something that allows you to write <code>$self-&gt;_select("SELECT * FROM foo WHERE foo_id",123)</code> on any class that has a <code>dbh</code> attribute.

<pre><code>package SuperProject::Role::WithSelect;

use Moo::Role;

requires 'dbh';

sub _select {
  my $self  = shift;
  my $sql   = shift;
  my @binds = @_;
  return $self-&gt;dbh-&gt;selectall_arrayref( $sql, { Slice =&gt; {} }, @binds);
}

1;</code></pre>

So what's the problem (aside from the fact that I should have been using DBIx::Class for the databse stuff?)

<pre>bash$ perlcritic --verbose 10 SuperProject/Role/WithSelect.pm
Private subroutine/method '_select' declared but not used at line 7, column 1.
 Subroutines::ProhibitUnusedPrivateSubroutines (Severity: 3)
   By convention Perl authors (like authors in many other languages)
   indicate private methods and variables by inserting a leading underscore
   before the identifier. This policy catches such subroutines which are
   not used in the file which declares them.

   This module defines a 'use' of a subroutine as a subroutine or method
   call to it (other than from inside the subroutine itself), a reference
   to it (i.e. `my $foo = \&amp;_foo'), a `goto' to it outside the subroutine
   itself (i.e. `goto &amp;_foo'), or the use of the subroutine's name as an
   even-numbered argument to `use overload'.</pre>

Ooops. Perl::Critic is complaining about that private subroutine that's not used in the role class. I guess I could change the method name from <code>_select</code> to <code>select</code>, but I don't want <code>select</code> to become part of the public interface to the class that's consuming this role.

Another option would be to use a <code>## no critic</code> declaration. But that's tedious, almost every role I write is going to be littered with extranious <code>## no critic</code> delcarations and that's often a sign that something is seriously wrong. What we need is some way to turn off <code>Subroutines::ProhibitUnusedPrivateSubroutines</code> for all our roles, but leave it on for everything else.

And that's what I've been working on with help from Jeff Thalhammer over the last week. With the release of Perl::Critic that was <a href="https://metacpan.org/source/THALJEF/Perl-Critic-1.124/Changes">released today</a> you can tweak <code>Subroutines::ProhibitUnusedPrivateSubroutines</code> in your <code>perlcriticrc</code> to automatically turn itself off for a file if somewhere in that file you use a particular module, like, say, <code>Moo::Role</code>.

<pre>[Subroutines::ProhibitUnusedPrivateSubroutines]
skip_when_using = Moo::Role</pre>]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>427</wp:post_id>
		<wp:post_date>2015-02-28 14:16:47</wp:post_date>
		<wp:post_date_gmt>2015-02-28 14:16:47</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name>the-role-of-critique</wp:post_name>
		<wp:status>publish</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_publicize_pending</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_published</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_rest_api_client_id</wp:meta_key>
			<wp:meta_value><![CDATA[-1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_edit_last</wp:meta_key>
			<wp:meta_value><![CDATA[9278756]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>geo_public</wp:meta_key>
			<wp:meta_value><![CDATA[0]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_9ade47011b6bd63df0b870443f30a344</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c914946b5bf30a8a0bb4a48f71408117</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_oembed_c6ff8feae3450c11d86343ffc16c3bc2</wp:meta_key>
			<wp:meta_value><![CDATA[{{unknown}}]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title></title>
		<link>https://twoshortplanks.wordpress.com/?p=433</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=433</guid>
		<description></description>
		<content:encoded><![CDATA[Moose is wonderful, and Moose is great. But occasionally you <b>do</b> run into <em>some</em> problems.

<pre><code>package ProvidesAttribute;
use Moose::Role;

has 'an_attribute' =&gt; (
    is =&gt; 'ro',
);

1;</code></pre>

And let's write another role that requires that the class that consumes it has a <code>an_attribute</code> method:

<pre>package NeedsAttribute;
use Moose::Role;

requires 'an_attribute';

1;</pre>

And a class that consumes both of these:

<pre>package Class;
use Moose;

with 'ProvidesAttribute','NeedsAttribute';

1;</pre>

This should all work, right? The <code>an_attribute</code> method should be provided by the attribute declaration in <code>ProvidesAttribute</code> thus satisfying the <code>requires</code> in <code>NeedsAttribute</code>. Nope. Not with the latest version of Moose available at the time of writing (2.1403)...

<pre><code>bash$ perl -e 'use Class'
'ProvidesAttribute|NeedsAttribute' requires the method 'an_attribute' to be implemented by 'Class' at /Users/Mark/perl5/perlbrew/perls/perl-5.18.2/lib/site_perl/5.18.2/darwin-2level/Moose/Exporter.pm line 419
    Moose::with('ProvidesAttribute', 'NeedsAttribute') called at Class.pm line 4
    require Class.pm at -e line 1
    main::BEGIN at Class.pm line 0
    eval {...} at Class.pm line 0
Compilation failed in require at -e line 1.
BEGIN failed--compilation aborted at -e line 1.</code></pre>

&nbsp;

Bother! The attribute isn't a method at the time the role composition requirement checking is done. However, once we know that this is a problem the fix is simple. Just pre-declare the <code>an_attribute</code> sub in <code>ProvidesAttribute</code>:

<pre><code>package ProvidesAttribute;
use Moose::Role;

has 'an_attribute' =&gt; (
    is =&gt; 'ro',
);
sub an_attribute;

1;</code></pre>

Despite being a little ugly, now everything works.

And in case you're wondering, no Moo doesn't have this same issue. You could <code>s/Moose/Moo/g</code> the above code and you wouldn't need the <code>sub an_attribute;</code>. Oh well.]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>433</wp:post_id>
		<wp:post_date>2015-03-16 19:36:28</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>sharing_disabled</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_facebook</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_google_plus</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_twitter</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_linkedin</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_tumblr</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
		<wp:postmeta>
			<wp:meta_key>_wpas_skip_path</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>This is a test</title>
		<link>https://twoshortplanks.wordpress.com/?p=435</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=435</guid>
		<description></description>
		<content:encoded><![CDATA[Here's a test of what we might see]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>435</wp:post_id>
		<wp:post_date>2015-11-24 16:11:49</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
	<item>
		<title>Perl Advent Calendar 2015 Redux</title>
		<link>https://twoshortplanks.wordpress.com/?p=437</link>
		<pubDate>Mon, 30 Nov -0001 00:00:00 +0000</pubDate>
		<dc:creator>2shortplanks</dc:creator>
		<guid isPermaLink="false">http://blog.twoshortplanks.com/?p=437</guid>
		<description></description>
		<content:encoded><![CDATA[So, I think I might have finally recovered enough from the act of writing for and editing <a href="http://perladvent.org/2015/">the Perl Advent Calendar</a> this year to take five minutes to sit back and write about it.

<h2>The Bare Stats</h2>

The Perl Advent Calendar this year contained twenty eight thousand three hundred and forty one words (a 3.7% increase on last year) written by eighteen different authors, putting it once again in the region of three quarters of a short novel.

Last year I wrote a <a href="http://blog.twoshortplanks.com/2014/12/23/perl-advent-calendar-2014-stats/">bunch of statistics</a> about the advent calendar.  Let's revisit these this year and see how we're doing!

<ul>
    <li><strong>Total articles</strong>: 25 (24 articles + xmas day, same as last year)</li>
    <li><strong>Articles written by people other than me</strong>: 19 (up from 13 last year)</li>
    <li><strong>Total number of authors (including me)</strong>: 18 (up from 13 last year)</li>
    <li><strong>Number of Pull Requests For Typos (so far)</strong>: 14 (up from 8 last year)</li>
    <li><strong><em>NEW</em> Number of Active Editors: 5</strong> (up from 2 last year)</li>
</ul>

<ul>
    <li><strong>T</strong><strong>otal number of lines</strong>: 5,710 (up from 5,318 last year)</li>
    <li><strong>Total number of words:</strong> 28,341 (up from 27,323 last year)</li>
    <li><strong>Total number of graphics: </strong>22 (including two animated gifs, up from 7 total graphics last year)</li>
    <li><strong><em>NEW</em> Total number of interactive JavaScript doohdahs:</strong> 2 (up from zero last year)</li>
    <li><strong>Longest article</strong>: <a href="http://perladvent.org/2015/2015-12-03.html">FFI::Platypus</a> (an epic 641 lines, down from 745 last year)</li>
    <li><strong>Perl examples</strong>: 165 (up from 159 last year)</li>
</ul>

<h2>The Good</h2>

Several key things made the Advent Calendar much better than last year:

<ul>
    <li>More articles were written by people other than me (though I still wrote six of them, including the end of year.)  This is a plus both for me (as I have to do less) and for the calendar as more people tends to result in better content</li>
    <li>The majority of the articles I wrote were written before December.</li>
</ul>

<h2>The Bad</h2>

&nbsp;

&nbsp;]]></content:encoded>
		<excerpt:encoded><![CDATA[]]></excerpt:encoded>
		<wp:post_id>437</wp:post_id>
		<wp:post_date>2016-01-09 16:05:35</wp:post_date>
		<wp:post_date_gmt>0000-00-00 00:00:00</wp:post_date_gmt>
		<wp:comment_status>open</wp:comment_status>
		<wp:ping_status>open</wp:ping_status>
		<wp:post_name></wp:post_name>
		<wp:status>draft</wp:status>
		<wp:post_parent>0</wp:post_parent>
		<wp:menu_order>0</wp:menu_order>
		<wp:post_type>post</wp:post_type>
		<wp:post_password></wp:post_password>
		<wp:is_sticky>0</wp:is_sticky>
		<category domain="category" nicename="1"><![CDATA[1]]></category>
		<wp:postmeta>
			<wp:meta_key>_wpcom_is_markdown</wp:meta_key>
			<wp:meta_value><![CDATA[1]]></wp:meta_value>
		</wp:postmeta>
	</item>
</channel>
</rss>
